---
title: Defer Endpoint Calls
order: 7
layout: page
---

= Defer Endpoint Calls

When creating UI with TypeScript, all the logic is done on the client side, which means that it works offline. However, saving any data using endpoints would not work offline, since the endpoint calls require network access by default.

To enable saving the data when the application is offline, the endpoint calls should be deferred. A deferred call is stored locally in the browser when the application is offline, and will be sent when coming back online.

Vaadin endpoints are optionally deferrable. When deferrable endpoints are called, Vaadin automatically defers the offline requests.

== @Deferrable annotation

You can make an endpoint deferrable by adding a `@Deferrable` annotation. It works either on the `@Endpoint` class or a single method.

*Example*: Using the `@Deferrable` annotation to enable automatic deferring for offline requests.
[source,java]
----
@Endpoint
public class PersonEndpoint {

    public Person loadPerson() {
        // ...
    }

    @Deferrable
    public void savePerson(Person person) {
        // ...
    }
}
----

What happens is that the generated endpoint on the client-side will return a `DeferrableResult`. From there, you can check if the endpoint request is deferred or not. If the endpoint request is not deferred, you can get the actual result. Otherwise, you can get the request meta information.

*Example*: Using the returned `DeferrableResult` from a deferrable endpoint call.
[source,typescript]
----
// import the remote endpoint
import * as personEndpoint from '../../generated/PersonEndpoint';

const deferrableResult = await personEndpoint.update(person);
if (deferrableResult.isDeferred) {
    // your offline logic
} else {
    const result = deferrableResult.result;
    // your online logic
}
----

For a deferred call, the result is not available in the returned `DeferrableResult` object. See the <<tutorial-handle-deferredcall-result#, Handle Deferred Call Result>> tutorial on how to handle deferred call results using `onDeferredCall` callback.
