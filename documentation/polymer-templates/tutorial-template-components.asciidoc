---
title: Binding Components from a PolymerTemplate
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Binding Components from a PolymerTemplate

By using the `@Id` annotation, you can get a server-side `Component` or `Element` reference
for an element defined in the PolymerTemplate JavaScript file. This way you can interact with the `Component` or `Element` on the server side.

[NOTE]
The `Component`/`Element` needs to have the same `@Tag` as the actual element that is wired.
This means that you can not wire a `<span id="content"></span>` to a `@Id("content") Div content`

Here is a template file with a placeholder `div` element with a `"content"` identifier. This element is mapped to a `Div` component in Java code below so that we can add a `Component` as a child to it.

[source,js]
----
class MainPage extends PolymerElement {

    static get template() {
        return html`
            <div id="header">Main page</div>
            <div id="content"></div>
            <hr>
            <div id="footer">
                <a href="mailto:someone@example.com?Subject=Hello" target="_top">Send Mail</a>
            </div>`;
    }

    static get is() {
          return 'main-page';
    }
}

customElements.define(MainPage.is, MainPage);
----

You can for instance implement a method that adds a `Component` to the content of your template element.

[source,java]
----
@Tag("main-page")
@JsModule("./com/example/main-page.js")
public class MainPage extends PolymerTemplate<TemplateModel> {

    @Id("content")
    private Div content;

    public void setContent(Component content) {
        this.content.removeAll();
        this.content.add(content);
    }
}
----

The `@Id` annotation is used to map a component to an element in the template
on the client that has the HTML identifier `"content"`.

A component instance of the declared type is created automatically and
wired to the template DOM element and the `content` field in the Java class.

You can now call the method to set any `Component` as a content for the `MainPage` class:

[source,java]
----
MainPage page = new MainPage();
page.setContent(new Label("Hello!"));
----

In the Polymer template class example above, the `div` element with
`"footer"` identifier could also be mapped via `Div` component and
`@Id("footer")` annotation. But neither its hierarchical
structure nor attributes/properties are available on the server side via API.
The injected `Div` instance doesn't have any server side child even though
there is the anchor `a` element available on the client side. The injected instance
`getChildren()` method returns an empty `Stream`.

Similar to this the `getText()` method of the `Div` instance injected via
`@Id("header")` returns an empty string.

So, server side `Component`/`Element` read methods are not always in sync
with the client-side. But you still may use mutation API methods from the server side
like `appendChild`/`setProperty`/`setAttribute`. Getter methods returns values
which have been set from the server side only.

[NOTE]
The created `Element` is virtually mapped to be connected to the `ShadowRoot` of the
`PolymerTemplate` even if it would be deeper in the shadow tree.
The virtually mapped components can not be removed from the DOM by removing them on the
server side.

[NOTE]
The declared type used in an `@Id` injection declaration must have a default constructor to be able to instantiate it.

[TIP]
The `@Id` annotation can also be used to inject an `Element` instance instead of a `Component` instance in case you want to use low level API or there is no appropriate HTML component available.

[NOTE]
You can detect whether a component is used in a Template by using the `isTemplateMapped` method. See the <<tutorial-component-integration#,Integrating components in a PolymerTemplate>> tutorial for more details.
