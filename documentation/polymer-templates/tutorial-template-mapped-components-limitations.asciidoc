---
title: PolymerTemplate, Mapped Components Limitations
order: 15
layout: page
---

=  PolymerTemplate, Mapped Components Limitations

== Out-of-sync Methods

*Example*: `MainPage` JavaScript Polymer template file.

[source,js]
----
class MainPage extends PolymerElement {

    static get template() {
        return html`
            <div id="header">Main page</div>
            <div id="content"></div>
            <hr>
            <div id="footer">
                <a href="mailto:someone@example.com?Subject=Hello" target="_top">Send Mail</a>
            </div>`;
    }

    static get is() {
          return 'main-page';
    }
}

customElements.define(MainPage.is, MainPage);
----

*Example*: Mapped Java template class.

[source,java]
----
@Tag("main-page")
@JsModule("./com/example/main-page.js")
public class MainPage extends PolymerTemplate<TemplateModel> {

    @Id("content")
    private Div content;

    public void setContent(Component content) {
        this.content.removeAll();
        this.content.add(content);
    }
}
----

In the Polymer template class example above, you could additionally map the `div` element with a `"footer"` identifier using the `Div` component and `@Id("footer")` annotation. However, neither the hierarchical structure, nor any attributes or properties, will be available on the server side using the Java API.

The injected `Div` instance does not have a server-side child, even though the `a` (anchor) element is available on the client side. The `getChildren()` method in the injected instance returns an empty `Stream`. Similarly, the `getText()` method of the `Div` instance injected using the `@Id("header")` annotation, returns an empty string.

To summarize:

* Server-side `Component` or `Element` read methods are not always in sync with the client side.
* You can still use mutation API methods, like `appendChild`, `setProperty` or `setAttribute` from the server side, without issue.
* Getter methods return values that are set from the server side only.

== Removing Mapped Elements

A virtually-mapped `Element` is connected to the `ShadowRoot` of the
`PolymerTemplate`, even if it actually resides deeper in the shadow tree. You cannot remove virtually mapped components from the DOM by removing them on the server side.


[NOTE]
You can detect whether a component is used in a `PolymerTemplate` using the `isTemplateMapped` method. See the <<tutorial-component-integration#,PolymerTemplate, Detecting Component Mappings>> for more.

[NOTE]
The same limitations apply to Lit template class.
