---
title: PolymerTemplate, Mapped Components Limitations
order: 15
layout: page
---

=  PolymerTemplate, Mapped Components Limitations

== Out-of-sync Methods

In the Polymer template class example above, you could additionally map the `div` element with a `"footer"` identifier using the `Div` component and `@Id("footer")` annotation. However, neither the hierarchical structure, nor any attributes or properties, will be available on the server side using the Java API.

The injected `Div` instance does not have a server-side child, even though the `a` (anchor) element is available on the client side. The `getChildren()` method in the injected instance returns an empty `Stream`. Similarly, the `getText()` method of the `Div` instance injected using the `@Id("header")` annotation, returns an empty string.

To summarize:

* Server-side `Component` or `Element` read methods are not always in sync with the client side.
* You can still use mutation API methods, like `appendChild`, `setProperty` or `setAttribute` from the server side, without issue.
* Getter methods return values that are set from the server side only.

== Removing Mapped Elements

A virtually-mapped `Element` is connected to the `ShadowRoot` of the
`PolymerTemplate`, even if it actually resides deeper in the shadow tree. You cannot remove virtually mapped components from the DOM by removing them on the server side.


[NOTE]
You can detect whether a component is used in a `PolymerTemplate` using the `isTemplateMapped` method. See the <<tutorial-component-integration#,Detecting PolymerTemplate Mappings in Components>> for more.
