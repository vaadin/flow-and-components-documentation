---
title: Using HTML Templates from Server side Java code
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Declarative layouting using HTML templates

The Polymer (HTML) Template support in Vaadin allows you to create pre-formatted HTML Components or declarative layouts that can be used from Java as any other Component. With templates, you have full control of how the DOM looks. You can use any Vaadin components in your design, as well as JavaScript logic and even CSS. Declarative layouts have many benefits, but also some drawbacks.

== When should I use Templates?

Templates work best when used in simple, static views, where the view itself doesn't change because of the data. Templates are also a good choice if you need absolute control over the DOM. An example of both cases is a simple Login view. Logins are typically simple, with only a few UI controls, and also have very precise styling requirements. A template is easier to create and maintain in this case, instead of building the view with the Java API.

The other case where you should use templates is when you want client-side (JavaScript) logic in your app. Typical examples for this are apps or views that need offline functionality. With templates, you can have any logic you want on the client side, allowing you to cut the cord to the server when you need to. 

There are however some limitations to using templates; please look below for more info.

== When should I build the UI with Java Components?

The Java API is the traditional way of building UIs with Vaadin. It works very well for complex and dynamic UIs, where the view structure changes depending on the data that is viewed. The Component API also allows you to use inheritance to easily create and modify your own custom components. The addition of the low-level Element API gives you much greater DOM control from Java than ever before. All Java code has the additional benefit of being completely type-safe; the risk of typos or other mistakes is greatly reduced since the code is compiled before use.

The drawbacks of the Component approach is that it is harder to get a structural overview of the resulting view from the code. And although modifying the DOM is possible, it is not as easy as just writing HTML in a template. 

== Known limitations when using Templates

Besides the pros and cons listed above, the Template API has some deliberate limitations in its design that you'll need to be aware of when selecting which API you will use. The root for the limitations is that HTML templates are not processed on the server before they are sent to the client. This means a few things are not happening:

* Templates are not checked for correctness on the server. Any errors will be detected by the browser, or show up as incorrect layouting, etc.
* Because the Template isn't checked, the server is not aware of the content of the template by default. As shown in later chapters, you can add synchronization of components, data and events yourself, but by default the server does not have any info about the template contents, e.g. attributes for any used components. This means that many getter methods return the incorrect value (because the client never sent them to the server).

The latter behaviour can be demonstrated by e.g. using a `vaadin-grid` in a template. In the template itself, a developer can configure the Grid, add columns and add data. But, if the developer uses e.g. `@Id` to <<tutorial-template-components#,bind the Grid in the Java companion file>>, they will soon run into issues. On the server, in the Java file, the Grid object will not be aware of anything that was configured in the template, such as what columns are configured. 

You can add components and DOM to a template structure, but you can not remove anything present in the original template. Overriding component properties does work however, so you can add e.g. an empty Grid into a template, bind it using `@Id`, and add columns and data from Java code.

Effectively, this means that you will need to make a choice as a developer; either you use the Java API for components, or you put all your UI logic into the templates as JavaScript. Combining the two is possible, but there are severe limitations on what you can do from the server API. You can still combine using views made with Templates and views created with the Component API in your application. This way you can create some views that e.g. work offline, while others won't, to reduce total development effort.

In the following chapters we'll take a thorough look at the Template API and how you can utilize it in your application.

