---
title: Using Templates from Server-side Java Code
order: 1
layout: page
---

= Using Templates from Server-side Java Code

In Vaadin, you have a few different options on how to build your views.

. Build your views purely with Java.
. Define your layouts of your views declaratively and implement the UI logic in Java.
. Build your views purely client-side with TypeScript and LitElement. Available from Vaadin 15 forward.

These ways to build views can be mixed and matched within an application. All Vaadin components are available through Java API as well as declaratively in HTML. Choosing the correct way depends on your use case and preferences. This chapter goes through the second option, how to build your UIs declaratively while implementing the logic in Java.

== Benefits of Using Templates

Separately defining the layout of a view from defining the logic of said view gives a clear and maintainable code. It makes it easier to find how the view is defined and where it is updated. HTML templates are a robust way of defining the UI structure, while Java is a great way to define the logic of the view. 

Vaadin has support for two declarative template languages, Polymer and LitElement. The LitElement library is the successor of the Polymer library. Vaadin will support both for the foreseeable future. We recommend choosing LitElement as the template language when deciding to build new templates for your Vaadin applications. It is a future proof, lightweight, and more focused template language.

Vaadin can refer to and access components in Java defined by a template. Components in the template are given unique ids, and any component with an id can be accessed with Java API to configure logic further. Java-only components like compositions built with Java can be added to a HTML template by giving a layout an id in the template and adding the Java component in Java code.


For example `<vaadin-button id="my-button">Press me</vaadin-button>` can be accessed with `@Id("my-button") Button button;` in Java.

As declarative layouts are a robust and maintainable way for defining views, https://vaadin.com/designer[Vaadin Designer], the visual tool for building UI for Vaadin apps, uses them as its format.

== Known Limitations of Templates

The template API has limitations that you need to be aware of before using it.

* Currently HTML templates are not processed on the server before being sent to the client. Server side is not aware of the content of the template, like the attributes used by a component. This means that many getter methods return the incorrect value because the client never sent them to the server. We plan to remove this limitation in the near future.
* You can add components and a DOM to a template structure, but you cannot remove anything present in the original template. However, overriding component properties do work. 

== Correctly Separating Structure and Logic
Strive to only define things that do not change in the template and leave all dynamic parts to Java. In the template you can, for example, have attributes that never change, captions for components like `Button` and `TextField` that always stay the same, or styling for the view. If, for example, a `Button` should change the caption depending on user interaction, then leave it empty in the template and define the intial value in Java.

With `Grid`, defining columns can feel like a static part, but columns and data go strongly hand in hand. We recommend defining a `vaadin-grid` with static attributes in the template and defining columns and data in Java.

In the <<tutorial-template-basic#,next chapter>>, you will get a full example with HTML template and Java logic.
