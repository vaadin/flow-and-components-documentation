---
title: Creating a Simple Component Using the Template API
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Creating a Simple Component Using the Template API

There are multiple ways you can create a component. This tutorial uses the `PolymerTemplate` API with no additional elements or components. For other component tutorials, see:

* <<../creating-components/tutorial-component-basic#,Creating a Simple Component Using the Element API>>
* <<../creating-components/tutorial-component-many-elements#,Creating a Component Based on Many Elements>>
* <<../creating-components/tutorial-component-composite#,Creating a Component Using Existing Components>>
* <<../creating-components/tutorial-component-container#,Creating a Component Which Can Contain Other Components>>

For tutorials about how to use different template features, see:

* <<tutorial-template-components-in-slot#,Using <slot> in PolymerTemplates>>
* <<tutorial-template-event-handlers#,Handling User Events in a Template>>

This tutorial is based on the https://github.com/vaadin/flow-demo/tree/master/demo-hello-worlds[Hello Worlds technical demo].
The demo shows three ways of achieving the same result: using components, element API and the template approach.

We'll create a demo, that will be asking a user to input a name and will print a greeting on button click, using the input.

== Client side

First, we need to define a template with all components in `frontend/src/hello-world.js`:

[source,js]
----
import {PolymerElement,html} from '@polymer/polymer/polymer-element.js';
import '@polymer/paper-input/paper-input.js';

class HelloWorld extends PolymerElement {

    static get template() {
        return html`
            <div>
                <paper-input id="inputId" value="{{userInput}}"></paper-input>
                <button id="helloButton" on-click="sayHello">Say hello</button>
                <div id="greeting">[[greeting]]</div>
            </div>`;
    }

    static get is() {
          return 'hello-world';
    }
}

customElements.define(HelloWorld.is, HelloWorld);
----

This is a JavaScript module describing a Polymer template. All features used in the example are standard Polymer features. If you're unfamiliar with any of them,
please refer to https://www.polymer-project.org/3.0/docs/about_30[Polymer project documentation page].
For clarity and demonstration purposes, this example uses https://github.com/PolymerElements/paper-input[paper-input] component.

[NOTE]
The tag name of the template returned by the function `is()` should contain at least one dash (`-`). For example, `hello-world` is a valid tag name, but `helloworld` is not.

The template contains both a one-way binding (`\[[greeting]]`) and a two-way binding (`{{userInput}}`). There is also an event handler `sayHello` that is triggered on `helloButton` click. We have not specified the model at all, it will be propagated automatically from the server side.

We've also imported some dependencies:

* The `PolymerElement` from the Polymer library is the required superclass of all Polymer templates.
* `html` for inline DOM templating.
* The `paper-input` Polymer component.


[NOTE]
Earlier Vaadin versions used Polymer 2, HTML imports and the Bower package manager to manage component dependencies. Vaadin 14 can still use components created in this way in a special *compatibility mode*. However, the documentation here covers only Polymer 3 and npm; for guidance on building client-side components with Polymer 2 and HTML imports we refer to the https://vaadin.com/docs/v13/flow/polymer-templates/tutorial-template-basic.html[Vaadin 13 documentation].

== Server side

To be able to use this template you need to create a Java class which extends `PolymerTemplate`,
set its tag name to match the return value of the Polymer template's `is()`-function, and add the `@JsModule` annotation to connect the template class (`hello-world.js`). You should also declare the dependency on the npm package you are using by adding `@NpmPackage` annotation. In this example, `@polymer/paper-input 3.0.2` is used.

[source,java]
----
@Tag("hello-world")
@NpmPackage(value = "@polymer/paper-input", version = "3.0.2")
@JsModule("./src/hello-world.js")
public class HelloWorld extends PolymerTemplate<HelloWorldModel> {
    private static final String EMPTY_NAME_GREETING = "Please enter your name";

    /**
     * Creates the hello world template.
     */
    public HelloWorld() {
        setId("template");
        getModel().setGreeting(EMPTY_NAME_GREETING);
    }

    @EventHandler
    private void sayHello() {
        // Called from the template click handler
        getModel().setGreeting(Optional.ofNullable(getModel().getUserInput())
                .filter(userInput -> !userInput.isEmpty())
                .map(greeting -> String.format("Hello %s!", greeting))
                .orElse(EMPTY_NAME_GREETING));
    }
}
----

Here we have defined a class with the required annotations as well as a model and an event handler.

The model for the component is defined the following way:
[source,java]
----
/**
 * Model for the template.
 */
public interface HelloWorldModel extends TemplateModel {
    /**
     * Gets user input from corresponding template page.
     *
     * @return user input string
     */
    String getUserInput();

    /**
     * Sets greeting that is displayed in corresponding template page.
     *
     * @param greeting
     *            greeting string
     */
    void setGreeting(String greeting);
}
----

=== JS

In order for a component to be processed correctly, we need to bind a Java class with the template, created earlier, by specifying `@JsModule` with the path to the JavaScript module relative to the `frontend` folder in the project root. In the above example, `./src/hello-world.js` is the file name of the template file declared earlier relative to `frontend`.

If needed, multiple JavaScript resources can be imported using the `@JsModule` annotation.

=== Tag

The tag corresponds to the value returned by the template's static getter `is`, it sets the tag value to current component.

=== Model

Model describes all properties that are passed to the html template and used on the client side.
The model is simple Java interface, extending `TemplateModel` class and having getter and/or setter methods
for properties.
Model can be accessed via `getModel()` method after it's specified as a generic type of `PolymerTemplate` class.

=== Event handler

Server side has method, annotated with `@EventHandler` annotation, that is used to react on event form the client side, triggered
by the `helloButton` button.

=== Call the server side method from the client side

Another way to call a server side method is `@ClientCallable` annotation which marks a template method as the
method which should be called from the client side code using notation `this.$server.serverMethodName(args)`.
It can be used somewhere in your client side Polymer class implementation. You can pass your own arguments in this method.
Just make sure that their types matches to method declaration on the server side.

=== Receiving "after server update" event

In some cases you may want to execute some client-side logic after the component
is updated from the server during a roundtrip.
E.g. the component constructor is called to create a component on the client side but
this component is not yet initialized by data from the server side. So it's too early
to do anything with the component which is not yet ready.
In this case you can use the method `afterServerUpdate`. If this method is defined
for the component it will be called each time after the component is updated
from the server side.

[source,js]
----
import {PolymerElement,html} from '@polymer/polymer/polymer-element.js';

class MyComponent extends PolymerElement {

    static get template() {
        return html`
            <div>
                <div>[[text]]</div>
            </div>`;
    }

    static get is() {
          return 'my-component';
    }

    afterServerUpdate(){
        console.log("The new 'text' value is: "+this.text);
    }
}

customElements.define(MyComponent.is, MyComponent);
----

== Usage in code

You can use `HelloWorld` like any other component.

[source,java]
----
HelloWorld hello = new HelloWorld();

Div layout = new Div();
layout.add(hello);
----

[NOTE]
To make your template-based product supporting non-ES6 browers like IE 11 and Safari 9, you need to configure the `vaadin-maven-plugin` in your `pom.xml`. See the chapter <<../production/tutorial-production-mode-basic#,Taking your Application into Production>> for more information.
