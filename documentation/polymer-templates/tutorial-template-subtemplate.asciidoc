---
title: Using sub-template from PolymerTemplate
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Using sub-template from PolymerTemplate

You can configure Java instances to be created for custom elements inside your HTML template file with the `@Uses` annotation.

Here is an example of parent HTML template file:

[source,js]
----
import {PolymerElement,html} from '@polymer/polymer/polymer-element.js';
import 'child-template.js';

class ParentTemplate extends PolymerElement {
    static get template() {
        return html`
            <div>Parent Template</div>
            <div>[[name]]</div>
            <child-template></child-template>`;
    }

    static get is() { return 'parent-template' }
}

customElements.define(ParentTemplate.is, ParentTemplate);
----

The Java counterpart defines that `ChildTemplate` should be instantiated for any template element with a matching tag name (i.e. `child-template`).

[source,java]
----
@Tag("parent-template")
@JsModule("./com/example/parent-template.js")
@Uses(ChildTemplate.class)
public class ParentTemplate extends PolymerTemplate<Model> {
}

public interface Model extends TemplateModel {
    void setName(String name);

    String getName();
}
----

The HTML template uses a `child-template` element, which is a custom element defined in `ChildTemplate.html`.
Since the client-side implementation of `child-template` depends on a click handler defined from server-side Java, an instance of `ChildTemplate` must be created on the server.
By using `@Uses(ChildTemplate.class)`, this instance will automatically be created and hooked up with the `<child-template>` element in the parent template based on the `@Tag("child-template")` annotation value.

[NOTE]
Server-side instances are also created when using `@Id` to connect elements together. You don't need `@Uses` for elements that are already covered by `@Id`, and vice versa.

Here is the child template Java code:

[source,java]
----
@Tag("child-template")
@JsModule("./com/example/child-template.js")
public  class ChildTemplate extends PolymerTemplate<TemplateModel> {

    @EventHandler
    private void handleClick() {
        System.out.println("Click on Button in the child template");
    }
}
----

And it's HTML template counterpart:

[source,js]
----
import {PolymerElement,html} from '@polymer/polymer/polymer-element.js';

class ChildTemplate extends PolymerElement {
    static get template() {
        return html`<button on-click="handleClick">Child Template</button>`;
    }

    static get is() { return 'child-template' }
}

customElements.define(ChildTemplate.is, ChildTemplate);
----

This template delegates a click handler to the server side and the method `handleClick`
will be called on the `ChildTemplate` instance (not `ParentTemplate` instance).

[NOTE]
You can detect whether a component is part of a Template by using the `isTemplateMapped` method. See the <<tutorial-component-integration#,Integrating components in a PolymerTemplate>> tutorial for more details.
