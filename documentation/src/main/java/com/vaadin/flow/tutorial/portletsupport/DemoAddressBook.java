package com.vaadin.flow.tutorial.portletsupport;

import javax.portlet.PortletMode;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;

import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.ItemClickEvent;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.portal.VaadinPortlet;
import com.vaadin.flow.portal.handler.PortletEvent;
import com.vaadin.flow.portal.handler.PortletModeEvent;
import com.vaadin.flow.portal.handler.PortletView;
import com.vaadin.flow.portal.handler.PortletViewContext;
import com.vaadin.flow.tutorial.annotations.CodeFor;

@CodeFor("portlet-support/demo-address-book.asciidoc")
public class DemoAddressBook {
    public class ListPortletView extends VerticalLayout implements PortletView {
        private PortletViewContext vaadinPortletContext;

        public ListPortletView() {
            // ... other initialization ...

            Grid<Contact> grid = new Grid<>(Contact.class);
            // ... other grid configuration ...
            grid.addItemClickListener(this::fireSelectionEvent);
        }
        
        @Override
        public void onPortletViewContextInit(PortletViewContext context) {
            context.addEventChangeListener("contact-updated", this::handleEvent);
            // save context for sending events
            vaadinPortletContext = context;
        }

        private void fireSelectionEvent(ItemClickEvent<Contact> contactItemClickEvent) {
            // get contact id
            Integer contactId = contactItemClickEvent.getItem().getId();

            // save the id into a string-to-string map
            Map<String, String> param = Collections.singletonMap(
                    "contactId", contactId.toString());

            // send the event with name "contact-selected"
            vaadinPortletContext.fireEvent("contact-selected", param);
        }

        // receives all correctly formatted portlet hub events
        // we are looking for the contact-updated event generated by FormPortletView
        // we check that the event name is correct and that the contact exists. Then
        // we update the contact information.
        private void handleEvent(PortletEvent event) {
            if ("contact-updated".equals(event.getEventName())) {
                int contactId = Integer.parseInt(event.getParameters().get("contactId")[0]);
                Optional<Contact> contact = ContactService.getInstance().findById(contactId);
                if (contact.isPresent()) {
                    // TODO: actually update grid
                }
            }
        }
    }

    public class FormPortletView extends VerticalLayout implements PortletView {
        private static final String ACTION_EDIT = "Edit";
        private static final String ACTION_SAVE = "Save";

        private PortletViewContext vaadinPortletContext;
        private PortletMode portletMode;

        private Button action;
        private Binder<Contact> binder;
        private TextField firstName;
        private Image image;
        // ... other components

        
        @Override
        public void onPortletViewContextInit(PortletViewContext context) {
            context.addEventChangeListener("contact-selected", this::handleEvent);
            context.addPortletModeChangeListener(this::handlePortletMode);
            // save context for sending events
            vaadinPortletContext = context;
            
         // ... setup other form components

            action = new Button(PortletMode.EDIT
                    .equals(context.getPortletMode()) ?
                    ACTION_SAVE : ACTION_EDIT, event -> {
                if (PortletMode.EDIT.equals(portletMode)) {
                    // save bean, switch to VIEW mode, send an event
                    save();
                } else {
                    // switch portlet to EDIT mode
                    vaadinPortletContext.setPortletMode(PortletMode.EDIT);
                }
            });

            add(action);

            // ... setup rest of the form components
        }

        // called when the portlet mode changes
        // FormPortlet supports two modes: 'view' and 'edit'
        private void handlePortletMode(PortletModeEvent event) {
            // set fields to read-only mode when portlet mode is 'view'
            final boolean isViewMode = event.isViewMode();
            binder.setReadOnly(isViewMode);

            // set the button's text based on the portlet mode
            if (isViewMode) {
                action.setText(ACTION_EDIT);
            } else {
                action.setText(ACTION_SAVE);
            }
            portletMode = event.getPortletMode();
        }

        // handles "contact-selected" event from PortletListView.
        // we check that the event name is correct and that the contact exists.
        // then we display the contact information on the form.
        private void handleEvent(PortletEvent event) {
            int contactId = Integer.parseInt(event.getParameters().get("contactId")[0]);
            Optional<Contact> contact = ContactService.getInstance().findById(contactId);
            if (contact.isPresent()) {
                binder.setBean(contact.get());
                firstName.setValue(contact.get().getFirstName());
                image.setSrc(contact.get().getImage().toString());
            } else {
                // clear the form, if the contact does not exist
                cancel(); // not shown here
            }
        }

        private void save() {
            Contact contact = binder.getBean();

            if (contact != null) {
                ContactService.getInstance().save(contact);
            }

            vaadinPortletContext.setPortletMode(PortletMode.VIEW);
            vaadinPortletContext.fireEvent("contact-updated", Collections.singletonMap(
                    "contactId", contact.getId().toString()));
        }
    }

    private void cancel() {

    }

    private class Contact {
        private Integer id;
        private String firstName;
        private String image;

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getFirstName() {
            return firstName;
        }

        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        public String getImage() {
            return image;
        }

        public void setImage(String image) {
            this.image = image;
        }
    }

    private static class ContactService {
        public static ContactService getInstance() {
            return null;
        }

        public Optional<Contact> findById(int contactId) {
            return null;
        }

        public void save(Contact contact) {

        }
    }

    private static class FormPortlet {
        public static VaadinPortlet<Component> getCurrent() {
            return null;
        }
    }
}
