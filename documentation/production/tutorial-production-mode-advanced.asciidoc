---
title: Advanced production mode topics
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Advanced production mode topics

== Production mode issues

===  After adding the `flow-server-production-mode` dependency the application no longer starts.
This is a problem when you run the application in development mode using `mvn jetty:run`, but due to the
production mode dependency the application tries to get the resources from the
production mode folder.

To fix this you have a couple choices:

 - Use the defined profile from <<tutorial-production-mode-basic#,Basic production mode>>, with the jetty plugin.
 - running the application with `mvn jetty:run-exploded` or `mvn jetty:run-war`.
 - disable production mode using the servlet parameter `original.frontend.resources=true`.
 - compile the frontend resources by adding the `vaadin-maven-plugin` see: <<tutorial-production-mode-basic#,Basic production mode>>.
 - remove the `flow-server-production-mode` dependency.

== Plugin goals and goal parameters

Here we describe the maven plugin goals and their usage.

=== validate

The intention of the goal is to validate whether `node` and `npm` tools are installed. Node.js is needed to run npm for installing
frontend dependencies and webpack which bundles the frontend files served to client. In case they are missing an exception is thrown and the build process terminates.


=== build-frontend
The intention of the goal is to prepare the frontend files. This is a complex process involving several steps:
- updates `package.json` with all `@NpmPackage` annotation values found in the classpath and automatically install these dependencies.
- updates the JavaScript files containing code for importing everything used in the application. This files are generated in the `target/frontend` folder,
and will be used as entry point of the application.
- creates `webpack.config.js` if not found, or updates it in case some project parameters have changed.
- generates JavaScript bundles, chunks and transpile to ES5 using `webpack` server. Target folder in case of `war` packaging is `target/${artifactId}-${version}/build`
and in case of `jar` packaging is `target/classes/META-INF/resources/build`.

==== Goal parameters

* *convertHtml* `default: true`

    Enable or disable legacy components annotated only with {@link HtmlImport}.

* *npmFolder* `default: ${project.basedir}`

    The folder where `package.json` file is located. Default is project root folder.

* *nodeModulesPath* `default: ${project.basedir}/node_modules/`

    The path to the {@literal node_modules} directory of the project.

* *generatedFlowImports* `default: ${project.build.directory}/frontend/generated-flow-imports.js`

    The JavaScript file used as entry point of the application, and which is automatically updated by flow by reading java annotations.

* *frontendDirectory* `default: ${project.basedir}/frontend`

    A directory with project's frontend source files.

* *generateBundle* `default: true`

    Whether to generate a bundle from the project frontend sources or not.

* *webpackTemplate* `default: webpack.config.js`

    Copy the `webapp.config.js` from the specified URL if missing. Default is the template provided by this plugin. 
    Set it to empty string to disable the feature.

* *jarResourcePathsToCopy* `default: META-INF/resources/frontend`

    Comma separated values for the paths that should be analyzed in every project dependency jar and, 
    if files suitable for copying present in those paths, those should be copied.

* *includes* `default: **/*.js,**/*.css`

    Comma separated wildcards for files and directories that should be copied. Default is only .js and .css files.

