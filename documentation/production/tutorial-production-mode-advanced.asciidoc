---
title: Advanced production mode topics
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Advanced production mode topics

== Production mode issues

===  After adding the `flow-server-production-mode` dependency the application no longer starts.
This is a problem when you run the application in development mode using `mvn jetty:run`, but due to the
production mode dependency the application tries to get the resources from the
production mode folder.

To fix this you have a couple choices:

 - Use the defined profile from <<tutorial-production-mode-basic#,Basic production mode>>, with the jetty plugin.
 - running the application with `mvn jetty:run-exploded` or `mvn jetty:run-war`.
 - disable production mode using the servlet parameter `original.frontend.resources=true`.
 - compile the frontend resources by adding the `vaadin-maven-plugin` see: <<tutorial-production-mode-basic#,Basic production mode>>.
 - remove the `flow-server-production-mode` dependency.

== Plugin goals and goal parameters

Here we describe the maven plugin goals and their usage.

=== validate

The intention of the goal is to validate whether `node` and `npm` are installed. In case they are missing an exception is thrown and the build 
process terminates. `npm` is needed to automatically install dependencies while `node` is used to start `webpack` server which bundles the 
frontend files served to client.


=== build-frontend
The intention of the goal is to prepare the frontend files. This is a complex process involving several steps:
- installs `npm` dependencies which also updates `package.json` file used by `npm`.
- updates a javascript file with available imports throughout the application.
- creates and configures `webpack.config.js` so that `webpack` server can bundle the frontend files, transpile to ES5 and generate proper chunks.

==== Goal parameters

* *convertHtml* `default: true`

    Enable or disable legacy components annotated only with {@link HtmlImport}.

* *npmFolder* `default: ${project.basedir}`

    The folder where `package.json` file is located. Default is current dir.

* *nodeModulesPath* `default: ${project.basedir}/node_modules/`

    The path to the {@literal node_modules} directory of the project.

* *generatedFlowImports* `default: ${project.build.directory}/frontend/generated-flow-imports.js`

    A Flow JavaScript file with all project's imports to update.

* *frontendDirectory* `default: ${project.basedir}/frontend`

    A directory with project's frontend files.

* *generateBundle* `default: true`

    Whether to generate a bundle from the project frontend sources or not.

* *webpackTemplate* `default: webpack.config.js`

    Copy the `webapp.config.js` from the specified URL if missing. Default is the template provided by this plugin. 
    Set it to empty string to disable the feature.

* *jarResourcePathsToCopy* `default: META-INF/resources/frontend`

    Comma separated values for the paths that should be analyzed in every project dependency jar and, 
    if files suitable for copying present in those paths, those should be copied.

* *includes* `default: **/*.js,**/*.css`

    Comma separated wildcards for files and directories that should be copied. Default is only .js and .css files.

