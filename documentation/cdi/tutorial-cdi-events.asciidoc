---
title: Observable Vaadin Events
order: 4
layout: page
---

= Observable Vaadin Events

The Vaadin CDI (https://vaadin.com/directory/component/vaadin-cdi) add-on publishes many Vaadin events to CDI. 

It is not necessary to register a listener, using only an observer is sufficient to handle these events.

Events published to CDI include:

* `ServiceInitEvent` See VaadinServiceInitListener (<<../advanced/tutorial-service-init-listener#,>>) for more.
* `PollEvent`.
* `BeforeEnterEvent`. See <<../routing/tutorial-routing-lifecycle#,6.2. _Navigation Lifecycle_>> for more. 
* `BeforeLeaveEvent`. See <<../routing/tutorial-routing-lifecycle#,6.2. _Navigation Lifecycle_>> for more. 
* `AfterNavigationEvent`. See <<../routing/tutorial-routing-lifecycle#,6.2. _Navigation Lifecycle_>> for more.
* `UIInitEvent`. See UIInitListener (<<../advanced/tutorial-ui-init-listener#,>>) for more.
* `SessionInitEvent`. See Handling Session Initialization and Destruction (<<../advanced/tutorial-application-lifecycle#application.lifecycle.session.init,>>) for more. 
* `SessionDestroyEvent`. See Handling Session Initialization and Destruction (<<../advanced/tutorial-application-lifecycle#application.lifecycle.session.init,>>) for more. 
* `ServiceDestroyEvent`.

[WARNING]
Whether or not `ServiceDestroyEvent` works with CDI during application shutdown depends on each specific implementation.

*Example*: Using the `@Observes` annotation to listen `ServiceInitEvent`.

[source,java]
----
public class BootstrapCustomizer {

    private void onServiceInit(@Observes
            ServiceInitEvent serviceInitEvent) {
        serviceInitEvent.addBootstrapListener(
                this::modifyBootstrapPage);
    }

    private void modifyBootstrapPage(
            BootstrapPageResponse response) {
        response.getDocument().body().append(
                "<p>By CDI add-on</p>");
    }
}
----
