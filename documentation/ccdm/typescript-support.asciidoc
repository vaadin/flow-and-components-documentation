---
title: TypeScript Support
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]


= TypeScript Support

Vaadin 15+ supports link:https://www.typescriptlang.org/[TypeScript] for writing client-side code, without needing any additional configuration. That includes live reloading at the development time, and optimized builds for production.

In order to write the app bootstrapping code, or create views in TypeScript make sure that:

 - <<client-side-bootstrapping#,client-side bootstrapping>> is enabled.

 - and the `index.html` page template and the `index.ts` entry point do exist in the `frontend/` folder.

After that any `.ts` file imported from `index.ts` (statically or dynamically) is going to be built as a part of the application.

= Bootstrapping with TypeScript

The entry point to the application can be written in TypeScript: using an `index.ts` file is supported as well as using `index.js`. Below is a sample `index.ts` file that adds a button click listener to load the full Vaadin application lazily, only after the button is clicked.
See the <<client-side-bootstrapping, Client-side Bootstrapping>> page for details on starting a Vaadin application from client-side code.

.frontend/index.ts
[source,typescript]
----
import {Flow} from '@vaadin/flow-frontend/Flow';

const flow = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const loadButton: HTMLElement | null = document.getElementById('loadButton');
if (loadButton) {
  loadButton.addEventListener('click', async() => {
    await flow.start();
  });
}
----

.frontend/index.html
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>

  <h2>Hello, World!</h2>
  <button id="loadButton">Load Vaadin application</button>
</body>
</html>
----

With the above snippets, the bootstrap page shows "Hello, World!" text with a button. The Vaadin client engine is not loaded until the button is clicked.

= Adding a TypeScript View

Since version 15 Vaadin allows defining routes and creating views in client-side code using the <<client-side-routing, Client-side routing>> approach.
Client-side views can be created in TypeScript, like in the following example:

.frontend/my-view.ts
[source,typescript]
----
import {LitElement, html, css, customElement, query} from 'lit-element';
import '@vaadin/vaadin-button/vaadin-button.js';
import '@vaadin/vaadin-notification/vaadin-notification.js';

@customElement("my-view")
export class MyView extends LitElement {
  @query('#notification')
  private notification: any;

  static get styles() {
    return css`
      :host {
        display: block;
      }
    `;
  }

  render() {
    return html`
      <vaadin-button theme="primary" @click=${this.clickHandler}>
        Click me
      </vaadin-button>
      <vaadin-notification id="notification" duration="2000">
        <template>
          Hello, World!
        </template>
      </vaadin-notification>
    `;
  }

  private clickHandler() {
    this.notification.open();
  }
}
----

In order to see the new client-side view in the browser, you would need to define a new client-side route for it. That requires the following changes in the `index.html` and `index.ts` files:

.frontend/index.html
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>
  <div id="outlet"></div>
</body>
</html>
----

.frontend/index.ts
[source,typescript]
----
import {Flow} from '@vaadin/flow-frontend/Flow';
import {Router} from '@vaadin/router';

import './my-view';

const flow = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const routes = [
    {path: '', component: 'my-view'},
    flow.route
];

const router = new Router(document.querySelector('#outlet'));
router.setRoutes(routes);
----

Now `my-view` is accessible via the root path, i.e. `http://localhost:8080/`. All the other routes are handled by the server-side router. See the <<client-side-routing, Client-side Routing>> page for more information.

= Limitations

TypeScript support does not apply to <<polymer-templates/tutorial-template-intro, Polymer-based declarative HTML templates>>.
