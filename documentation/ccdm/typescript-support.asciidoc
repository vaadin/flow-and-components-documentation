---
title: TypeScript support in CCDM
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Prerequisites
To be able to use TypeScript in Vaadin application, your project must have the following requirements:

  - The project depends on Vaadin 15.0.0.alpha1 (or later).
  - `clientSideMode` is enabled. See <<client-side-bootstrapping#,Client-side bootstrapping>> for more information.

= Bootstrapping with TypeScript

As mentioned in the <<client-side-bootstrapping#bootstrap-page-template, Bootstrap page template section>>, `index.html` and `index.ts` are required in the `frontend` folder. The `index.ts` file is injected in `index.html` by webpack when you build the application. Let's create a simple bootstrap page that shows a welcome text and a button to load Vaadin client-engine lazily.

[source,html]
.frontend/index.html
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>

  <h2>Hello, World!</h2>
  <button id="loadButton">Load Vaadin application</button>
</body>
</html>
----

[source,typescript]
.frontend/index.ts
----
import {Flow} from '@vaadin/flow-frontend/Flow';

const flow = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const loadButton: HTMLElement | null = document.getElementById('loadButton');
if (loadButton) {
  loadButton.addEventListener('click', () => {
    flow.start();
  });
}
----

With the above code, the bootstrap page will show "Hello, World!" text with a button. The Vaadin client engine is not loaded until the button is clicked.

= Adding a TypeScript view

Since Vaadin 15, it is possible to have client-side views and server-side views using <<client-side-routing, Client-side routing>> approach. The client-side views can be either in JavaScript or TypeScript. Here is an example of a LitElement view in TypeScript.

[source,typescript]
.frontend/my-view.ts
----
import {LitElement, html, css, customElement, query} from 'lit-element';
import '@vaadin/vaadin-button/vaadin-button.js';
import '@vaadin/vaadin-notification/vaadin-notification.js';

@customElement("my-view")
export class MyView extends LitElement {
  @query('#notification')
  private notification: any;

  static get styles() {
    return css`
      :host {
        display: block;
      }
    `;
  }

  render() {
    return html`
      <vaadin-button theme="primary" @click=${this.clickHandler}>
        Click me
      </vaadin-button>
      <vaadin-notification id="notification" duration="2000">
        <template>
          Hello, World!
        </template>
      </vaadin-notification>
    `;
  }

  private clickHandler() {
    this.notification.open();
  }
}
----


To navigate to the new client-side view, the `index.html` and `index.ts` have to be modified to include `vaadin-router` as following:

[source,html]
.frontend/index.html
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>
  <div id="outlet"></div>
</body>
</html>
----

[source,typescript]
.frontend/index.ts
----
import {Flow} from '@vaadin/flow-frontend/Flow';
import {Router} from '@vaadin/router';

import './my-view';

const flow = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const routes = [
    {path: '', component: 'my-view'},
    flow.route
];

const router = new Router(document.querySelector('#outlet'));
router.setRoutes(routes);
----

Now, if you navigate to the empty path, e.g. `http://localhost:8080/`, `my-view` will be shown. All the other routes are falling back to server routes. See <<client-side-routing, Client-side routing>> for more information.

= Limitations

TypeScript support is not applied for `PolymerTemplate` which connects with a view in Java code. It is only possible to create TypeScript view as a client-side view and use it with `vaadin-router` or any other ways that you prefer.