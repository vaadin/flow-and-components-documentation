---
title: Client-side Bootstrapping in CCDM
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Client-side Bootstrapping

Client-side bootstrapping in Vaadin 15+ allows creating applications that have parts of the UI written in TypeScript (or JavaScript), and do not always require a connected server-side <<../introduction/introduction-overview#,`UI`>> instance to run.
It is one of the building blocks that enable starting an application from the browser cache when offline, navigating between views when offline, and starting the server-side of the app if and when it is needed.

.frontend/index.ts
[source, javascript]
----
import {Flow} from '@vaadin/flow-frontend/Flow';

const flow = new Flow({
  imports: () => import('../target/frontend/generated-flow-imports.js')
});

flow.start();
----

For applications that are built in Java and do not include any client-side views the client-side bootstrapping process is transparent.
A default `index.html` / `index.js` pair is generated during the build, and immediately loads the server-side `UI` when the app starts.
If there is a need to add a client-side view to the application later, it can be done incrementally, with minimal modifications.
See more details on this in the <<#default-bootstrap-template-and-entry-point,Default Bootstrap Template and Entry Point>> section below.

[NOTE]
If you are migrating from an earlier version of Vaadin, check the <<#migrating-from-vaadin-10-14,Migrating from Vaadin 10-14>> section below.


=== Starting a Flow App from Client-side Code

When using client-side bootstrapping, Vaadin does not automatically load the Flow client or create a server-side `UI` instance for the app.
The Flow JavaScript API offers two ways to start a Flow app from the client-side:

 - `flow.serverSideRoutes`: add a fallback route into a client-side routing configuration with Vaadin Router. This is the way to go if the application has a combination of client-side and server-side views. See the <<client-side-routing#,Client-side Routing>> page for more details.

 - `flow.start()`: start a Flow app and let it take full control over the current browser page. This is the way to go if the application has only server-side views. See the <<#default-index-ts,default `index.ts` file>> below on this page.

By using either of these two approaches, you can optimize your application to load the minimal content to be displayed to users at the first load. This might reduce the first-loading time compared to the Vaadin 10-14 bootstrapping method which loads a full Vaadin application on the first request. As a result, the first request loads promptly and that improves the first interaction experience.


=== Bootstrap Page Template [[bootstrap-page-template]]

When using client-side bootstrapping, Vaadin servlet uses the `frontend/index.html` file as a template to generate the bootstrap page response. It processes the template and injects the following additional information:

  - `<base href='./relative/to/root'>`: Vaadin calculates the relative path from the current request path to the root path of the application. That is required for relative links in the app view templates to work correctly.

  - Bundled script: Vaadin automatically adds the bundled and optimized script generated from the `frontend/index.ts` file (or `frontend/index.js` if you prefer to develop in JavaScript). It uses a pre-configured link:https://webpack.js.org/[Webpack] instance that's included together with `vaadin-maven-plugin` as a module bundler. Therefore, in the `frontend/index.html` template there is no need to include the `index.ts` (or `index.js`) script manually.

NOTE: The frontend directory can be customized by providing the property `vaadin.frontend.frontend.folder` when running the Maven goals `prepare-frontend`  or `build-frontend` from `vaadin-maven-plugin`.

==== Default Bootstrap Template and Entry Point [[default-bootstrap-template-and-entry-point]]

If the `index.html` or `index.ts` (and `index.js`) in the frontend folder are missing, `vaadin-maven-plugin` generates a default corresponding file in the `target` folder. The generated files bootstrap and load the application using server-side routing. You can take control of these files by creating them in the `frontend` folder. The default content of the files are as following:

.Default `index.html`
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Polyfills for the Web Component APIs are required to use Web Components
    in the browsers that do not support these APIs natively (e.g. IE11) -->
  <script src="./VAADIN/build/webcomponentsjs/webcomponents-loader.js" defer></script>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
</body>
</html>
----

.Default `index.ts` [[default-index-ts]]
[source,javascript]
----

import { Flow } from '@vaadin/flow-frontend/Flow';

const flow = new Flow({
  // relative path to `projectDir/target/frontend/flow-generated-imports.js`
  // @ts-ignore
  imports: () => import('../target/frontend/flow-generated-imports.js')
});
// Let the flow-server control the application
flow.start();
----

NOTE: Follow <<typescript-support#, this link>> for more information about TypeScript support. To mix client-side and server-side routes, you need to install and configure `vaadin-router` as described in <<quick-start-guide#, Quick Start Guide>>

In case you have an `index.ts` in your frontend folder but there is no `tsconfig.json` in your project root, `vaadin-maven-plugin` also generates one.

.Default `tsconfig.json`
[source,json]
----
// This TypeScript configuration file is generated by vaadin-maven-plugin.
// This is needed for TypeScript compiler to compile your TypeScript code in the project.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
// For more information about the configurations, please refer to http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
{
  "compilerOptions": {
    "sourceMap": true,
    "inlineSources": true,
    "module": "esNext",
    "target": "es2017",
    "moduleResolution": "node",
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "experimentalDecorators": true
  },
  "include": [
    "frontend/**/*.ts", "frontend/index.js"
  ],
  "exclude": []
}

----

=== Modifying the Bootstrap Page on Runtime

Before sending the bootstrap page response to the browser, the content can be modified via a `ClientIndexBootstrapListener`. An implementation of the listener should be added via a `ServiceInitEvent` when a `VaadinService` is initialized. Take a look on the <<../advanced/tutorial-service-init-listener#,ServiceInitListener tutorial>> on how to configure it.

Here is an example implementation of `ClientIndexBootstrapListener` to add additional meta tags into the head of the bootstrap page:

[source,java]
----
public class CustomBootstrapPageListener implements
            ClientIndexBootstrapListener {

    @Override
    public void modifyBootstrapPage(
            ClientIndexBootstrapPage clientIndexBootstrapPage) {
        Document document = clientIndexBootstrapPage.getDocument();

        Element head = document.head();

        head.appendChild(createMeta(document, "og:title", "The Rock"));
        head.appendChild(createMeta(document, "og:type", "video.movie"));
        head.appendChild(createMeta(document, "og:url",
                "http://www.imdb.com/title/tt0117500/"));
        head.appendChild(createMeta(document, "og:image",
                "http://ia.media-imdb.com/images/rock.jpg"));
    }

    private Element createMeta(Document document, String property,
            String content) {
        Element meta = document.createElement("meta");
        meta.attr("property", property);
        meta.attr("content", content);
        return meta;
    }
}
----


=== Migrating from Vaadin 10-14 [[migrating-from-vaadin-10-14]]

For applications migrated from earlier versions of Vaadin, client-side bootstrapping requires replacing the usages of the V10-14 `BootstrapHandler` APIs with their `ClientIndexHtmlHandler` API counterparts as described in link:https://github.com/vaadin/flow/issues/6584[TBD (see flow#6584)].

The reason for this API change is that with clien-side bootstrapping the initial page HTML generation is separated from loading the Flow client and creating a server-side `UI` instance.

 - In Vaadin 10 to 14 these two steps are combined and the `index.html` page includes the code and configuration needed to start the Flow client engine and link the page to the server-side `UI` instance.

 - In Vaadin 15+ with client-side bootstrapping the `index.html` page includes only the basic HTML page markup and links to the TypeScript (or JavaScript) UI code. The Flow client and a server-side `UI` instance are loaded and created later if (and when) the user navigates to a route that does not have a client-side implementation.

==== Compatibility Mode

If migration from the V10-14 bootstrapping APIs to the V15 client-side bootstrapping APIs is not feasible, it is possible to add a `-Dvaadin.clientSideMode=false` system property when starting the app to keep using the V10-14 bootstrapping process.

It can be also be provided as a servlet container deployment property with the name `clientSideMode`.
