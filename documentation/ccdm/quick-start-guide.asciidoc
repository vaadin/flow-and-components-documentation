---
title: Quick Start Guide
order: 10
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Quick Start Guide

NOTE: The quickest and easiest way to get started with Vaadin and TypeScript is to download a starter project from link:https://start.stg.vaadin.com/[start.stg.vaadin.com^].

→ *Step 1* - Create a new project at link:https://start.stg.vaadin.com/[start.stg.vaadin.com^]

Make sure to select `TypeScript + Spring Boot` as the technology stack.

If you prefer to create a Maven project manually, check the <<preparing-a-project-manually>> section below.


→ *Step 2* - Add a client-side view and set a route path for it [[step-2]]

.frontend/index.ts
[source, javascript]
----
import {Router} from '@vaadin/router';
const router = new Router(document.querySelector('#outlet'));
const {serverSideRoutes} = new Flow({
  imports: () => import('../target/frontend/generated-flow-imports')
});

router.setRoutes([
  {
    path: '/help',
    component: 'app-help',
    action: () => import('app-help')
  },
  // pass all unmatched paths to server-side
  ...serverSideRoutes
]);
----

.install components
[source, bash]
----
npm install --save '@vaadin/vaadin-button'
----

.frontend/app-help.ts
[source, javascript]
----
import {LitElement, html, customElement} from 'lit-element';
import '@vaadin/vaadin-button/vaadin-button';

@customElement('app-help')
export class AppHelp extends LitElement {
    render() {
      return html`
        <vaadin-button @click=${this.click}>Read More</vaadin-button>
      `;
    }

    click(e) {
      console.log('clicked');
    }
}
----

NOTE:
You might want to install all `@vaadin` components at once by running `npm install --save '@vaadin/vaadin-core'`

→ *Step 3* -  Add a server-side view and set the route path for it

.src/main/java/com/example/application/ServerView.java
[source, java]
----
@Route("server")
public class ServerView extends Div {
    public ServerView() {
        this.add(new Button("click-me", e -> Notification.show("clicked")));
    }
}
----


== Preparing a project manually [[preparing-a-project-manually]]

→ *Step 0a* - Install link:https://vaadin.com/router/[Vaadin Router^] from npm.

[source,bash]
----
$ npm install --save @vaadin/router
----

→ *Step 0b* - Create `frontend/index.html` and `frontend/index.ts` to enable <<client-side-routing#,client-side routing>>.

.frontend/index.html
[source, html]
----
<html>
  <body>
    <div id="outlet"></div>
  </body>
</html>
----


.frontend/index.ts
[source, javascript]
----
import {Router} from '@vaadin/router';
const router = new Router(document.querySelector('#outlet'));

router.setRoutes([
]);
----

→ *Step 0c* - Import Flow module to enable <<../routing/tutorial-routing-annotation#,server-side routing>>

.frontend/index.ts
[source, javascript]
----
import {Router} from '@vaadin/router';
import {Flow} from '@vaadin/flow-frontend/Flow';

const router = new Router(document.querySelector('#outlet'));
const {serverSideRoutes} = new Flow({
  imports: () => import('../target/frontend/generated-flow-imports')
});

router.setRoutes([
  // pass all unmatched paths to server-side
  ...serverSideRoutes
]);
----

Proceed to <<step-2,Step 2>> to add a client-side view.

[NOTE]
Flow API is not distributed via npm repositories but added automatically when running the Vaadin project.
