---
title: Migration Tool for Polymer Templates
order: 2
layout: page
---

= Migration Tool for Polymer Templates

Several steps are required to migrate your project to Vaadin 14 from Vaadin 13, 
see <<v14-migration-guide#,Vaadin 14 Migration Guide>> tutorial.

To help with the migration, the Vaadin Maven plugin can convert Polymer 2 HTML templates into Polymer 3 JavaScript modules.
The plugin's `migrate-to-p3` goal automates two steps:

* it uses resources directory (by default it is `src/main/webapp`) to locate
Polymer 2 templates HTML files, converts them into Polymer 3 format and moves them
into `frontend` folder inside your project root directory.
* it finds all Java class declarations annotated with `@HtmlImport` and `@StyleSheet` 
in the project source files and rewrites annotation to `@JsModule` annotation along with path 
(`value` parameter) update.

This goal can be executed from command line with

```
mvn vaadin:migrate-to-p3
```

or with most IDEs from a list of configured Maven plugin goals for a project.
During August 2019 the template migration tool will also become available as a Java executable for
non-Maven projects.

[NOTE]
There are currently some issues in running the migration tool on Windows 10. The error output refers to "bower install failing" or "git not being available on path". To workaround this, you should use the https://docs.microsoft.com/en-us/windows/wsl/install-win10[Windows Linux Subsystem] and run the tool there instead. Another workaround that has been reported to help, is to install Bower on the system. We are investigating these issues.

[NOTE]
The migration tool takes care about style files and `@StyleSheet` annotations
converting them into `@JsModule`. But there is `@CssImport` annotation available
which is more convenient to use instead of `@JsModule` for CSS. The migration tool
is not able to convert styles using `@CssImport` annotation. This requires manual
conversation.

The migration tool doesn't preserve HTML comments from your original template files.
Important HTML comments should therefore be manually transferred to the converted P3 files.
To facilitate this, use the *keepOriginal* parameter to prevent removal of the 
original template files (by default these are removed). 
See *keepOriginal* parameter description below.

== Goal parameters

Here we describe the Maven plugin goal's parameters.

* *resources* (default: `${project.basedir}/src/main/webapp`):
    List of folder paths that should be used to locate the P2 resources to convert 
    them into P3 modules. It's configured in the pom file via `<resources>` 
    parent element and `<resource>` child elements inside it. 
    
* *migrateFolder* (default: `${project.build.directory}/migration`):
    A temporary directory which is used internally to store copies of the resource 
    files and their conversation to P3. The result files will be moved to the final destination from it.
    
* *frontendDirectory* (default: `${project.basedir}/frontend`):
    The resulting directory which will contain converter resource files.
    
* *keepOriginal* (default: `false`):
    Whether to keep original resource files or not. By default the converted 
    resource files will be removed.
    
* *ignoreModulizerErrors* (default: `true`):
    Whether the Maven build should fail if modulizer internal tool returns non zero exit status.
    Even if Modulizer exists with error it doesn't mean that conversation wasn't done. 
    So by default the Maven build won't fail even though there were errors.

* *annotationsRewrite* (default: `ALWAYS`):
    Defines a strategy to rewrite `@HtmlImport`/`@StyleSheet` annotations in Java source files.
    There are three values available: 
    ** `ALWAY` means rewrite annotations regardless of resource conversation status
    ** `SKIP`  means skip annotations rewrite
    ** `SKIP_ON_ERROR` means rewrite only if there are no errors during resource conversation
