---
title: Vaadin 14 Migration Guide
order: 0
layout: page
---

= Vaadin 14 Migration Guide

As in previous Vaadin Platforms since V10, the client-side UI components of
Vaadin 14 are based on Web Components. However, Vaadin 14 upgrades parts of the
technology stack used to build and integrate these components into your Vaadin
app to introduce more capabilities and potential for the future. In this
document, we first give an overview of the new technologies and tools, and
explain why they were chosen. Second, we describe the practicalities of the
migration path from Platform V10-V13 to V14. This is not intended to be a
complete change log, but rather a hands-on guide to resolving issues users
migrating their applications to V14 will be expected to encounter.

== What’s new in Vaadin 14

=== Web Components: ES6 modules instead of HTML Imports

The most significant change in V14 is that the Polymer library used for the
front-end Web Components has been upgraded from version 2.0 to version 3.0
(see https://polymer-library.polymer-project.org/3.0/docs/about_30[here] what's
new in Polymer 3.0). In Polymer 3.0, templates are JavaScript modules that fully
encapsulate the HTML structure of the component template. This replaces HTML
imports used by earlier Polymer versions, a mechanism that was never fully
standardized and that is now considered deprecated.

=== Package management: npm instead of Bower

V14 manages front-end dependencies using _npm_ , the mainstream JavaScript
package manager (whereas V13 and older used _Bower_ ). Using npm means that
all JavaScript dependencies will be downloaded to the `node_modules` directory
in your project and that `package.json` and `package-lock.json` files will be
created to record the dependencies and their versions respectively. Do not be
alarmed if you are not familiar with these files or the npm way of doing things.
The invocation of npm is fully automated by `vaadin-maven-plugin`; the only
thing you need to make sure is that _Node.js_ (version 10 or later) and npm
(version 5.6 or later) are installed. If they are not installed,
`vaadin-maven-plugin` will halt and present you with the possible installation
alternatives.

=== Bundling: webpack

Another front-end tool utilized by V14 is the module bundler _webpack_. All
front-end extensions in your V14 project (JavaScript modules containing
components and stylesheets) are now expected to reside in the `frontend`
directory immediately under the project root, which is the directory where
webpack will look for them. When starting your app in development mode, webpack
runs alongside as a development server. In production mode, we invoke webpack
to produce (transpiled and minified) bundles from the JavaScript modules. As
long as your project file structure is as specified in this guide, these steps
are fully automated by `vaadin-maven-plugin`.

=== Compatibility mode

Projects with client-side Polymer templates must migrate these from Polymer 2.0
syntax to Polymer 3.0 (see next section) before they can run on V14. We are
working on a migration tool that can do this automatically, but until then it
can be done manually with a few simple steps. Alternatively, V14 supports a
_compatibility mode_ based on the Bower package manager that does not require
template conversion or installation of npm. This mode is only intended to enable
a smoother migration path, and should not be used in new projects or relied on
as a long-term solution. Compatibility mode will be removed permanently in V15.

== Migration steps

=== 1 - Check prerequisites

==== Install NPM

Install npm and Node.js on your development platform of choice if you don't
already have them. Either download the installer
(https://nodejs.org/en/download/[https://nodejs.org/en/download/]) or use your
preferred package management system (Homebrew, dpkg, ...).

==== Miscellaneous

* If you are using Java 9 or newer and `jetty-maven-plugin`, upgrade the
plugin to version `9.4.15.v20190215` or newer.

=== 2 - Update project configuration

==== Update Platform version in `pom.xml`

The first step is to update your maven `pom.xml` configuration file to use the
latest V14 release. If the Vaadin version is specified in Maven properties,
change it to the following:


[source, xml]
----
<properties>
    ...
    <vaadin.version>14.0.0</vaadin.version>
</properties>
----

==== Add Vaadin Maven plugin

Next, add the Vaadin Maven plugin to the `<build><plugins>` section of `pom.xml`
(if your `pom.xml` already included this plugin, only update the goals in the
`<execution><goals>` section):



[source, xml]
----
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <version>${vaadin.version}</version>
            <executions>
                <execution>
                    <goals>
                        <goal>prepare-frontend</goal>
                        <goal>build-frontend</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
----


The `prepare-frontend` goal checks that Node.js and npm are installed and
creates or updates `package.json` based on annotations in the project Java code.
It also creates `webpack.config.js` if it doesn’t exist yet (if needed, you can
add your own customized webpack configuration to this file, as it will not be
overwritten by future invocations of `prepare-frontend`).

The goal `build-frontend` invokes npm to download and cache the npm packages
(into directory node_modules) and webpack to process the JavaScript modules.
Note that in V14, you need the `vaadin-maven-plugin` also in development mode.
So, make sure that you declare the plugin dependency in your default Maven
profile. This also means that you can remove the `vaadin-maven-plugin` from your
production profile.

==== Move contents of src/main/webapp/frontend

In V13 files related to front-end, such as HTML templates, stylesheets,
JavaScript files and images are stored in the folder
`<PROJDIR>/src/main/webapp/frontend`. Depending on the resource type, you may
need to move some of these resource files to a new `frontend` folder _at the
root of the project_, i.e., at `<PROJDIR>/frontend`. The following list is a
rough guide on what to do with each type of resource:

* HTML files containing Polymer templates, should be removed from the
`<PROJDIR>/src/main/webapp/frontend` once you finish the migration, but in the
meanwhile, you need them as reference to generate the equivalent JS modules
under the `<PROJDIR>/frontend` folder as described in the next section.
* Plain .css files used for global styling: keep them in
`<PROJDIR>/src/main/webapp/frontend`
* Custom JavaScript files: move them to `<PROJDIR>/frontend`
* Images and other static resources: keep them in
`<PROJDIR>/src/main/webapp/frontend` (or move anywhere else under `webapp`; see
comments about updating annotations in section 5)

=== 3 - Convert Polymer 2.0 to Polymer 3.0

==== Templates

Polymer templates defined in HTML files (extension `.html` ) should be converted
to new ES6 module format files (extension `.js`) which in the basic case only
requires the following steps:
[loweralpha]
. Change the file extension from `.html` to `.js`.
. Change the parent class of the element class from `Polymer.Element` to
`PolymerElement`.
. Convert HTML imports for ES6 module imports. For example a local file

[source, xml]
----
<link rel=import href="foo.html">
----

becomes

[source, js]
----
import './foo.js';
----

or external import

[source, xml]
----
<link rel="import"
    href="../../../bower_components/vaadin-button/src/vaadin-button.html">
----

becomes

[source, js]
----
import '@vaadin/vaadin-button/src/vaadin-button.js';
----

To see what’s the scope of the js module, for vaadin components it’s always
@vaadin and for other components, you can search the name that comes after
`bower_components` https://www.npmjs.com/search[here] to find the scope.

[loweralpha, start=4]
. Move the template from HTML into a static getter named `template` inside
the element class which extends `PolymerElement`.

E.g.

[source, xml]
----
<template>
    <vaadin-text-field id="search">
    </vaadin-text-field>
    <vaadin-button id="new">New
    </vaadin-button>
</template>
----

becomes

[source, js]
----
static get template() {
    return html`
        <vaadin-text-field id="search">
        </vaadin-text-field>
        <vaadin-button id="new">New
        </vaadin-button>;`
}
----

[loweralpha, start=5]
. Remove `<script>` tag.

As a complete example, the following template

[source, xml]
----
<link rel="import" href="../../../bower_components/polymer/polymer-element.html">
<link rel="import" href="../../../bower_components/vaadin-text-field/src/vaadin-text-field.html">
<link rel="import" href="../../../bower_components/vaadin-button/src/vaadin-button.html">

<dom-module id="top-bar">
    <template>
        <div>
            <vaadin-text-field id="search">
            </vaadin-text-field>
            <vaadin-button id="new">New
            </vaadin-button>
        </div>
    </template>

    <script>
        class TopBarElement extends Polymer.Element {
            static get is() {
                return 'top-bar'
            }
        }

        customElements.define(TopBarElement.is, TopBarElement);
    </script>
</dom-module>
----


becomes

[source, js]
----
import {PolymerElement, html} from '@polymer/polymer/polymer-element.js';
import '@vaadin/vaadin-button/vaadin-button.js';
import '@vaadin/vaadin-text-field/vaadin-text-field.js';

class TopBarElement extends PolymerElement {
    static get template() {
        return html`
            <div>
                <vaadin-text-field id="search">
                </vaadin-text-field>
                <vaadin-button id="new">New
                </vaadin-button>
            </div>`;
    }

    static get is() {
        return 'top-bar'
    }
}

customElements.define(TopBarElement.is, TopBarElement);
----

==== Styles

Converting `<custom-style>` elements is straightforward. The containing HTML
file should be converted to a js file and the content of the file imports
excluded should be added to the head of the document in JavaScript code. Any
import should be converted from `<link>` tag to a javascript import statement
the same way as for templates. The following example illustrates these steps in
practice.

Polymer 2:

[source, xml]
----
<link rel="import" href="../bower_components/polymer/lib/elements/custom-style.html">

<custom-style>
    <style>
        .menu-header {
            padding: 11px 16px;
        }

        .menu-bar {
            padding: 0;
        }
    </style>
</custom-style>
----

Polymer 3:

[source, js]
----
import '@polymer/polymer/lib/elements/custom-style.js';
const $_documentContainer = document.createElement('template');

$_documentContainer.innerHTML = `
    <custom-style>
        <style>
            .menu-header {
                padding: 11px 16px;
            }

            .menu-bar {
                padding: 0;
            }
        </style>
    </custom-style>`;

document.head.appendChild($_documentContainer.content);
----

==== Polymer modulizer

For more complex cases you can use
https://polymer-library.polymer-project.org/3.0/docs/upgrade[Polymer 3.0 upgrade guide].
You can also use polymer-modulizer tool that is described in the guide. Vaadin
will also release a migration tool that helps you convert your V13 applications
to V14.

=== 4 - Update Java annotations

After converting Polymer templates from HTML to JavaScript modules, every
`HtmlImport` annotation in Java classes should be changed to a `JsModule`
annotation. Moreover, you should not use a frontend protocol (`frontend://`)in
the path of your resources anymore, and add the ./` prefix to the file path.
E.g.

[source, java]
----
@HtmlImport("frontend://my-templates/top-bar.html")
----

becomes

[source, java]
----
@JsModule("./my-templates/top-bar.js")
----

=== 5 - Remove frontend protocol

Apart from `JsModule` annotations, the `frontend://` protocol should also be
removed from non-annotation resource accessors in Java code or in JavaScript
code. For example in V10-V13 to add a PNG file from
`<PROJDIR>/src/main/webapp/img` folder, you would do as follows:

[source, java]
----
String resolvedImage = VaadinServletService.getCurrent()
    .resolveResource("frontend://img/logo.png",
    VaadinSession.getCurrent().getBrowser());

Image image = new Image(resolvedImage, "");
----

In V14, the above becomes:

[source, java]
----
String resolvedImage = VaadinServletService.getCurrent()
    .resolveResource("img/logo.png",
    VaadinSession.getCurrent().getBrowser());

Image image = new Image(resolvedImage, "");
----

=== 6 - Build and maintain the V14 project

Test the new configuration by starting the application. How you do this depends
on your application deployment model. For example, if you are using the Jetty
maven plugin, run:

`mvn clean jetty:run`

You should see Maven log messages confirming that npm is downloading the package
dependencies and that webpack is emitting `.js` bundles. If there is any error,
go back and re-check the previous steps.

The following files/folders have been generated in the root of your project:

* `package.json` and `package-lock.json`: These files keep track of npm
packages and pin their versions. You may want to add these to version control,
in particular, if you added any local package directly with npm.
* `node_modules` directory: npm package cache, do not add this to version
control!
* `webpack.config.js`: webpack configuration. Include in version control. You
can add custom webpack configuration to this file.
* `webpack.generated.js`: Auto-generated webpack configuration imported by
`webpack.config.js`. Do not add to version control, as it is always overwritten
by `vaadin-maven-plugin` during execution of the `prepare-frontend` goal.

You now have a fully migrated Vaadin 14 project. Enjoy!
