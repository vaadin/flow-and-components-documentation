---
title: Embedding Applications in Compatibility and Production Mode 
order: 7
layout: page
---
= Embedding Applications in Compatibility and Production Mode 

== Compatibility Mode

When embedding applications in compatibility mode, the following differences to development mode need to be taken into account: 

* The `"webcomponents-loader.js"` polyfill library is required to import web components using HTML import.
* The web component URL resource is imported via HTML `import`.

+
*Example*: Importing a web component in compatibility mode.
+
[source, html]
----
<script type='text/javascript' src='/frontend/bower_components/webcomponentsjs/webcomponents-loader.js'></script>
<link rel='import' href='/vaadin/web-component/login-form.html'>
----

The rest of the <<tutorial-webcomponent-intro#importing-an-embedded-application, embedding process>> is the same. 


== Production Mode

Embedding applications in production mode is similar to development mode in that it requires these two steps:

. Package the application for production in the normal way.
. Import the packaged application onto the target page.

However, in production mode the second step differs slightly from in development mode. The reason is that the `"webcomponents-loader.js"` polyfill library is located in a different folder, which depends on the user's browser. This library provides support for browsers that do not have native support for `rel="import` on a `link` element.

To avoid using the boilerplate line in production mode, you should use a `script` tag, instead of a `link` element for the web component.

*Example* Using the `<script>` tag for a web component in production mode.

[source, html]
----
<script type='text/javascript'
        src='/vaadin/web-component/login-form.html'>
</script>
----
In production mode, the generated `login-form.html` content is simply JavaScript code that adds a proper polyfill library together with the required imports.

