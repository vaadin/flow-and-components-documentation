---
title: Securing an Embedded Application
order: 5
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Securing an Embedded Application

You may want to restrict access to an embedded Vaadin application from
embedding web applications. To be able to do that, use properties of 
the embedded web component.

Note that the web component will be instantiated regardless of 
restricted access since the property value can only be checked when it is 
updated from the client side in your listener on the server side. It means that you 
should avoid sensitive data in the component's constructor.

Here is an example how to set a property from the embedding page and
check it inside the embedded application:

[source, html]
----
<!doctype html>

<head>
  <link rel="import" href="web-component/my-comp.js">
  <script type="text/javascript">
        function login(){
            var token = "d9f6a737-b2b8-46a7-a834-209c8b214969"; // request token for the current user somehow
            var comp = document.querySelector("#embedded-web-component");
            comp.token = token;
        }
  </script>
</head>

<body>
  <p>
    Web components implemented using server side Java
  </p>
  
  <button onclick="login()">Login</button>

  <my-comp id="embedded-web-component"></my-comp>

</body>
----

Here the element `my-comp` is embedded into the static page and the `token` 
property is set from a JavaScript function which retrieves it somehow within `login` 
function (which is invoked on Login button click).

The web component and its exporter class may look like this:

[source, java]
----
public class EmbeddedComponentExporter
        extends WebComponentExporter<EmbeddedComponent> {

    public EmbeddedComponentExporter() {
        super("my-comp");

        addProperty("token", "").onChange(this::authorize);
    }

    @Override
    protected void configureInstance(
            WebComponent<EmbeddedComponent> webComponent,
            EmbeddedComponent component) {
    }

    private void authorize(EmbeddedComponent component, String token) {
        // check the {@code token}
        if (isValidToken(token)) {
            component.init();
        }
    }

    private boolean isValidToken(String token) {
        return true;
    }

}

public class EmbeddedComponent extends Div {

    public EmbeddedComponent() {
        // Don't retrieve any sensitive data here without granted access
        // (via security token)
    }

    public void init() {
        // Initialize your secured component here
    }
}
----

The embedded web component will be instantiated before the exporter instance
receives the token value and you should not retrieve
/initialize the component with any sensitive data in its constructor.
Do your initialization only when the valid token value is received.

[NOTE]
It might be that you do not have a control over embedding web component to 
prevent its initialization inside the constructor. In this case you may wrap
the embedding web component inside a container like `Div`: just create a
`Div` subclass and use it instead `EmbeddedComponent`. In this case you may 
add an `EmbeddedComponent` instance into the `Div` subclass when the token 
is validated.

[NOTE]
If you are using DI frameworks then you should be aware that `EmbeddedComponentExporter` 
is instantiated directly without DI and you may not use this instance to 
inject anything from DI context. To workaround this situation you may 
do the same thing which is described in the previous note: make a wrapper
component which is instantiated within DI context and you may use the wrapper 
instance to get an access to the DI context.
