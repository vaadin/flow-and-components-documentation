---
title: Embedding Introduction
order: 1
layout: page
---

= Embedding Introduction

== General Embedding Ideas

Instead of writing monolithic frontend for your application you may choose a way
to compose your page of embedded applications (a.k.a. micro frontends).
Those embedded applications are isolated, may be maintained by different teams, use
different frameworks.
The simplest example here is embedding a calendar application to your page: 
the functionality provided by the calendar is quite isolated and has no relation to 
the logic of your application. It's quite similar to adding a client-side widget to 
your page. But embedded application has its backend logic which makes it a real application
and not only a widget.    

== Embedding a Flow Web Component Overview

Flow gives you a way to embed application via web components.
To be able to do this you need :
* write and declare a server side Flow component in a special  way using a specific element tag name. 
* let your (embedding) application know about Flow (embedded) application 
* add an element with the embedded component tag name to your page

The embedded component will behave as a Flow component regardless of content on your page.
Please see the technical details below.

== Embedding a Flow Web Component in Action

To be able to use a Flow component in your application you should export it.
Here is what you need to do it:
* Have a Flow application (which doesn't have to have any relation to your embedding application).
* Have a Flow component. Let's assume the component name is `MyComponent` (it can be already existing component).
* Create an exporter for the component. To do this you should extend `WebComponentExporter<MyComponent>` class. 
 ** Implement its constructor providing the tag name which you will use in your embedding application to inject 
the web component.
 ** Configure properties in the constructor via the `addProperty` method.
 ** Implement the `configureInstance` method in case you need additional initialization 
 of the exported component (e.g. add a listener to the original component).
* Deploy your Flow application. 
* Inject a Flow application to your page
 ** Add JS with the link to `"frontend/bower_components/webcomponentsjs/webcomponents-loader.js"` URL resource which is a part of embedded Flow application. It is needed to load polyfills library which allows to inject the web component via HTML import 
 (see the next step).
 ** Import web component URL resource from the embedded Flow application. Here is the example: `<link rel='import' href='YOUR_EMBEDDED_APPLICATION_URI/web-component/my-component.html'>`.
* Use the embedded web component inside your HTML code via the tag name which you have assigned to it. E.g. `<my-component></my-component>`.

Several notes here:
* The tag name `"my-component"` is used in this example as a tag name to address the embedded web component.
* You should export HTML file with name `web-component/my-component.html` : the `"web-component"` is hardcoded path part and 
the name of the HTML file should match to the tag name.
*  `YOUR_EMBEDDED_APPLICATION_URI` is the URI of you Flow application where it's gojng to be deployed. It depends on how
and where you deploy your Flow application.
* The element `my-component` is used inside your embedding application (not embedded Flow application) inside 
the HTML page content. This can be a static HTML file or any content generated by some framework (e.g. plain servlet, JSP, etc.)  

For more details please see the tutorials: 
* <<tutorial-webcomponent-properties#,Properties of Embedded Web Components>>
* <<tutorial-webcomponent-theming#,Theming an Embedded Application>>
* <<tutorial-webcomponent-push#,Embedded Application Push Configuration>>
* <<tutorial-webcomponent-production#,Embedded Application in Production>>
* <<tutorial-webcomponent-security#,Securing an Embedded Application>>
* <<tutorial-webcomponent-exporter#,Embedding a Flow Application>>

The last tutorial in this list contains a full example how to create an embedded web
component from scratch.
