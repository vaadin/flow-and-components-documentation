---
title: Embedding Introduction
order: 1
layout: page
---

= Embedding Introduction

== General Embedding Concepts

Instead of writing monolithic frontend for your application you may 
compose your page of embedded applications (a.k.a. micro frontends, see https://micro-frontends.org/).
These embedded applications are isolated, may be maintained by different teams, and use
different frameworks.
A simple example is embedding a calendar application to your page: 
the functionality provided by the calendar is quite isolated and has no relation to 
the logic of your application. Embedding an application is similar to adding a client-side widget to 
your page. But the embedded calendar has its backend logic which makes it a real application
instead.

== Embedding a Vaadin Application Overview

Vaadin gives you a way to embed application via web components.
To be able to do this you need:

* write and declare a server-side Vaadin component in a special way using a custom element tag name.
* let your embedding page know about your Vaadin application
* add an element with the specified custom tag name onto your page, embedding
 the application

The embedded component will behave as a Vaadin component regardless of content
on your page. Due to its nature, there are some features that are not
available for embedded Vaadin applications, navigation being one of them.

Please see the technical overview below.

== Embedding a Vaadin Application in Action

To be able to embed a Vaadin component onto your page, you will need to export your
component as an embeddable application.
Here is what you need to do it:

* Have a Vaadin application (which doesn't have to have any relation to your
embedding application).
* Have a Vaadin component. Let's assume the component name is `MyComponent` (it can be already existing component).
* Create an exporter for the component. To do this, extend `WebComponentExporter<MyComponent>` class. 
 ** Implement its constructor providing the tag name which you will use on you page to embed the application.
 ** Configure properties in the constructor via the `addProperty` method.
 ** Implement the `configureInstance` method in case you need additional initialization 
 of the exported component (e.g. add a listener to the original component).
* Deploy your Vaadin application.
* Embed a Vaadin application to your page
 ** Import web component URL resource from the embedded Vaadin application. Here is the example: `<link rel='import' href='YOUR_EMBEDDED_APPLICATION_URI/web-component/my-component.js'>`.
* Use the embedded web component inside your HTML code via the tag name which you have assigned to it. E.g. `<my-component></my-component>`.

Example notes:

* The tag name `"my-component"` is used in this example as a tag name to address the embedded application.
* The application is imported using the path `"web-component/my-component.js"` where `"web-component"` is the base path for embeddable applications and `"my-component.js"` is the custom tag name + `.js`.
*  `YOUR_EMBEDDED_APPLICATION_URI` is the URI of you Vaadin application where
it's going to be deployed. It depends on how and where you deploy your Vaadin
 application.
* The element `my-component` is used inside your HTML page content. This can be a static HTML file or any content generated by some framework (e.g. plain servlet, JSP, etc.)  

For more details please see the tutorials:

* <<tutorial-webcomponent-properties#,Properties of Embedded Web Components>>
* <<tutorial-webcomponent-theming#,Theming an Embedded Application>>
* <<tutorial-webcomponent-push#,Embedded Application Push Configuration>>
* <<tutorial-webcomponent-security#,Securing an Embedded Application>>
* <<tutorial-webcomponent-exporter#,Embedding a Vaadin Application>>
* <<tutorial-webcomponent-limitations#,Limitations in Embedded Application>>

The tutorial <<tutorial-webcomponent-exporter#,Embedding a Vaadin Application>>
contains a full example how to create an embedded Vaadin application from
scratch and use it on a web page.

There are some features limitations which you may find in <<tutorial-webcomponent-limitations#,Limitations in Embedded Application>> tutorial.
