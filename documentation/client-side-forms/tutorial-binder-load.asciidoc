---
title: Loading from and Saving to Business Objects
order: 2
layout: page
---

= Loading From and Saving To Business Objects

Once your bindings are set up, you are ready to fill the bound UI components with data from your business objects. 

== Loading data to Binder

You can use the `reset()` method to read values from a business object instance into the UI components.


*Example*: Using the `reset()` method.

[source, typescript]
----

this.binder.reset(person);
----

Using `reset()` without a parameter will reset to the previous value, which is initially empty.

[source, typescript]
----
this.binder.reset();
----

There is also a `clear()` method which will set the form to empty.
[source, typescript]
----
this.binder.clear();
----

== Saving data
You can use the `submitTo()` method to submit the value to a callback. Note the `submitTo()` is an asynchronous function, you can use `await` to wait for the result. The benefits of using `submitTo()` are:

* The binder can track the submission progress, e.g. disable the save button when a submission is ongoing.
* Submission failures are handled automatically, no need to do an explicit try-catch.


*Example*: Using the `submitTo()` method to submit to an endpoint method.

[source, typescript]
----
await this.binder.submitTo(viewEndpoint.savePerson);
----

Alternatively, you can set up an `onSubmit` callback in a configuration object when creating Binder, then when submitting, you can just call the `binder.submit()` method.
[source, typescript]
----
private binder = new Binder(this, PersonModel, {
    onSubmit: viewEndpoint.savePerson
  });

binder.submit();
----
