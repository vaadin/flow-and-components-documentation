---
title: Including Style Sheets
order: 2
layout: page
---

= Including Style Sheets

You can use CSS style sheets to style your application and Web Components. 

There are two ways to include a CSS style sheet in your Java classes. Both have the same effect and you can use whichever suits best.   

. Using the `@StyleSheet` annotation.
+
*Examples*: Using the `@StyleSheet` annotation to include a style sheet.
+
[source,java]
----
@StyleSheet("styles.css") // Relative to Servlet URL
@StyleSheet("http://www.example.com/example.css") // Loaded from external location
public class MainLayout extends Component {
  // implementation omitted
}
----

* The snippet uses the `@StyleSheet` annotation on a component. 
* The value of the annotation is a URL from which the style sheet loads. 
* The style sheet is loaded when the component displays for the first time in the browser. 
* You can use the annotation multiple times on the same component.

. Using the `addStyleSheet(String url)` method from the `Page` class. 
+
*Example*: Using the `addStyleSheet(String url)` method to include a style sheet. 
+
[source,java]
----
  public MainLayout(){
      // Loaded from "/root.css" regardless of how your application is deployed
      UI.getCurrent().getPage().addStyleSheet("/root.css");
  }
}
----

== Storing CSS Files

You can place CSS style sheets and other static resource files in any folder in your WAR file, except `/VAADIN`, which is reserved for internal framework use.

`VaadinServlet` handles static resource requests, if you have mapped it to `/*`.
If not, the servlet container takes care of static resource requests.

If you use relative URLs, it is irrelevant whether your application is deployed in the root context (for example  `\http://mysite.com/`) or in a sub context (for example `\http://mysite.com/myapp/`). Relative URLs are resolved using the page base URI, which is always set to match the servlet URL.

=== Using a Servlet Path

If you use a servlet path for the servlet, for example `\http://mysite.com/myapp/myservlet/`, you need to take the servlet path into account when including resources. This is because the base URI is `\http://mysite.com/myapp/myservlet/`, but static resources are deployed at `\http://mysite.com/myapp/`.

You can use the `context://` protocol, with the `Page.addStyleSheet` method, for example. This ensures the URL is relative to the context path. This protocol is only supported when including resources.

When you configure an element, for example setting the `src` attribute for an `<img>`, you cannot use the `context://` protocol. Your options are:

* Take the servlet path into account with your relative URL, for example `../images/logo.png`.
* Use an absolute URL, for example `/myapp/images/logo.png`
* Deploy your static resources in a directory that matches your servlet path, for example `/myservlet/`.


== Using Global Styles

Be cautious when including global styles for your application. If the user's browser does not have native support for Web Components, global styles tend to leak into your Web Components, 

See <<../web-components/integrating-a-web-component#,Integrating a Web Component>> for more, and *Browser support* at https://www.webcomponents.org/[webcomponents.org] for a list of browsers that support Web Components and those that require polyfills. 

Web Component normally uses their own styles that are specifically scoped for each component. If the browser does not support Web Components, the missing functionality is polyfilled, and the Web Component is no longer treated as a scoped unit, but rather as a regular part of the DOM tree. Global styles are applied to it in the same way as any other HTML element.

To prevent global styles leaking into the local DOM of Web Components, you can use the `<custom-style>` extension:

. Add an HTML import for Polymer `custom-style.html`, for example `<link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">`. 

. Add a `<custom-style>` declaration that includes the CSS styles you want to add in the `<head>` element.
+
*Example*: Adding a `<custom-style>` declaration.
+
[source,html]
----
<custom-style>
  <style>
    html {
      color: red;
    }
  </style>
</custom-style>
----

If you don't have a natural template for the custom-style declaration, you can create a separate file and import that using the `@HtmlImport` annotation:

. Put the import and custom styles in the same file. 
+
*Example*: `shared-styles.html`. 
+
[source,html]
----
<link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">

<custom-style>
  <style>
    html {
      color: red;
    }
  </style>
</custom-style>
----

. Use the `@HtmlImport("shared-styles.html")` annotation in a component class, like your main layout class.

See <<../theme/theming-crash-course#,Theming Web Components>> and https://www.polymer-project.org/2.0/docs/api/elements/Polymer.CustomStyle[Polymer.CustomStyle] for more.
