---
title: Storing and Loading Resources
order: 3
layout: page
---
= Storing and Loading Resources

== Storing Resources

You can place your resource files (CSS style sheets, JavaScript and HTML files, and other static resources) in any folder in your WAR file, except `/VAADIN`, which is reserved for internal framework use.

`VaadinServlet` handles static resource requests, if you have mapped it to `/*`.
If not, the servlet container takes care of static resource requests.

If you use relative URLs, it is irrelevant whether your application is deployed in the root context (for example  `\http://mysite.com/`) or in a sub context (for example `\http://mysite.com/myapp/`). Relative URLs are resolved using the page base URI, which is always set to match the servlet URL.

=== Using a Servlet Path

If you use a servlet path for the servlet, for example `\http://mysite.com/myapp/myservlet/`, you need to take the servlet path into account when including resources. This is because the base URI is `\http://mysite.com/myapp/myservlet/`, but static resources are deployed at `\http://mysite.com/myapp/`.

You can use the `context://` protocol, with the `Page.addStyleSheet` method, for example. This ensures the URL is relative to the context path. This protocol is only supported when including resources.

When you configure an element, for example setting the `src` attribute for an `<img>`, you cannot use the `context://` protocol. Your options are:

* Take the servlet path into account with your relative URL, for example `../images/logo.png`.
* Use an absolute URL, for example `/myapp/images/logo.png`.
* Deploy your static resources in a directory that matches your servlet path, for example `/myservlet/`.

== Advanced configuration of CSS, JavaScript and HTML imports

As discussed in <<tutorial-include-css#,Including Style Sheets>> and <<tutorial-importing#,Importing HTML and JavaScript>>, you can import client side dependencies or resource files using:

* Annotations (`@StyleSheet`, `@JavaScript` and `@HtmlImport`), and 
* Methods provided by the `Page` class (`addStyleSheet`, `addHtmlImport)` and `addJavaScript)`.

Sometimes the way client-side resources are loaded to the browser affects the functionality of the application. Vaadin Flow provides advanced methods to configure the loading of these resources.

=== Dependency Loading Order

Imported dependency files of the same type, load in the order they are defined in the class. For example, CSS files load in the `@StyleSheet` annotation definition order, JavaScript files in the `@JavaScript` annotation definition order, and HTML files in the `@HtmlImport` annotation definition order.  

The loading order of imported dependencies is only guaranteed for one file type, in one class. There are no other loading-order guarantees. Specifically, loading order is not guaranteed between classes or files types. 

*Example*: Imported dependencies of different file types in a single class. 

[source, java]
----
@JavaScript("1.js")
@StyleSheet("1.css")
@HtmlImport("1.html")
@JavaScript("2.js")
@StyleSheet("2.css")
@HtmlImport("2.html")
static class OrderedDependencies extends Div {
}
----
* `1.js` will be imported before `2.js`, `1.css` before `2.css`, `1.html` before `2.html`, but there are no other guarantees.

You can control the load order of dependencies of different file types, by adding imports within an HTML import. 


*Example*: Ensuring `htmlimport4.html` runs before `htmlimport4-js.js`.
[source, html]
----
<link rel="import" href="htmlimport4.html">
<script src="htmlimport4-js.js"></script>
----

=== Using the loadMode Parameter

All annotations and methods in the `Page` class without explicit `LoadMode` parameter use `LoadMode.EAGER`, by default.

The `LoadMode` can be given as a parameter for the annotations or you can use the following methods in the `Page` class: 

* `addStyleSheet(String url, LoadMode loadMode)`
* `addHtmlImport(String url, LoadMode loadMode)`
* `addJavaScript(String url, LoadMode loadMode)`


There are three available lode modes:

* `LoadMode.EAGER` is the default load mode for all dependencies. This mode ensures that the dependency is loaded as soon as possible, and before the initial page load. 
+
Eager mode is suitable in most cases. Use it if you are unsure which mode to use. 

* `LoadMode.INLINE` inlines dependencies in the body of the page. This mode eliminates round trips when fetching dependencies. If the contents cannot be fetched, an exception is thrown and loading stops. 
+
[NOTE]
Pay attention to URLs used for inlined dependencies: the URLS may change and could be incorrect after inlining. 

* `LoadMode.LAZY` loads dependencies in the background, after all eager and inline dependencies have loaded. Lazy dependency loading is independent of page initialization. 
+ 
Lazy mode is suitable when you need to load the dependency, but it is not important when it is loaded. 

=== Load-Order Guarantees

* All eager and inline dependencies are guaranteed to load before lazy dependencies.
+
Assume a component uses additional JavaScript animation, `/js/animation.js`, that is optional and not required, in your application. You can postpone its loading, giving priority to other resources. 
+
*Example*: Using annotations to add resource files.
+
[source,java]
----
@Tag("div")
// same as @HtmlImport("/html/layout.html",
//                     loadMode = LoadMode.EAGER)
@HtmlImport("/html/layout.html")
@StyleSheet(value = "/css/big_style_file.css",
        loadMode = LoadMode.INLINE)
@JavaScript(value = "/js/animation.js",
        loadMode = LoadMode.LAZY)
public class MainLayout extends Component {
    // implementation omitted
}
----
+
*Example*: Using `Page` class overload methods to add resource files. 
+
[source,java]
----
  public MainLayout() {
      UI.getCurrent().getPage().addHtmlImport(
            "/html/layout.html", LoadMode.EAGER);
      UI.getCurrent().getPage().addStyleSheet(
            "/css/big_style_file.css", LoadMode.INLINE);
      UI.getCurrent().getPage().addJavaScript(
            "/js/animation.js", LoadMode.LAZY);
  }
}
----
+
** In the examples, `/html/layout.html` is loaded and injected before creating the client-side structure for the `MainLayout` component, regardless of the availability of the `/js/animation.js` script.


* Dependencies with the same load mode are guaranteed to load in the order defined in the component. This is true for all load modes.
