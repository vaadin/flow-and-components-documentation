---
title: Ways of Importing the Dependencies
order: 2
layout: page
---

= Advanced configuration of CSS, JavaScript and HTML imports

You can import resource files using:

* Annotations (`@StyleSheet`, `@JavaScript` and `@HtmlImport`) and 
* Methods provided by the `Page` class (`addStyleSheet`, `addHtmlImport)` and `addJavaScript)`.

See <<tutorial-include-css#,Including Style Sheets>> and <<tutorial-importing#,Importing HTML and JavaScript>> for more.

== Dependency Loading Order

Imported dependency files of the same type load in the order they are defined in the class. For example, CSS files load in the `@StyleSheet` annotation definition order, JavaScript files in the `@JavaScript` annotation definition order, and HTML files in the `@HtmlImport` annotation definition order.  

The loading order of imported dependencies is only guaranteed for one file type, in one class. There are no other loading order guarantees. Specifically, load order is not guaranteed between classes or files types. 

*Example*: Imported dependencies of different file types in a single class. 

[source, java]
----
@JavaScript("1.js")
@StyleSheet("1.css")
@HtmlImport("1.html")
@JavaScript("2.js")
@StyleSheet("2.css")
@HtmlImport("2.html")
static class OrderedDependencies extends Div {
}
----
* `1.js` will be imported before `2.js`, `1.css` before `2.css`, `1.html` before `2.html`, but there are no other guarantees.

You can control the load order of dependencies of different file types, by adding imports within an HTML import. 


*Example*: Ensuring `htmlimport4.html` runs before `htmlimport4-js.js`.
[source, html]
----
<link rel="import" href="htmlimport4.html">
<script src="htmlimport4-js.js"></script>
----

== Using the loadMode Parameter

All annotations and relevant `Page` class overload methods have a `loadMode` parameter that is set to `LoadMode.EAGER`, by default.

Here are the relevant `Page` class overload methods: 

* `addStyleSheet(String url, LoadMode loadMode)`
* `addHtmlImport(String url, LoadMode loadMode)`
* `addJavaScript(String url, LoadMode loadMode)`


There are three available lode modes:

* `LoadMode.EAGER` is the default load mode for all dependencies. This mode ensures that the dependency is loaded as soon as possible, and before the initial page load. 
+
Eager mode is suitable in most cases. Use it if you are unsure which mode to use. 

* `LoadMode.INLINE` inlines dependencies in the body of the page. This mode eliminates round trips when fetching dependencies. If the contents cannot be fetched, an exception is thrown and loading stops. 
+
[NOTE]
Pay attention to URLs used for inlined dependencies: the URLS may change and could be incorrect after inlining. 

* `LoadMode.LAZY` loads dependencies in the background, after all eager and inline dependencies have loaded. Lazy dependency loading is independent of page initialization. 
+ 
Lazy mode is suitable when you need to load the dependency, but it is not important when it is loaded. 

== Load-Order Guarantees

* All eager and inline dependencies are guaranteed to load before lazy dependencies.
+
Assume a component uses additional JavaScript animation, `/js/animation.js`, that is optional, and not required, in your application. You can postpone its loading, giving priority to other resources. 
+
*Example*: Using annotations to add resource files.
+
[source,java]
----
@Tag("div")
@HtmlImport("/html/layout.html") // same as @HtmlImport("/html/layout.html", loadMode = LoadMode.EAGER)
@StyleSheet(value = "/css/big_style_file.css", loadMode = LoadMode.INLINE)
@JavaScript(value = "/js/animation.js", loadMode = LoadMode.LAZY)
public class MainLayout extends Component {
    // implementation omitted
}
----
+
*Example*: Using `Page` class overload methods to add resource files. 
+
[source,java]
----
  public MainLayout() {
      UI.getCurrent().getPage().addHtmlImport("/html/layout.html", LoadMode.EAGER);
      UI.getCurrent().getPage().addStyleSheet("/css/big_style_file.css", LoadMode.INLINE);
      UI.getCurrent().getPage().addJavaScript("/js/animation.js", LoadMode.LAZY);
  }
}
----
+
** In the examples, `/html/layout.html` is loaded and injected before creating the client-side structure for the `MainLayout` component, regardless of the availability of the `/js/animation.js` script.


* Dependencies with the same load mode are guaranteed to load in the order defined in the component. This is true for all load modes.

* No guarantees are made on the order of dependencies between groups. For example, if your component has both lazy and inline dependencies, both groups of dependencies will be loaded simultaneously. 

// Doesn't this last statement contradict what is stated in the inline and lazy explanations above? Thoese imply that inline is loaded before lazy?? 
// shouldn't we also add what happens between the file types (css, js, html) when different modes are used. 
