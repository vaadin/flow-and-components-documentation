---
title: Dynamic Route Registration
order: 10
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Dynamic Route Registration

In addition to registering application routes using the `@Route` annotation,
you can also add and remove routes dynamically during runtime. This is useful
when a route should be added or removed based on e.g. changed business data or
based on application configuration at startup.

You can configure routes to **all users using the application
scope** or only to **certain active users using the session scope**. The
`RouteConfiguration` class allows you to configure routes to a specific
scope, which you access using the static methods `forSessionScope` and
`forApplicationScope`. All components with the `@Route` annotation are added
to the application scope.

== Configuring User Specific Routes

You can add and remove routes for certain users e.g. based on their access
rights. The following code adds the two views to the currently active user:

[source, java]
----
RouteConfiguration.forSessionScope().setRoute("admin", AdminView.class);

// parent layouts can be given as a vargargs parameter
RouteConfiguration.forSessionScope().setRoute("home", HomeView.class, MainLayout.class);
----

A route set for the user can override a route with the same path from the
application scope. So any statically registered `@Route` can be overridden for a
specific user if necessary.

The routes in the session scope are only accessible for the current user as
long as the session is valid. When you invalidate the session on user logout,
the session scoped routes will not be available anymore automatically and you
 don't have to remove the routes specifically.

To remove a route you need to define decide if what you want to remove

* the navigation target (e.g. `AdminView.class`) with all possible
route aliases registered to it
* path (e.g. "admin") which only removes the target mapped to it
* a single navigation target registered to a path (e.g. `UsersView.class` from
"users" without removing target with parameter, like "users/{id}").

[source, java]
----
RouteConfiguration configuration = RouteConfiguration.forSessionScope();
// No view AdminView will be available
configuration.removeRoute(AdminView.class);

// No path "admin" will be available
configuration.removeRoute("admin");

// Remove the "/users" path but keep e.g. "/users/123"
configuration.removeRoute("users", UsersView.class);
----

For routes with route aliases see: <<Adding route aliases for dynamic routes>>
For information on multiple navigation targets on a single path see: <<tutorial-router-url-parameters#,URL Parameters for Navigation Targets>>

[NOTE]
Removing a route in session scope that has overridden an application scoped
route, will make the application scoped route accessible again.

[NOTE]
When dynamically registering a route any annotations on the classes *will* be
 ignored except when using methods containing `Annotated` e.g.
 `setAnnotatedRoute`. More details <<dynamic.annotations,later>>.

[[application.startup]]
== Adding Routes on Application Startup

You can register routes during the application startup with the
`ServiceInitLister`, <<../advanced/tutorial-service-init-listener#,read the
tutorial for how to add one>>.

[source,java]
----
public class ApplicationServiceInitListener implements VaadinServiceInitListener {

    @Override
    public void serviceInit(ServiceInitEvent event) {
        // add view only during development time
        if (!event.getSource().getDeploymentConfiguration().isProductionMode()) {
            RouteConfiguration configuration = RouteConfiguration.forApplicationScope();

            configuration.setRoute("crud", DBCrudView.class);
        }
    }

}
----

== Getting the Registered Routes and Listening to Changes

When routes are registered dynamically, you might need to update UI
components like navigation menus based on the added or removed routes.

You can retrieve the registered routes using the `getAvailableRoutes()`
method from the registry. To get notified for route changes, you can register a
listener using the `addRoutesChangeListener` method.

[NOTE]
You should use the session registry for monitoring changes, since it contains
 all the routes that are available for the current user.

[source, java]
----
RouteConfiguration configuration = RouteConfiguration.forSessionScope();
// add all currently available views
configuration.getAvailableRoutes().forEach(menu::addMenuItem);

// add and remove menu items when routes are added and removed
configuration.addRoutesChangeListener(event -> {
    // ignoring any route alias changes
    event.getAddedRoutes().stream()
             .filter(route -> (route instanceof RouteData))
             .forEach(menu::addMenuItem);
    event.getRemovedRoutes().stream()
             .filter(route -> (route instanceof RouteData))
             .forEach(menu::removeMenuItem);
 });

----

== Adding route aliases for dynamic routes

When adding dynamic routes the first path for which the navigation target is added
will be marked as the main path and is returned by the `getUrl` methods in
`RouteConfiguration`.

Any additional paths registered will be seen as a route alias.

[source, java]
----
RouteConfiguration configuration = RouteConfiguration.forSessionScope();
configuration.setRoute("main", MyRoute.class);
configuration.setRoute("info", MyRoute.class);
configuration.setRoute("version", MyRoute.class);
----

In this scenario `configuration.getUrl(MyRoute.class)` would return `main`.

This is the same as having the static class definition:

[source, java]
----
@Route("main")
@RouteAlias("info")
@RouteAlias("version")
private class MyRoute extends Div {
}
----

In case the main path gets removed and an alias path is still left for use, then
the main path will be updated to the first alias path found from the registry.

[NOTE]
When adding or removing routes from the `ApplicationRouteRegistry` it should be
well understood that it will have an impact on every user of the system.

[[dynamic.annotations]]
== Dynamic registration of @Route annotated classes

If you want to map all routes the same way using the `@Route` annotation, you
 can statically configure those routes but postpone the registration to
 happen on runtime.

To skip the static registration on servlet initialization just add the parameter `registerAtStartup = false`
to the `@Route` annotation and it will not be registered on startup to the application scoped registry.
This makes it easy to use existing parent chains and paths that get modified from the parent.

[source, java]
----
@Route(value = "quarterly-report", layout = MainLayout.class, registerAtStartup = false)
@RouteAlias(value = "qr", layout = MainLayout.class)
public class ReportView extends VerticalLayout implements HasUrlParameter<String>{
    // implementation omitted
}

// register the above view during runtime
if (getCurrentUser().hasAccessToReporting()) {
    RouteConfiguration.forSessionScope().setAnnotatedRoute(ReportView.class);
}
----

== Example: Adding a new view on user login

Our application contains the statically registered route "" which maps to the
login used for user authentication.

We also have the "info" route that will not be statically registered
as it has the `registerAtStartup = false`.

[[Login.class]]
.Login.class
[source, java]
----
@Route("")
public class LoginPage extends Div {

    private TextField login;
    private PasswordField password;

    public LoginPage() {
        login = new TextField("Login");
        password = new PasswordField("Password");

        Button submit = new Button("Submit", this::handeLogin);

        add(login, password, submit);
    }

    private void handeLogin(ClickEvent<Button> buttonClickEvent) {
    }
}
----

.The main layout containing a menu
[source, java]
----
public class MainLayout extends Div implements RouterLayout {
    public MainLayout() {
        // Implementation omitted, but could contain a menu.
    }
}
----

.Info.class
[source, java]
----
@Route(value = "info", layout = MainLayout.class, registerAtStartup = false)
public class InfoView extends Div {
    public InfoView() {
        add(new Span("This page contains info about the application"));
    }
}
----

After a user has logged in we want to add a new route for that user depending
on who logged in.

As available targets we have:

.AdminView.class
[source, java]
----
public class AdminView extends Div {
}
----

.UserView.class
[source, java]
----
public class UserView extends Div {
}
----


In Login we would handle the adding to only the user session as:

[source, java]
----
private void handeLogin(ClickEvent<Button> buttonClickEvent) {
    // Validation of credentials is skipped

    RouteConfiguration configuration = RouteConfiguration
            .forSessionScope();

    if ("admin".equals(login.getValue())) {
        configuration.setRoute("", AdminView.class, MainLayout.class);
    } else if ("user".equals(login.getValue())) {
        configuration.setRoute("", UserView.class, MainLayout.class);
    }

    configuration.setAnnotatedRoute(InfoView.class);

    UI.getCurrent().getPage().reload();
}
----

Here we add to the session scoped route registry a new target for the path "" which will
override the application scoped path "" for the user. Also the Info class is
added here using the layout setup configured using `@Route` making it be
registered to the path "info" with the same `MainLayout` as the parent layout.

[NOTE]
This still means that other users on other sessions get Login for the "" path
and can not access "info".
