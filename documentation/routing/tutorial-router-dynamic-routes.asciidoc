---
title: Dynamic Route Registration
order: 10
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
== Dynamic Route Registration

The `RouteRegistry` contains a collection of routes that can be
navigated to for a Flow application. A route consist of a path and one or more renderable layouts.

The normal way in Flow is to registers routes using the static `@Route` annotation on a
class that is then added to an application scoped registry on servlet initialization.
These routes are available to all users navigating to the mapped path.
For more information on static routes see <<tutorial-routing-annotation#,Defining Routes with @Route>>.

In some cases there might be a need to add or remove a route due to changed data
or application state.
This might mean adding an entry point to the system (application scope) or new
targets for a logged in user (session scope).

To add new routes, there is a `RouteConfiguration` class that allows you to add
routes to a specific scope. For scope configuration there are
the static methods `forSessionScope` and `forApplicationScope`.

The simplest way of adding any route to a registry is to define the path and the layout component:

.Register Home.class to session scoped registry using the path 'home' with no parent layouts
[source, java]
----
RouteConfiguration.forSessionScope().setRoute("home", Home.class);
----

Adding parent layouts is as easy as giving them as varArgs or a list.

.Register Home.class with MainLayout.class as its parent
[source, java]
----
RouteConfiguration.forSessionScope().setRoute("home", Home.class, MainLayout.class);
----

For information on parent layouts see <<tutorial-router-layout#,Router Layouts and Nested Router Targets>>.

[NOTE]
When dynamically registering a route any annotations on the classes *will* be ignored except when using methods containing `Annotated` e.g. `setAnnotatedRoute`.

To remove a route from a `RouteRegistry` you need to define decide if what you want to
remove is the path (e.g. "users"), the navigation target (e.g. `Users.class`) with all route aliases
or a single navigation target registered to a path (e.g. `Users.class` from "users" where there will
be left a parameter target "users/{id}").

[source, java]
----
RouteConfiguration configuration = RouteConfiguration.forSessionScope();
// No path "users" should be available
configuration.removeRoute("users");

// No navigationTarget Users should be available
configuration.removeRoute(Users.class);

// Only the Users navigationTarget should be removed from "users"
configuration.removeRoute("users", Users.class);
----

For routes with route aliases see: <<Adding route aliases for dynamic routes>>
For information on multiple navigation targets on a single path see: <<tutorial-router-url-parameters#,URL Parameters for Navigation Targets>>

[NOTE]
Removing a route in session scope will not create a removal mask and any route
masked in the application scope by the removed route will be visible.


=== Adding route aliases for dynamic routes

When adding dynamic routes the first path for which the navigation target is added
will be marked as the main path and be returned for the `getUrl` methods.

Any additional paths registered will be seen as a route alias.

So for the registrations:

[source, java]
----
RouteConfiguration configuration = RouteConfiguration.forSessionScope();
configuration.setRoute("main", MyRoute.class);
configuration.setRoute("info", MyRoute.class);
configuration.setRoute("version", MyRoute.class);
----

In this scenario `configuration.getUrl(MyRoute.class)` would return `main`.

This is the same as having the static class definition:

[source, java]
----
@Route("main")
@RouteAlias("info")
@RouteAlias("version")
private class MyRoute extends Div {
}
----

In case the main path gets removed and an alias path is still left for use, then
the main path will be updated to the first alias path found from the registry.

[NOTE]
When adding or removing routes from the `ApplicationRouteRegistry` it should be
well understood that it will have an impact on every user of the system.

=== Using @Route annotated classes

To utilise the features that `@Route` brings for static registration the `RouteConfiguration`
class contains methods to add routes that have been annotated with `@Route`.

To skip the static registration on servlet initialization just add `@DynamicRoute`
to the `@Route` annotated class and it will not be registered on startup to the application scoped registry.
This makes it easy to use existing parent chains and paths that get modified from the parent.

==== Example: Adding a new view on user login

Our application contains the statically registered route "" which maps to the
login used for user authentication.

We also have the "info" route that will not be statically registered
as it's marked with `@DynamicRoute`.

[[Login.class]]
.Login.class
[source, java]
----
@Route("")
public class Login extends Div {

    private TextField login;
    private PasswordField password;

    public Login() {
        login = new TextField("Login");
        password = new PasswordField("Password");

        Button submit = new Button("Submit", this::handeLogin);

        add(login, password, submit);
    }

    private void handeLogin(ClickEvent<Button> buttonClickEvent) {
    }
}
----

.The main layout containing a menu
[source, java]
----
public class MainLayout extends Div implements RouterLayout {
    public MainLayout() {
        // Implementation omitted, but could contain a menu.
    }
}
----

.Info.class
[source, java]
----
@Route(value = "info", layout = MainLayout.class)
@DynamicRoute
public class Info extends Div {
    public Info() {
        add(new Span("This page contains info about the application"));
    }
}
----

After a user has logged in we want to add a new route for that user depending
on who logged in.

As available targets we have:

.Admin.class
[source, java]
----
public class Admin extends Div {
}
----

.User.class
[source, java]
----
public class User extends Div {
}
----


In Login we would handle the adding to only the user session as:

[source, java]
----
private void handeLogin(ClickEvent<Button> buttonClickEvent) {
    // Validation of credentials is skipped

    RouteConfiguration configuration = RouteConfiguration
            .forSessionScope();

    if ("admin".equals(login.getValue())) {
        configuration.setRoute("", Admin.class, MainLayout.class);
    } else if ("user".equals(login.getValue())) {
        configuration.setRoute("", User.class, MainLayout.class);
    }

    configuration.setAnnotatedRoute(Info.class);

    UI.getCurrent().getPage().reload();
}
----

Here we add to the session scoped route registry a new target for the path "" which will
mask the application scoped path "". Also the Info class is added here using
the layout setup configured using `@Route` making it be registered to the path "info" with
the same `MainLayout` as the parent layout.

[NOTE]
This still means that other users on other sessions get
Login for the "" path and can not use "info".
