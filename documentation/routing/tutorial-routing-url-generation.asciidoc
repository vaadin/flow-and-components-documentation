---
title: URL generation
order: 5
layout: page
---

= URL Generation

`Router` exposes methods to get the navigation URL for registered navigation targets.

== Standard Navigation Targets

For standard navigation targets, the request is a simple call for `Router.getUrl(Class target)`

*Example*: Returned URL is resolved to `path`

[source,java]
----
@Route("path")
public class PathComponent extends Div {
    public PathComponent() {
        setText("Hello @Route!");
    }
}

public class Menu extends Div {
    public Menu() {
        String route = UI.getCurrent().getRouter()
                .getUrl(PathComponent.class);
        Anchor link = new Anchor(route, "Path");
        add(link);
    }
}
----

If parent layouts add path parts, it is not always simple to generate the path by hand.


== Navigation Target with Parameters

For navigation targets with required parameters, the parameter is given to the resolver and the returning string contains the parameter.

*Example*: Returning string contains `Router.getUrl(Class target, T parameter)`.

[source,java]
----
@Route(value = "greet")
public class GreetingComponent extends Div
        implements HasUrlParameter<String> {

    @Override
    public void setParameter(BeforeEvent event,
            String parameter) {
        setText(String.format("Hello, %s!", parameter));
    }
}

public class ParameterMenu extends Div {
    public ParameterMenu() {
        String route = UI.getCurrent().getRouter()
                .getUrl(GreetingComponent.class,
                        "anonymous");
        Anchor link = new Anchor(route, "Greeting");
        add(link);
    }
}
----

