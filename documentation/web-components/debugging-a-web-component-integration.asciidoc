---
title: Debugging a Web Component Integration
order: 10
layout: page
---
= Debugging a Web Component Integration

Not everything is smooth sailing and sometimes the component just refuses to work like you want it to.
If the problem is on the Java side, you can use your standard IDE debugger to figure out what happens but when the problem is in the browser, it gets a bit trickier.
Chrome Inspector is an invaluable tool when trying to figure out what goes wrong.

== Is the element not configured as it should?

Check with the DOM inspector that the element contains the expected attributes (most of the time properties are synchronized to attributes and vice versa).
If the property is not synchronized to an attribute, select the element in the inspector and write `$0.somePropertyName` in the console to check that the value is the expected one.

== Is an event not sent to the server as you would expect?

Select the element, and write `monitorEvents($0,'event-name');` in the console.
You will now see a log row if the event is triggered and will know you have the correct event name and that the web component actually fires the event.
You can leave out `'event-name'` to log all events but be prepared to see a lot of `mousemove` events. You can also use this to see which properties are defined for the event so that you can know what to include in `@EventData`.

== Do you need to debug the Javascript?

If you need to debug what the web component does, use the browser debugger to set breakpoints at suitable places.
In more problematic cases, e.g., if the problem occurs on initial setup, you can add a `debugger;` statement to the web component code to make the browser always and automatically break at that point.
To do that, you need to edit the web component included in your project.
All the components used in this project will be downloaded by npm and located in the `node_modules` folder under the project root folder.

To debug the `increment()` function in `paper-slider` you can thus do:

1. Launch the project in dev mode so that any frontend file change is automatically used after the page reload
2. Find a `paper-slider` in the `node_modules` directory: `node_modules/@polymer/paper-slider`
3. Add a `debugger` statement to the `increment: function() {` function
4. Reload the page, click on the "Increment" button when the inspector window is open

[TIP]
Disable the cache in the browser network tab to avoid getting old versions of the files you are debugging.
