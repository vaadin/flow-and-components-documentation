---
title: Creating an In-project Web Component
order: 20
layout: page
---

= Creating an In-project Web Component

To integrate existing, public web components it typically makes sense to do as described above in <<integrating-a-web-component#,Integrating a Web component>>.
If you want to create a UI component which is specific to the application project you are working on, you can integrate and develop it within your application project instead.
Assuming you have an existing project, here the https://vaadin.com/start/lts/project-base project is used as an example, you need to

1. Create a Polymer 3 template for the component
2. Create a Java API for the component

== Template

Create a `frontend/my-test-element/my-test-element.js` file with the following contents:

[source, js]
----
import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';

class MyTestElement extends PolymerElement {
  static get template() {
    return html`
      <h2>Hello</h2>
    `;
  }
}

window.customElements.define('my-test-element', MyTestElement);
----

== Java API

This works exactly as described in <<creating-java-api-for-a-web-component#,Creating Java API for a Web Component>>.
The only difference is that static files are loaded from your project and you can modify them easily while creating the Java API.

As an example, for the generated `my-test-element`, you could do
[source, java]
----
@Tag("my-test-element")
@JsModule("my-test-element/my-test-element.js")
public class MyTest extends Component {

    public MyTest(String prop1) {
        getElement().setProperty("prop1", prop1);
    }
}
----

You can now use the component as e.g.
[source, java]
----
public class MainView extends VerticalLayout {
    public MainView() {
        add(new MyTest("World"));
    }
}
----
