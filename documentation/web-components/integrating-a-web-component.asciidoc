---
title: Integrating a Web Component
order: 1
layout: page
---

= Integrating a Web Component

Web Components are a collection of web standards allowing you to create new HTML tags with custom name, reusability and full encapsulation on styles & markup. To understand more about what Web Components are, visit <<introduction-to-webcomponents#,Introduction to Web Components>>.

To be able to use a web component from Flow you need two things: to load the HTML/JS/CSS files needed by the component and a Java API used to configure the component and to listen to events from it.

The client-side files for a web component, typically JS module files, are available using https://www.npmjs.com/[npm]. Flow 2.0 and above comes with npm support. It will automatically install and use npm packages and serve the static files to the browser.

Since Vaadin Platform 14.2 `pnpm` tool is used for package management instead of `npm`. This is done transparently for the end
user and in case there is a reason to use `npm` instead of `pnpm` you may disable `pnpm` (see <<../advanced/tutorial-all-vaadin-properties#,All Vaadin properties>>  or <<../production/tutorial-production-mode-advanced#,Advanced production mode topics>> sections). `pnpm` tool improves the package management in many ways, e.g. it allows to share the same packages between various 
projects and avoid downloading them every time for every project which also reduce a number of IO operations.  

== Step 1. Integrating a JS module with Vaadin

While you can start from scratch and do all the things manually, it's easiest to start with the component project available at https://vaadin.com/start/lts/component. This will give you a project with Flow dependencies, npm import for the selected component and a stub Java class for your web component integration. It also contains a Maven profile which will handle all things needed to deploy it to Vaadin Directory.

As an example, if you create a starter project for https://github.com/PolymerElements/paper-slider, following annotations are attached to the server-side component:

[source, java]
----
@Tag("paper-slider")
@NpmPackage(value = "@polymer/paper-slider",
            version = "3.0.1")
@JsModule("@polymer/paper-slider/paper-slider.js")
----

The name of the HTML element is defined using `@Tag("paper-slider")` and the JS import for the component is defined using `@JsModule("@polymer/paper-slider/paper-slider.js")` and `@NpmPackage(value = "@polymer/paper-slider", version = "3.0.1")`.

If your component requires in-project front-end files, for example JavaScript modules, add them to the `src/main/resources/META-INF/frontend` directory so that they are packaged in the component jar if you choose to make an add-on of your component. A local JavaScript module should be loaded with a `@JsModule` annotation as follows:

[source, java]
----
@JsModule("./my-local-module.js")
----

The `vaadin-maven-plugin` will automatically install the npm package in `node_modules` and import the JS module file into the document provided to the browser when running  `mvn clean install`. Moreover, if the Jetty webserver is run from Maven (using `mvn jetty:run`), your project's source code is monitored for changes to these types of annotations. So any change to `@NpmPackage` or `@JsModule` annotations will trigger installation of the referenced packages and hot deployment of your app including the new JS module imports.

The main test/demo Java class `src/test/java/â€¦/DemoView.java`

[source, java]
----
@Route("")
public class DemoView extends VerticalLayout {
----

The project is set up in a slightly unconventional way so it can be a single-module Maven project. The test folder is used for a test/demo application in addition to actual test files. When you run

[source, sh]
----
mvn jetty:run
----

in the project, it will deploy `DemoView` and show it at http://localhost:8080

Now you are set to create the Java API, for more details see <<creating-java-api-for-a-web-component#,Creating Java API for a Web Component>>

[NOTE]
Some web components will not show any UI when they are just added as empty tags to the page. If the demo view is empty, inspect first the browser browser console to verify that all files were found (no 404s) and then check if the component is correctly configured.

[NOTE]
While the project setup is easy to use for development/testing, it does not allow you to easily produce a demo war file for deployment. It's usually better to create a separate project (or convert the project into a multi-module project) for this as the "demo" files included in the addon itself tend to be test UIs whereas a demo should be aimed at the end user.

[NOTE]
If you want to make your component OSGi compatible refer to the
<<../advanced/tutorial-making-components-osgi-compatible#,Making a component
add-on OSGi-compatible>> document.

[IMPORTANT]
If the project you are using is configured as a multi-module
project (the base project is an older version or you have done manual
conversion), the source monitoring will not work and changes to the component
are not automatically reflected to your demo application!

== Step 3. Deploying the Add-on to Vaadin Directory

When you are satisfied with the API, you can make the add-on available to the world by deploying it into Vaadin Directory. You can create the Directory compatible add-on package using

[source, sh]
----
mvn clean install -Pdirectory
----

This creates a zip file in the `target` directory.

Go to https://vaadin.com/directory, log in or register, and upload this zip file. Be sure to write an overview for your add-on to let others know what you can do with it, what browsers it supports etc. Then publish it and others can take your add-on into use by copying the dependency information from the add-on page in the directory.

[NOTE]
The metadata used by Vaadin Directory is defined in `assembly/MANIFEST.MF`, based on the project's metadata. If you do changes to the project such as removing `<name></name>`, make sure you update the metadata.
