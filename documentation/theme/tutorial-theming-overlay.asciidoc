---
title: Theming Overlay Components 
order: 6
layout: page
---

= Theming Overlay Components

The `<vaadin-overlay>` component allows you to create an overlay. This component an essential part of many components, for example, `dialog`, `notification`, `combo-box`, `date-picker`, `time-picker`, `select` and `context-menu`. These components are made up of two components:

* *Main* component, for example `<vaadin-dialog>`, that is not visible (`display:none`) on the page.
* *Overlay* component, for example `<vaadin-dialog-overlay>`, that is visible on the page.

== Styling an Overlay

The `<vaadin-overlay>` component contains three stylable parts:

* `backdrop`: The optional modality curtain that covers the whole viewport.
* `overlay`: The container to position, size, and align the content. It is typically also a scrolling container.
* `content`: The content area inside the scrolling container (overlay). You can apply padding in this part to affect the size of the scrolled content.

The `theme` attribute is the only attribute that is copied from the main component to the overlay component. This allows you to style individual overlays. The `theme` attribute is the only exception: all other attributes (for example, the class selector) are not copied from the main component to the overlay component. 

To style an overlay component, you need to create a style CSS module, target the stylable parts, instruct Vaadin to import it as a module targeting the specific component, and set the `theme` attribute to the main component in your view.

*Example*: Creating the `my-overlay-theme.css` style CSS module.

[source,css]
----
:host([theme~="custom-theme-variant"]) [part~="overlay"]
{
}
----

*Example*: Using the `@CssImport` annotation to import `my-overlay-theme.css` into `MyApplication`. 

[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/my-overlay-theme.css",
           themeFor = "vaadin-*-overlay")
public class MyApplication extends Div {
}
----

*Example*: Using the `setAttribute` method to set the `theme` attribute in `MyView`. 

[source,java]
----
public class MyView extends VerticalLayout {
    public MyView() {
        Dialog dialog = new Dialog();
        dialog.getElement().setAttribute("theme",
                "custom-theme-variant");
    }
}
----

If you want to be more specific and target the overlay of `vaadin-dialog`, do not use wildcards in the `themeFor` attribute, rather target the `vaadin-dialog-overlay` element directly. 

*Example*: Creating the `my-dialog-overlay-theme.css` style CSS module. 

[source,css]
----
[part="backdrop"] {
}
[part="overlay"] {
}
[part="content"] {
}
----

*Example*: Using the `@CssImport` annotation to import `my-dialog-overlay-theme.css` into `MyApplicationWithDialog`. 

.MyApplicationWithDialog.java
[source,java]
----
@Route(value = "")
@CssImport(value="./styles/my-dialog-overlay-theme.css",
           themeFor = "vaadin-dialog-overlay")
public class MyApplicationWithDialog extends Div {
}
----
