---
title: Theming Web Components
order: 4
layout: page
---

= Theming Web Components


This section describes how to theme applications that include, or are built with, <<../polymer-templates/tutorial-template-basic#,
Web Components>> (also know as Polymer templates).  

When styling Polymer templates, it is important to distinguish global and scoped styles:  

* *Global styles* apply to all elements globally. A CSS selector targets any and all elements. This was the case generally before the introduction of Web Components. 
* *Scoped styles* are isolated from global styles and apply to only the shadow DOM of a specific Web Component (Polymer template). 


== Defining Global Styles

Global styles are styles defined in the document scope, that is, styles that target the document body and regular DOM contents (including application views). Global styles exclude styles that target shadow DOM content, for example the internals of a Vaadin Polymer template or other Web Component. 

To define global styles:

. Include your styles in a CSS file.
+
*Example*: `shared-styles.css` typically stored in the `frontend/styles/` folder. 
+
[source,css]
----
html {
  font-size: 1em;
}
----
. Configure your application to import the CSS file using the `@CssImport` annotation. 

+
*Example*: Using the `@CssImport` annotation to import `shared-styles.css`.
+
[source,java]
----
@Route(value = "")
@CssImport("./styles/shared-styles.css")
public class MyApplication extends Div {
}
----

Vaadin wraps the styles appropriately and instructs Polymer to enable correct cross-browser scoping.

== Styling Polymer Templates

Since Polymer templates are Web Components, their content is in the shadow DOM. By design, the shadow DOM defines a local-style scope that is isolated from global styles.

You can add component-specific scoped styles directly in the `<style>` tag in the template getter..

*Example*: Adding component-specific styles in `my-view.js`.

[source,js]
----
import { PolymerElement } from
        '@polymer/polymer/polymer-element.js';
import { html } from
        '@polymer/polymer/lib/utils/html-tag.js';

class MyView extends PolymerElement {
  static get template() {
    return html`
      <style>
        :host {
          /* Styles for the <my-view>
             hosting element */
          display: block;
        }

        .my-view-title {
          font-weight: bold;
          border-bottom: 1px solid gray;
        }
      </style>
      <div class="my-view-title">My view title</div>
    `;
  }

  static get is() {
    return 'my-view';
  }
}
customElements.define(MyView.is, MyView);
----

== Using Custom CSS Properties

You can use custom CSS properties to share common style values, such as sizes and colors, among different parts of your application. 

Custom CSS properties use the double dash (`--`) syntax, for example `--main-color: black;`, and allow you to assign and reference CSS variables. 

Custom CSS property values are inherited and are able to penetrate the shadow DOM. You can use them to style component elements within the shadow DOM. Polymer templates can reuse custom CSS property values defined by global styles, and also override them.

*Example*: Defining a global custom CSS property in `shared-styles.css` for a HTML element. 

[source,css]
----
html {
  /* Example global custom CSS property definition */
  --my-theme-color: brown;
}
----

You can reference your custom CSS properties using the `var(_--my-property_)` function.

*Example*: Using the `var()` function in `my-view.css` .

[source,css]
----
.my-view-title {
  /* Example referencing custom CSS property */
  color: var(--my-theme-color);
}
----

== Using Style Modules

Style modules allow you to use the same style sheet for multiple Polymer templates and global styles.

*Example*: `common-styles.css` style module.

[source,css]
----
/* Example style module */
.my-outline-style {
  outline: 1px solid green;
}
----

To import a style module into your application, you need to provide a unique name for the `id` attribute in the `@CssImport` annotation.

*Example*: Importing `common-styles.css` using the `@CssImport` annotation. 

[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/common-styles.css",
           id = "common-styles")
public class MyApplication extends Div {
}
----
You can now reuse the style module when importing other style files using the `include` attribute.

*Example*: `specific-styles.css`

.frontend/styles/specific-styles.css
[source,css]
----
/* Example style */
.my-border-style {
  border: 2px solid grey;
}
----

*Example*: Using the `include` attribute to include the `common-styles` style module when importing `specific-styles.css`. 

[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/specific-styles.css",
           include = "common-styles")
public class MyApplication extends Div {
}
----

If you need to style your templates directly in the client modules, you can define and import modules using JavaScript.

*Example*: Importing the `common-styles.css` style module in `common-styles.js`. 

[source,js]
----
import styles from './common-styles.css'
const $_documentContainer = document
        .createElement('template');
$_documentContainer.innerHTML = `
  <dom-module id="common-styles">
    <template><style>${styles}</style></template>
  </dom-module>`;
document.head.appendChild($_documentContainer.content);
----

*Example*: Using the `include` attribute to include the `common-styles` style module in `my-view.js`.

[source,js]
----
import { PolymerElement } from
        '@polymer/polymer/polymer-element.js';
import { html } from
        '@polymer/polymer/lib/utils/html-tag.js';
import '../styles/common-styles.js'

class MyView extends PolymerElement {
  static get template() {
    return html`
      <style include="common-styles">
        .my-border-style {
          border: 2px solid grey;
        }
      </style>

      <div class="my-view-title">My view title</div>
    `;
  }
  static get is() {
    return 'my-view';
  }
}
customElements.define(MyView.is, MyView);
----

[NOTE]
You can include multiple style modules into a single scope using a space-separated list of style module ids, for example `<style include="shared-styles other-shared-styles"></style>`.

You can also include style modules in global styles.

*Example*: Using the `@CssImport` annotation to include the `common-styles` style module while importing `shared-styles.css`. 

.MyApplication.java
[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/shared-styles.css",
           include = "common-styles")
public class MyApplication extends Div {
}
----
