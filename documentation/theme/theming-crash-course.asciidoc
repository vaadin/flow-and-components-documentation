---
title: Theming Crash Course
order: 4
layout: page
---

= Theming Web Components

This chapter gives an overview of everything you need to understand in order to master and be productive in theming modern web applications which are built with web components.

First, it is important to draw the line between global styles and scoped styles:

* Before web components were introduced, the styles were global on the web, meaning that a selector in CSS can target any element in the document.
* Web components, and Shadow DOM in particular, introduce style scoping to the web platform.
The contents of web components are isolated from global styles, and instead have scoped styles, which are specific to a particular web component only.

This guide describes how to apply global and scoped styles, as well as how to share common styles between style scopes for the application theming purpose.

== Global Styles

Global styles are styles defined in the document scope.
Global styles can target document body and any regular DOM contents inside, including the application views,
but can not target Shadow DOM contents, such as internals of Vaadin components, Polymer templates, and other web components.

To define global styles, we need to put our styles in a `.css` file and configure your application to import
it using the `@CssImport` annotation. Flow will wrap the styles appropriatelly to instruct Polymer to enable correct cross-browser scoping.

.frontend/styles/shared-styles.css
[source,css]
----
html {
  font-size: 1em;
}
----

.MyApplication.java
[source,java]
----
@Route(value = "")
@CssImport("./styles/shared-styles.css")
public class MyApplication extends Div {
}
----

== Styling Polymer Templates

Since Polymer templates are web components, their template contents end up in Shadow DOM.
By design, Shadow DOM defines a local style scope, isolated from global styles.

Scoped styles, which are specific to a single template, can be added directly
to the `<style>` tag inside the template getter.

.frontend/src/my-view.js
[source,js]
----
import { PolymerElement } from
        '@polymer/polymer/polymer-element.js';
import { html } from
        '@polymer/polymer/lib/utils/html-tag.js';

class MyView extends PolymerElement {
  static get template() {
    return html`
      <style>
        :host {
          /* Styles for the `<my-view>` hosting element */
          display: block;
        }

        .my-view-title {
          font-weight: bold;
          border-bottom: 1px solid gray;
        }
      </style>
      <div class="my-view-title">My view title</div>
    `;
  }

  static get is() {
    return 'my-view';
  }
}
customElements.define(MyView.is, MyView);
----


== Using Custom CSS Properties

One of the needs for theming is to share common style values, such as sizes, colors, etc, between pieces of the application.
This could be achieved using custom CSS properties, which is a special syntax for assigning and referencing CSS variables.
Custom CSS properties are inherited, their values cross Shadow DOM boundaries.
Polymer templates can reuse values defined by global styles, as well as override them.

Use global styles for `html` element to define a global custom CSS property:

.frontend/styles/shared-styles.css
[source,css]
----
html {
  /* Example global custom CSS property definition */
  --my-theme-color: brown;
}
----

For referencing your custom CSS property, use ```var(--my-property)``` syntax. For example, in your Polymer template styles:

.frontend/styles/my-view.css
[source,css]
----
.my-view-title {
  /* Example referencing custom CSS property */
  color: var(--my-theme-color);
}
----

== Using Style Modules

Style modules allow sharing the same stylesheet between multiple Polymer templates and global styles.

In order to import it in the application as a module, you need to provide an unique name for the `id`
attribute in the `@CssImport` annotation

.frontend/styles/common-styles.css
[source,css]
----
/* Example style module */
.my-outline-style {
  outline: 1px solid green;
}
----

.MyApplication.java
[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/common-styles.css",
           id = "common-styles")
public class MyApplication extends Div {
}
----

Then you can re-use it when importing other style files by providing the `include` attribute.

.frontend/styles/specific-styles.css
[source,css]
----
/* Example style */
.my-border-style {
  border: 2px solid grey;
}
----


.MyApplication.java
[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/specific-styles.css",
           include = "common-styles")
public class MyApplication extends Div {
}
----

If you need to style your templates directly in the client modules, you can define and
import modules by using JavaScript:

.frontend/styles/common-styles.js
[source,js]
----
import styles from './common-styles.css'
const $_documentContainer = document
        .createElement('template');
$_documentContainer.innerHTML = `
<dom-module id="common-styles">
  <template><style>${styles}</style></template>
</dom-module>`;
document.head.appendChild($_documentContainer.content);
----

.frontend/src/my-view.js
[source,js]
----
import { PolymerElement } from
        '@polymer/polymer/polymer-element.js';
import { html } from
        '@polymer/polymer/lib/utils/html-tag.js';
import '../styles/common-styles.js'

class MyView extends PolymerElement {
  static get template() {
    return html`
      <style include="common-styles">
        .my-border-style {
          border: 2px solid grey;
        }
      </style>

      <div class="my-view-title">My view title</div>
    `;
  }
  static get is() {
    return 'my-view';
  }
}
customElements.define(MyView.is, MyView);
----


NOTE: Use a space-separated list of style module ids to include multiple style modules into a single scope: ```<style include="shared-styles other-shared-styles"></style>```.

Style modules can also be included in global styles:

.MyApplication.java
[source,java]
----
@Route(value = "")
@CssImport(value = "./styles/shared-styles.css",
           include = "common-styles")
public class MyApplication extends Div {
}
----
