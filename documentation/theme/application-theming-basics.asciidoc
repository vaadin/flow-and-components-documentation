---
title: Application Theming Basics
order: 3
layout: page
---

= Application Theming Basics

Theming ensures that an application has a consistent and professional look and feel throughout. 

The content in this section focuses on theming a single application, that is, specifying styles that apply to one application. 

[NOTE]
If you want to share styles across multiple applications, the best practice is to create a dedicated theming module that can be shared as a dependency by multiple applications. 

== Application Theming Approaches

Most developers use a prebuilt Vaadin theme, such as https://vaadin.com/themes/lumo[Lumo] or https://vaadin.com/themes/material[Material], as the starting point to customize styling in their application. 

[NOTE]
The Material theme is fully compliant with Googleâ€™s https://material.io/[Material Design guidelines].

When starting with a prebuilt theme, you can follow either of the following approaches: 

. Use the default Lumo theme and only add styling to customize the shadow DOM of specific components. 
** Specifically, this means you:
*** Do not use the `@Theme` annotation. The Lumo theme is used by default (as long as it exists in your classpath). For example, when a `vaadin-button` component is rendered, the corresponding Lumo file is loaded.
*** Import only component-specific theme modules to style the shadow DOM of the components you want to customize. 
** *Advantages*: This is the fastest and simplest approach.  
+
[NOTE]
Lumo only loads the styles/themes required for the components that you use.

. Use a custom theme class. 
** Specifically, this means you:
*** Use the `@Theme` annotation to specify your custom theme class, for example `MyTheme.class`. 
*** In your custom theme class, you define imports for global files and the path from which to load the component styles. The imports are replacements for Lumo implementations for Vaadin components.

** *Advantages*: 
*** You can select and customize only the Lumo styles that need to load for each component. This reduces the number of styles loaded and gives you more control. 
*** You can achieve better encapsulation of the custom component stying.
** *Disadvantages*: It is necessary to create a file for every Vaadin component that you want the custom theme class to support. 

== Theming File Types and Storage

You can theme your application with CSS. However, to theme Polymer Web Components, you need to instruct Vaadin to import the styles using the @CssImport annotation.

[NOTE]
In addition to the `@CssImport` annotation, you can use the classic `@StyleSheet` annotation for files that do not need to be imported as ES6 modules. These files are loaded dynamically using the `<style>` tag (instead of being added to the application bundle). However, styles loaded in this way cannot target the internals of Polymer Web Components.

We recommend that you name your application-wide styles, `shared-styles.css`, and store them in the `/frontend/styles` folder (full path: `/frontend/styles/shared-styles.css`). 

*Example*: Using the @CssImport` annotation to import `shared-styles.html`. 
[source,java]
----
@CssImport("./styles/shared-styles.css")
@Viewport("width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes")
public class MainLayout extends Div
         implements RouterLayout {
}
----

`shared-styles.css` should typically contain all global and view-specific theming for your application. See <<theming-crash-course#,Theming Web Components>> for more about the expected contents.

For custom components, you can add component-specific styling to the `template` block in the component's `.js` file. See <<theming-crash-course#,Theming Web Components>> for an example of this.
