---
title: Application Theming Basics
order: 3
layout: page
---

= Application Theming Basics

Theming is an important part of every web application.
It provides a website with a consistent appearance in all the views, providing the
feeling of uniformity and professionality.

Application specific theming specifies styles that only affect one application.
Whenever you have styles that are shared across multiple applications,
you should make the theming as a separate module and resource that can be shared as a dependency for multiple applications.
This chapter focuses only on theming a single application.

== Application Theme - Approaches

Most Vaadin developers style their applications on top of a predefined theme, such as *Lumo*.
Vaadin provides Lumo as a default theme for Vaadin applications.
This theme is loaded automatically, if no `@Theme` or `@NoTheme` annotation is specified.

Another alternative is to base your custom themes on top of other themes, such as *Material theme*.

[NOTE]
Vaadin Material is a complete theme for Vaadin components, inspired by Googleâ€™s Material
Design guidelines.

Vaadin developers follow 2 approaches:

. *Not using the @Theme annotation, Lumo as default:*
In this approach, theme modules are imported for the component which shadow dom
you want to customize. When the component, e.g. vaadin-button, is rendered, the corresponding
Lumo file will be loaded on top.

. *Using the @Theme annotation to load your own theme class that uses specific Lumo modules:*
This approach uses the `@Theme` annotation to switch to a custom theme class,
e.g. `MyTheme.class`. In that class, imports are defined for global files
(i.e. your Lumo variable overrides, global css, ...), and the path from which to load the component styles.


The last approach has the disadvantage that it is necessary to create a file for every single Vaadin component
that you want to be supported by the custom theme (MyTheme.class), and importing the Lumo theme for the component from there.
In this approach, the existing Lumo implementation for that Vaadin component is replaced
with the new one (new theme).

=== Which approach is better?

Although using Lumo as a default application theme is more convenient and faster,
the second option (Use the `@Theme` annotation to switch to your own theme class, e.g. `MyTheme.class`)
allows to select the Lumo styles/themes that you want to be loaded for each component,
reducing the number of styles loaded and giving more control. It also provides a better encapsulation
of the custom themes with the components.

Option 2 is recommended for full-fledged custom themes.

[NOTE]
Lumo only loads the styles/themes required for the components that you use.

== Application Theme - What and Where?

The application can be themed by using CSS, but to be able to theme Polymer web components,
you should put the CSS content in a `.js` file that needs to be imported using ES6 `import` statement,
and then wrapped with the appropriate HTML tags.

The recommended convention is to always put the application wide shared styles inside the
`frontend` folder to subdirectory `styles` with the file name `shared-styles.js`,
thus the full path should be `frontend/styles/shared-styles.js`.

This file needs to be imported by using the `@JsModule` annotation in the application.

[NOTE]
Use the `@StyleSheet` annotation for those files that do not need to be imported as ES6 modules.

.Sample of a importing the application theme file
[source,java]
----
@JsModule("./styles/shared-styles.js")
@Viewport("width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes")
public class MainLayout extends Div implements RouterLayout {
}
----

[NOTE]
As seen on the <<using-component-themes#,Using Component Themes>> tutorial, the Lumo theme is used by
default if it is available in the classpath and no other `@Theme` is defined.

The contents of the `shared-styles.js` are discussed further in <<theming-crash-course#,the next chapter>>.
The recommendation is that the file contains all the application global and view specific theming.

For any custom components in your application, you might have the styling that only applies to the component, inside its `.js` file.

There is an example of this in the <<theming-crash-course#,Theming Crash Course>> chapter too.

