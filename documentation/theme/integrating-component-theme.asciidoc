---
title: Integrating Your Own Component Theme
order: 5
layout: page
---

= Integrating Your Own Component Theme

To create your own component theme to be used with the wrapped Vaadin components
you need to create a theme class that informs Vaadin how to translate the base un-themed
component html import to use your themed version.

The `getBaseUrl` should return the part of the import that can be used to determine if
it is an import that could be changed to a theme import. (for Vaadin components that is `/src/`)

The `getThemeUrl` should return what the base url part should be changed to to get the
correct theme import. (for Vaadin components that `/theme/[themeName]` is used)

[source,java]
----
@JsModule("@vaadin/vaadin-lumo-styles/color.js")
public class MyTheme implements AbstractTheme {
    @Override
    public String getBaseUrl() {
        return "/src/";
    }

    @Override
    public String getThemeUrl() {
        return "/theme/myTheme/";
    }
}
----

For more control there is `getHeaderInlineContents()` that returns a collection of html
that will be inlined to the BootstrapPage body. For instance, it can be used to add a
custom style to have the correct typography:
[source,java]
----
@Override
public List<String> getHeaderInlineContents() {
    return Collections.singletonList("<custom-style>\n"
      + "<style include=\"lumo-color lumo-typography\">"
      + "</style>\n"
      + "</custom-style>");
}
----

Your theme can also support variants. For instance, Lumo theme supports both light and dark variants.
To add support for variants, you can override the `getHtmlAttributes`  method:
[source,java]
----
@Override
public Map<String, String> getHtmlAttributes(
        String variant) {
    if ("dark".equals(variant)) {
       // the <body> element will have the "theme"
       // attribute set to "dark" when the dark variant
       // is used
       return Collections.singletonMap("theme", "dark");
    }
    return Collections.emptyMap();
}
----

Then you need to create themed `.js` files for all the vaadin elements in the `/frontend/theme/myTheme/` folder.

For instance, to modify the `vaadin-button` component by adding some custom rules to the original Lumo ones, your themed file for button might look like this:

.frontend/theme/myTheme/vaadin-button.js
[source,js]
----
// import the non-themed component
import '@vaadin/vaadin-button/src/vaadin-button.js';
// optional: reuse lumo styles for button
import '@vaadin/vaadin-button/theme/lumo/vaadin-button-styles.js';

import { html } from
        '@polymer/polymer/lib/utils/html-tag.js';

// set your custom CSS rules for button.
// Use an unique id for the dom-module.
const $_documentContainer = html`
  <dom-module id="my-lumo-button"
              theme-for="vaadin-button">
    <template>
      <style>
        :host {
          border-radius: 0;
        }
      </style>
    </template>
  </dom-module>`;

document.head.appendChild($_documentContainer.content);
----

[NOTE]
Be aware that you need to provide theme files for all the components used in your application, otherwise they will be displayed without any style. This works in this way because all vaadin components are imported by using the `/src/` path, and it is responsability of the theme class to replace the `getBaseUrl()` pattern by the appropriate path to the themed elements as it is returned in the `getThemeUrl()`.

== Creating Your Own Component Theme

The theming for the Vaadin components is built using `Vaadin.ThemableMixin`.
See link:https://github.com/vaadin/vaadin-themable-mixin/wiki[vaadin-themable-mixin wiki] to learn how theming of Vaadin components is done.
