---
title: Using Component Themes
order: 2
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Using Component Themes

A theme class automatically handles two things:

* It tells Vaadin what theme to use for the Vaadin components and where the files can be found.
* It specifies a set of shared styles, like fonts etc., that are loaded to the initial page by Vaadin.

== Theme Resolving Order

Vaadin applies the following logic, in the following resolving order, to determine which theme to use in your application:

. If the `@Theme` annotation is found at the <<../routing/tutorial-routing-annotation#,root navigation>> level, the theme set in the annotation is used. 
. If the `@NoTheme` annotation is found at the root navigation level, theming is disabled. 
. If the `com.vaadin.flow.theme.lumo.Lumo` class (from the `vaadin-lumo-theme` project) is available in the classpath, the https://vaadin.com/themes/lumo[Lumo] theme is used.  

When a match is found, resolving stops. If none of the conditions are met, no theme is used. This means that projects that use the `vaadin-core` dependency, use the Lumo theme by default, unless they declare an `@Theme` or `@NoTheme`. 

== Applying a Theme

To apply a theme, add the `@Theme` annotation to your root-navigation-level class, or to the `RouterLayout` component defined in its `@Route` annotation.

[NOTE]
Your application can only have one `@Theme` annotation. Vaadin does not support different `@Theme` values for each route in your application. 

The following examples include various theming scenarios.

*Example*: Specifying the `Lumo.class` in the `@Theme` annotation. 

[source,java]
----
@Route(value = "")
@Theme(value = Lumo.class)
public class LumoApplication extends Div {
}
----

*Example*: Not using the `@Theme` annotation (because `Lumo.class` is in the classpath). 
[source,java]
----
@Route(value = "")
public class DefaultLumoApplication extends Div {
}
----

*Example*: Using the `@JsModule` annotation to import custom component styles and specifying a custom theme in the `@Theme` annotation.
[source,java]
----
@JsModule("@vaadin/vaadin-lumo-styles/color.js")
public class MyTheme implements AbstractTheme {
    @Override
    public String getBaseUrl() {
        return "/src/";
    }

    @Override
    public String getThemeUrl() {
        return "/theme/myTheme/";
    }
}


@Route(value = "")
@Theme(MyTheme.class)
public class MaterialApplication extends Div {
}
----

*Example*: Specifying a custom theme in the `@Theme` annotation in a `RouterLayout`.

[source,java]
----
@Theme(MyTheme.class)
public class MainLayout extends Div implements RouterLayout {
}

@Route(value = "", layout = MainLayout.class)
public class HomeView extends Div {
}

@Route(value = "blog", layout = MainLayout.class)
public class BlogPost extends Div {
}
----

*Example*: Using the `@NoTheme` annotation to disable theming.

[source,java]
----
@Route(value = "")
@NoTheme
public class UnThemedApplication extends Div {
}
----

[NOTE]
If the `@Theme` annotation is not on a `@Route` component or a top-level `RouterLayout`, an exception is thrown on startup.

== Using Theme Variants

A variant is a special string value that can be used as the `theme` attribute value of any custom element.
When the corresponding theme is enabled, this values change the visual appearance of the component.

*Example*: HTML representation of a variant.
[source,html]
----
<vaadin-button theme="contrast primary">
    Themed button
</vaadin-button>
----

You can apply multiple variants to the same element by separating them with white spaces. 

Themes can have different types of variants: 

* *Global* variants apply globally throughout the application.
* *Component* variants apply only to specific components. 

The Lumo and Material themes come with two global variants: light (default) and dark. 

== Using and Customizing Vaadin Themes

Vaadin provides two ready-made component themes: _Lumo_ (main theme for all Vaadin components) and _Material_.
Both themes give you with a full set of building blocks to build a modern-looking web application that work well on desktop and mobile.  
Both themes are a part of the `vaadin-core` dependency. To use the ready-made Vaadin themes:

* *Lumo*: Either explicitly declare it, using `@Theme(Lumo.class)`, on the navigation target, or omit it completely, because the default behavior is to use it, if it is in the classpath.
* *Material*: Explicitly declare it, using `@Theme(Material.class)`, on the navigation target.

Both themes provide customization points for Vaadin components. These allow you to fine tune component appearance and UX. You can customize using CSS custom properties. See the the *Customization* section of the https://vaadin.com/themes/lumo[Lumo] and https://vaadin.com/themes/material[Material] documentation for more.

Theming for Vaadin components is built using `Vaadin.ThemableMixin`. See the https://github.com/vaadin/vaadin-themable-mixin#readme[vaadin-themable-mixin] documentation for more. 

=== Defining Global Theme Variants

You can set a global theme variant by defining it on the `@Theme` annotation.

*Example*: Setting the `large` global theme variant for the `MyTheme.class`. 
[source,java]
----
@Route(value = "")
@Theme(value = MyTheme.class, variant = "large")
public class LargeThemedApplication extends Div {
}
----

Theme variants are not used by the Lumo or Material themes, by default. You can set the dark variant for either theme by defining it in the `@Theme` annotation.

*Example*: Setting the dark variant for the Lumo theme. 

[source,java]
----
@Route(value = "")
@Theme(value = Lumo.class, variant = Lumo.DARK)
public class DarkApplication extends Div {
}
----

*Example*: Setting the dark variant for the Material theme. 

[source,java]
----
@Route(value = "")
@Theme(value = Material.class, variant = Material.DARK)
public class DarkMaterialApplication extends Div {
}
----

=== Defining Component Theme Variants

Variants are also available for individual components. Each theme provides a predefined set of variants that you can use. There are different variants for different components, and some components have no variants. 

Available component variants are applied using the `Element` API to set the variant as the `theme` attribute.

Variants are converted to their equivalent HTML value. For example, the `ButtonVariant.LUMO_PRIMARY.getVariantName()` method is used to convert a button variant to HTML. After conversion, the HTML representation is added as the `theme` attribute value. 

All components that implement the `HasTheme` interface have an `addThemeVariants` method and can use the API.

The following three examples all achieve the same result. They demonstrate different ways to add `contrast` and `primary` Lumo theme variants to the `theme` attribute value of the button component:

* *Example*: Using the `addThemeVariants` method to add theme variants for the `Button` component. 
+
[source,java]
----
Button button = new Button("Themed button");
        button.addThemeVariants(ButtonVariant.LUMO_PRIMARY,
                ButtonVariant.LUMO_CONTRAST);
----


* *Example*: Using the `getThemeNames().addAll` method to add an array of theme variants for the `Button` component. 
+
[source,java]
----
Button button = new Button("Themed button");
button.getThemeNames().addAll(Arrays.asList("contrast", "primary"));
----
* *Example*: Adding variants to the `theme` attribute of the `Button` component by manipulating the `theme` attribute.
+
[source,java]
----
Button button = new Button("Themed button");
String themeAttributeName = "theme";
String oldValue = button.getElement().getAttribute(themeAttributeName);
String variantsToAdd = "contrast primary";
button.getElement().setAttribute(themeAttributeName,
        oldValue == null || oldValue.isEmpty() ? variantsToAdd
                : ' ' + variantsToAdd);
----
** This example provides more flexibility. It allows you to manipulate the value of the `theme` attribute directly. This is useful when adding non-standard theme variants to a component.

[NOTE]
Component theme variants only work if the corresponding theme is set. If a different theme or no theme is set, variants in the `theme` attribute of the have no effect on the look and feel of the component.

=== Using Vaadin Theme Presets

The Lumo theme include a compact preset that defines values for sizing and spacing properties. The preset reduces the visual space required by components and allows you to fit more content on the screen. You can use the `@JsModule` annotation to import the compact present. 

*Example*: Using the `@JsModule` annotation to import the compact preset on a `RouterLayout`.
[source,java]
----
@JsModule("@vaadin/vaadin-lumo-styles/presets/compact.js")
@Theme(Lumo.class)
public class CompactMainLayout extends Div implements RouterLayout {
}
----
