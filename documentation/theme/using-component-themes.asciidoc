---
title: Using Component Themes
order: 2
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Using Component Themes

Vaadin uses the following logic to determine which theme to use for the application:

1. If a `@Theme` annotation is found at the root navigation level, the theme defined by it is used;
2. If a `@NoTheme` annotation is found at the root navigation level, theming is disabled;
3. If the `com.vaadin.flow.theme.lumo.Lumo` class is available in the classpath (which comes from the `vaadin-lumo-theme` project), then it is used as the default theme;

If none the previous conditions are met, no theme is used.

In summary - if your project uses the `vaadin-core` dependency, and doesn't declare any `@Theme` or `@NoTheme`, the Lumo theme will be used by default.

To use any custom themes, just add `@Theme` annotation to your root navigation level class, or to the `RouterLayout` component defined in its `@Route`.

You must use an unique `@Theme` for the whole application. Vaadin does not support different `@Theme` values per route in your application, and will throw an exception.

.Sample specifying Lumo themed components
[source,java]
----
@Route(value = "")
@Theme(value = Lumo.class)
public class LumoApplication extends Div {
}
----

.Sample setup to get Lumo themed components if the 'Lumo.class' is in the 'classpath'.
[source,java]
----
@Route(value = "")
public class DefaultLumoApplication extends Div {
}
----

.Sample setup to get Custom themed components
[source,java]
----
@JsModule("@vaadin/vaadin-lumo-styles/color.js")
public class MyTheme implements AbstractTheme {
    @Override
    public String getBaseUrl() {
        return "/src/";
    }

    @Override
    public String getThemeUrl() {
        return "/theme/myTheme/";
    }
}


@Route(value = "")
@Theme(MyTheme.class)
public class MaterialApplication extends Div {
}
----

.Sample setup using a custom '@Theme' in 'RouterLayout'
[source,java]
----
@Theme(MyTheme.class)
public class MainLayout extends Div
        implements RouterLayout {
}

@Route(value = "", layout = MainLayout.class)
public class HomeView extends Div {
}

@Route(value = "blog", layout = MainLayout.class)
public class BlogPost extends Div {
}
----

.Sample setup for disabling theming
[source,java]
----
@Route(value = "")
@NoTheme
public class UnThemedApplication extends Div {
}
----

The theme class automatically handles two things:

* It tells Vaadin what theme it should use for the Vaadin Components and where the files can be found
* It specifies a set of shared styles like fonts etc. that will be automatically loaded to the initial page by Vaadin for the theme.

[NOTE]
If the Theme annotation is not on a `@Route` Component or a top `RouterLayout` an exception will be thrown on startup.

== Theme variants

A variant is a special string value that can be placed in the `theme` attribute value of any custom element.
When the corresponding theme is enabled, those values change the components' visual appearance.

Multiple variants can be applied to the element, if specified separated by whitespace:

.Html representation of the variants
[source,html]
----
<vaadin-button theme="contrast primary">
    Themed button
</vaadin-button>
----

There are two types of variants: theme variants, specific for the current theme and working globally,
and component variants, specific to the current component and theme.
Different themes and different components may have different sets of variants (or none).

== Available Themes and Customizations

There are two ready-made component themes in Vaadin: _Lumo_ (which is the main theme for all Vaadin components) and _Material._
Both themes give you a full set of building blocks to build a modern-looking web application that works just as well on desktop as on mobile.

The Vaadin integration for both Lumo and Material themes are a part of the `vaadin-core` dependency. The previous chapter shows how to take those to use.
In order to use Lumo theme, you can explicitly declare `@Theme(Lumo.class)` on the navigation target or omit it completely, since the default behavior is to use Lumo if available in the classpath.
If you want to use Material theme, explicitly declare `@Theme(Material.class)` on the navigation target.

Both themes provide some customization points for the components, that allow you to fine tune the look and provide a better UX.
It can be customized by using CSS custom properties, see link:https://vaadin.com/themes/lumo[the Lumo documentation]
and link:https://vaadin.com/themes/material[the Material documentation] for more information.
The theming for the Vaadin components is built using `Vaadin.ThemableMixin`.
See link:https://github.com/vaadin/vaadin-themable-mixin/wiki[vaadin-themable-mixin wiki] to learn how theming of Vaadin components is done.

=== Using Vaadin theme variants

In Vaadin, you can set a theme variant by defining it on the `@Theme` annotation:
[source,java]
----
@Route(value = "")
@Theme(value = MyTheme.class, variant = "large")
public class LargeThemedApplication extends Div {
}
----

Lumo and Material themes come with two variants: light (the default) and dark.

By default, no theme variants are used. You can use the dark variant by using:

.Setting the dark variant for Lumo
[source,java]
----
@Route(value = "")
@Theme(value = Lumo.class, variant = Lumo.DARK)
public class DarkApplication extends Div {
}
----
and the same can be done for Material theme:

.Setting the dark variant for Material
[source,java]
----
@Route(value = "")
@Theme(value = Material.class, variant = Material.DARK)
public class DarkMaterialApplication extends Div {
}
----

Individual components have also variants available.
Component variants are applied by using the element API to set the variant as the `theme` attribute.
For example, to create a Button with https://vaadin.com/components/vaadin-button/html-examples/button-lumo-theme-demos[increased legibility],
you can use `addThemeVariants` method:

.Adding theme variants for the component
[source,java]
----
Button button = new Button("Themed button");
button.addThemeVariants(ButtonVariant.LUMO_PRIMARY,
        ButtonVariant.LUMO_CONTRAST);
----

For each component, there is a predefined set of variants that you can use.
Those variants are theme-specific and different for each of the component (some may have none).
For each component that has variants, Vaadin provides an api similar to the one in the example above to use it.

When added, variants are converted to their html values
(for a button variant, `ButtonVariant.LUMO_PRIMARY.getVariantName()` is used)
and those representations are added to the `theme` attribute values.

If the component implements `HasTheme` interface (which is true for every component that has `addThemeVariants` method),
then the following API can be used:

.Adding theme values for the component that implements 'HasTheme' interface
[source,java]
----
Button button = new Button("Themed button");
button.getThemeNames().addAll(
        Arrays.asList("contrast", "primary"));
----

If you want more flexibility (which may come in handy when adding non-standard theme variants to the component),
you can manipulate the value of the `theme` attribute directly:

.Adding variants to the 'theme' attribute of the component
[source,java]
----
Button button = new Button("Themed button");
String themeAttributeName = "theme";
String oldValue = button.getElement()
        .getAttribute(themeAttributeName);
String variantsToAdd = "contrast primary";
button.getElement().setAttribute(themeAttributeName,
        oldValue == null || oldValue.isEmpty() ?
            variantsToAdd
            : ' ' + variantsToAdd);
----

Each of the three examples above do the very same thing in the end:
add `contrast` and `primary` Lumo Theme variants to the `theme` attribute value of the button component.

For looking up all available component variants, https://vaadin.com/components/browse[see the component HTML examples]
and look under the _Lumo Theme_ tab for examples of the variants.

[NOTE]
Theme variants for components work only when the corresponding theme is enabled.
If a different theme or no theme is enabled, setting theme variants for a theme that is not enabled does not cause any actual changes for the component's look and feel.

As was mentioned earlier, if no explicit theme configuration is done and `vaadin-lumo-theme`
dependency is present in the classpath, Lumo theme is used by default.

=== Using Vaadin theme presets

The compact preset for Lumo defines values for the sizing and spacing properties to reduce the visual space required by components to better fit a large amount of content on the screen. Annotate the main layout as follows to enable the compact preset:
[source,java]
----
@JsModule("frontend://bower_components/" +
          "vaadin-lumo-styles/presets/compact.js")
@Theme(Lumo.class)
public class CompactMainLayout extends Div
        implements RouterLayout {
}
----
