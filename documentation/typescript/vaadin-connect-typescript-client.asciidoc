---
title: Vaadin Connect Default Client
order: 130
layout: page
---

= Vaadin Connect Default Client

== Vaadin Connect client

Vaadin Connect consists of two parts: a backend and a client ones.
The client part is represented by a `@vaadin/flow-frontend/Connect` library that is able to support the features the backend part provides.

One of the main public entities of the library is the `ConnectClient` object, that provides a seamless way to communicate with the
Vaadin Connect services on a backend side of the application selected.

== Default client

The default client is the module that gets generated by Vaadin Connect maven plugin for a particular project.

When generated, the module contains the `ConnectClient` implementation that is set up to communicate with the
backend side of the project.

Along with the default client, the plugin is capable of generating the modules for each Vaadin Connect service defined in the backend part.
Those modules use the default client to communicate with the backend also.

== Usage example

Consider Vaadin Connect backend that is started on `/customEndpoint` endpoint and has a single service with name `SingleService`
and a method `customMethod` requiring a `number` parameter to be specified.

We would like to access this method from the client part.
Depending on how many generated files are present, one of the approaches below can be used.
As the only prerequisite for any of the approaches below, `@vaadin/flow-frontend/Connect` TypeScript library is required to be installed in the
client side project.

=== Generated module using the generated client

When all the Vaadin Connect plugin generation goals are used, the service method can be called via the generated module method:

.Using generated module
[source, typescript]
[[generated-module]]
----
import * as singleService from './generated/SingleService';

(async() => {
  await singleService.customMethod(4);
})();
----

=== Generated default client

If only the default client is generated, it can be used to access the Vaadin Connect service the following way:

.Using generated client
[source, typescript]
[[generated-client]]
----
import client from './generated/connect-client.default';

(async() => {
  await client.call('SingleService', 'customMethod', {number: 4});
});
----

=== Client library

Client library usage requires an extra step where we specify the endpoint of the server to send the requests to:

.Using client library
[source, typescript]
[[client-library]]
----
import {ConnectClient} from '@vaadin/flow-frontend/Connect';
const client = new ConnectClient({endpoint: '/customEndpoint'});

(async() => {
  await client.call('SingleService', 'customMethod', {number: 4});
});
----
