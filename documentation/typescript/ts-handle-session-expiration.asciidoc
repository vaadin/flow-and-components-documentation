---
title: "Appendix: Handle session expiration in TypeScript"
order: 141
layout: page
---

= Appendix: Handle session expiration in TypeScript

Vaadin provides a built-in <<client-middleware#, middleware>> `InvalidSessionMiddleWare` that you can use to detect session expiration, for example, to show a login view to the user.
== How to use the InvalidSessionMiddleWare?

The `InvalidSessionMiddleWare` requires a `OnInvalidSessionCallback` as a constructor parameter. The `OnInvalidSessionCallback` is a function that takes no parameters and should return a promise of `LoginResult`. `LoginResult` contains the metadata of a login result, including:
- error: indicating if the login attempt has failed or not.
- token: in case of success login, it is the CSRF token, which can be extracted from the index.html page. 
- errorTitle: a short text of the login error.
- errorMessage: a more detailed explanation of the login error.


Here is an example of using the `InvalidSessionMiddleWare`.

.connect-client.ts
[source, typescript]
----
import {ConnectClient, InvalidSessionMiddleware} from '@vaadin/flow-frontend';
const client = new ConnectClient({prefix: 'connect', middlewares: [new InvalidSessionMiddleware(
    async () => {
        const {LoginView} = await import ('./components/login-view/login-view');
        return new LoginView().showOverlay();
    }
)]});
----
.login-view.ts
[source, typescript]
----
@customElement('login-view')
export class LoginView extends LitElement {

  @property({type: Boolean})
  private error = false;

  @property({type: Boolean})
  private open = true;

  private onSuccess: (result:LoginResult) => void;

  render() {
    return html`
      <vaadin-login-overlay
        ?opened="${this.open}" 
        .error=${this.error}
        @login="${this.login}">    
      </vaadin-login-overlay>
    `;
  }

  async login(event: CustomEvent): Promise<LoginResult> {
    this.error = false;
    // use the Vaadin provided login helper method to obtain the LoginResult
    const result = await login(event.detail.username, event.detail.password);
    this.error = result.error;
  
    if (!result.error) {
      this.onSuccess(result);
    }

    return result;
  }

  // Show the login view as an overlay, when the session has
  // expired, and a user tries to invoke an endpoint call.
  // Close the login overly once the login attempt has succeeded.
  async showOverlay(): Promise<LoginResult>{
    return new Promise(resolve => {
      this.onSuccess = (result: LoginResult) => {
        this.remove();
        resolve(result);
      }
      document.body.append(this);
    });
  }
}
----
