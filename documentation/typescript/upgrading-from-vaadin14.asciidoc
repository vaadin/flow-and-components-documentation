---
title: Upgrading from Vaadin 14
order: 20
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Upgrading from Vaadin 14

We recommend the following steps to upgrade an existing Vaadin 14 application to Vaadin 15, and then to add a TypeScript view to it.

[TIP]
You can use JavaScript instead of TypeScript if you prefer.
JavaScript is supported as well: any `.ts` file can be replaced with a `.js` alternative.

* change the Vaadin version in `pom.xml` (<<upgrading-from-vaadin14#step-1,step 1>>)
* (for Spring-based apps) use a compatible version of Spring  (<<upgrading-from-vaadin14#step-1b,step 1b>>)
* build the app to see if it uses any APIs deprecated in Vaadin 15
* create a custom index page for client-side bootstrapping  (<<upgrading-from-vaadin14#step-2,step 2>>)
* add a dependency to `lit-element` to create UIs in TypeScript (<<upgrading-from-vaadin14#step-3,step 3>>)
* add a TypeScript page layout (<<upgrading-from-vaadin14#step-4,step 4>>)
* move the existing Java views into the TypeScript page layout (<<upgrading-from-vaadin14#step-5,step 5>>)
* add a TypeScript view (<<upgrading-from-vaadin14#step-6,step 6>>)

_If you are starting a new app with Vaadin 15, please check the <<quick-start-guide#,Quick Start Guide>>._


== Step 1 - Make your project depend on Vaadin 15 [[step-1]]

Edit the `pom.xml` file and change the versions of the Vaadin platform dependency and the Vaadin Maven plugin to Vaadin 15:

.pom.xml
[source,xml]
----
<properties>
    ...
    <!-- See the latest version at
         https://github.com/vaadin/platform/releases -->
    <vaadin.version>15.0.0.alpha11</vaadin.version>
    ...
</properties>

<dependencyManagement>
    <dependencies>
        <!-- add the Vaadin platform to the classpath -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>${vaadin.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<build>
    <plugins>
        <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <version>${vaadin.version}</version>
            ...
        </plugin>
    </plugins>
</build>
----

[NOTE]
Vaadin 15 includes several breaking API changes, mainly related to application bootstrapping and the bootstrap page configuration.
If you see Java deprecation warnings during the build, check the <<migrating-from-vaadin-10-14,Migration>> section in the *Client-side bootstrapping page*.


== Step 1b - Update Spring (for Spring-based projects) [[step-1b]]

Vaadin works with <<../spring/tutorial-spring-basic#,Spring Boot>> or <<../spring/tutorial-spring-basic-mvc#,Spring MVC>>.
Vaadin 15 is compatible with Spring 5.2.0 or newer, and Spring Boot 2.2.0 or newer.
If your application uses an older version of Spring, please update it to a compatible version:

.pom.xml
[source,xml]
----
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.0.RELEASE</version>
</parent>
----


== Step 2 - Create `frontend/index.html` and `frontend/index.ts` [[step-2]]

[NOTE]
These files are necessary only if you want to add <<creating-routes#,TypeScript views>> to the app (new in Vaadin 15).
If you do not plan adding any TypeScript views, migration from Vaadin 14 to Vaadin 15 is done at this point.

You can create the `frontend/index.html` and `frontend/index.ts` files from scratch, but an easier way is to let Vaadin to generate them.
Run `mvn package` in the console, copy the generated files into to the `./frontend` folder, and customize them as described in the further steps.

[source, bash]
----
mvn package
cp target/index.html target/index.ts frontend
----

[NOTE]
To dynamically modify the `index.html` content, you need to replace the deprecated `PageConfigurator` interface with the `AppShellConfigurator` as described in the <<../advanced/tutorial-modifying-the-bootstrap-page#application-shell-configurator,Application Shell Configurator>> section.

== Step 3 - Install link:https://lit-element.polymer-project.org/[LitElement^] [[step-3]]

This step is needed if you want to create TypeScript views using LitElement as a helper library.
There are other ways to create UI in TypeScript, but they are not covered in this guide.

Run in the console, in the project folder:
[source,bash]
----
npx pnpm install --save lit-element
----


== Step 4 - Add a TypeScript page layout [[step-4]]

This step is needed if you want to create a page layout common for several TypeScript views.
This guide shows how to create a layout with a navigation menu.

[NOTE]
Vaadin 15 allows seamless combinations of TypeScript and Java views, but it has a limitation.
Java views may be added freely as children into a TypeScript parent layout, but not the opposite.
TypeScript views cannot be added as children into a Java `RouterLayout` class.
If you need to add a TypeScript view into the same parent layout with existing Java views, then the layout has to be implemented in TypeScript.

.frontend/main-layout.ts
[source, typescript]
----
import {css, customElement, html, LitElement} from 'lit-element';

@customElement('main-layout')
export class MainLayoutElement extends LitElement {

  static get styles() {
    return css`
      :host {
        display: block;
        height: 100%;
      }
    `;
  }

  render() {
    return html`
      <a href="client-view">Client View</a>
      <a href="server-view">Server View</a>
      <slot></slot>
     `;
  }
}
----

Add the component to the router configuration:

.frontend/index.ts
[source, typescript]
----
import './main-layout';
...

const routes = [
    {
    path: '/',
    component: 'main-layout',
    children: [
      // add you client-side views here, e.g.
      // {path: 'client-view', component: 'my-client-view'},

      // pass all unmatched paths to server-side
      ...serverSideRoutes
    ]
  }
];
----

[NOTE]
====
The main layout created in this step is a minimal example. See the <<main-layout#, Main Layout in TypeScript>> article for more examples on typical features, such as creating the layout with navigation menu.
====


== Step 5 - Move the existing Java views into the TypeScript page layout [[step-5]]

This step is needed if you want to display your existing Java views in the same page layout with the new TypeScript views.
In order to move an existing Java view from a parent layout defined in Java into a parent layout defined in TypeScript, you need to change the `@Route()` annotation on the Java view and remove the `layout` property from it:

For example, for a Java view defined in a `DashboardView` class the change would look like this:

.DashboardView.java
[source, java]
----
@Route(value = "dashboard"/*, layout = MainView.class <-- remove this */)
@RouteAlias(value = ""/*, layout = MainView.class <-- and this */)
public class DashboardView extends Div {
    ...
}
----

== Step 6 - Add a TypeScript view [[step-6]]
Continue with the <<quick-start-guide#step-3,Quick Start Guide - Step 3>> to see how.

== API breaking changes from Vaadin 10-14 [[migrating-from-vaadin-10-14]]
For applications migrated from earlier versions of Vaadin, client-side bootstrapping requires replacing the usages of the V10-14 `BootstrapHandler` APIs with their `IndexHtmlRequestHandler` API counterparts as described in <<../advanced/tutorial-modifying-the-bootstrap-page#IndexHtmlRequestListener-interface, _IndexHtmlRequestListener interface_>> section.

The reason for this API change is that with client-side bootstrapping the initial page HTML generation is separated from loading the Flow client and creating a server-side `UI` instance.

- In Vaadin 10 to 14 these two steps are combined and the `index.html` page includes the code and configuration needed to start the Flow client engine and link the browser page to the server-side `UI` instance.

- In Vaadin 15+ with client-side bootstrapping the `index.html` page includes only the basic HTML markup and links to the TypeScript UI code. When <<creating-routes#,adding routes in TypeScript>>, the `UI` is not guaranteed to be created, thus is optional. It will be only available after the user navigates to a server-side route.

One more thing to pay attention to in Vaadin 15+ is that annotations in the `MainLayout / MainView` class must be moved to a class that implements the `AppShellConfigurator` interface, see <<../advanced/tutorial-modifying-the-bootstrap-page#java-annotations, set annotations to modify Bootstrap page>> for more details.