---
title: Accessing Java Backend in TypeScript
order: 60
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Accessing Java Backend in TypeScript

An API endpoint is a backend method that is exposed for calling from client-side
TypeScript code.

Vaadin endpoint is a class that defines one or more API methods.

Vaadin bridges Java backend endpoints and a TypeScript frontend. It generates
TypeScript clients to call the Java backend in a type-checkable way.

[WARNING]
This feature is experimental and it *will change* before the next Long-Term-Supported Vaadin version.
If you have an idea how to make it more useful for you, please share it on link:https://github.com/vaadin/flow/issues/new/[GitHub^].

== How to create a Vaadin endpoint? [[how-to-create-vaadin-endpoint]]

Annotate any existing class with the `@Endpoint` annotation or create such
class from scratch:

[source,java]
----
import com.vaadin.flow.server.connect.Endpoint;

/**
 * A Vaadin endpoint that counts numbers.
 */
@Endpoint
public class CounterEndpoint {
    /**
     * A method that adds one to the argument.
     */
    public int addOne(int number) {
        return number + 1;
    }
}
----

After that, when the application starts, Vaadin analyzes such classes in order
to be able to process the requests made to such endpoints, and to appropriately
verify user access. Please refer to the <<configuring-security#, Security page>>
for configuring endpoint access.

[WARNING]
You cannot use JavaScript reserved words as Java method's name in an Endpoint, e.g., `delete`, `function`, `var`, etc. Otherwise, you will get a runtime exception.

== TypeScript module

The code we write in TypeScript is the global scope by default. In a project if we have multiple files,
the variables, functions, classes, and interfaces, etc in one file are accessible in all the other files.

It can lead to conflicts/errors in the code.

TypeScript provides module to create a group of related variables, functions, classes, interfaces, etc and
execute within their own scope, not in the global scope. It means that all things declared in a module are
not accessible outside the module.

Using the keyword `export` to create a module and keyword `import` to use another module.
You can create and use a module as the following example.

.City.ts
[source,typescript]
----
// create an interface module
export default interface City {
  name: string;
  country: string;
}
----

.index.ts
[source,typescript]
----
// import and use an interface module
import {City} from './City';
const cityObject = new City("Turku", "Finland");
----

== Import and use TypeScript modules generated from Vaadin Endpoint

There is a generated TypeScript module for every Vaadin endpoint on the backend.
Each module exports all the methods.

You can either import the whole generated module as an endpoint, or import the
methods from the module separately. For instance, the
`CounterEndpoint.ts` could be used as in the following snippets:

.index.ts (import the whole module)
[[index.ts]]
[source,typescript]
----
// Other imports
import * as counterEndpoint from './generated/CounterEndpoint';

// Other code
counterEndpoint.addOne(1).then(result => console.log(result));
----

.index.ts (only import the needed method)
[source,typescript]
----
// Other imports
import {addOne} from './generated/CounterEndpoint';

// Other code
addOne(1).then(result => console.log(result));
----

== TypeScript generation details

The generation is done automatically when the application compiles, and when
the application is running in development mode.

By default, the generated files are located under `{project.basedir}/frontend/generated`.
You can change the folder by providing the path for the generator in the
`generatedFrontendDirectory` property for Vaadin Maven plugin.

Vaadin takes care of type conversion between Java and TypeScript types, for more info
about supported types visit the <<type-conversion#, Type Conversion>> appendix.

== Example generated TypeScript module contents

For example, the generated TypeScript module for the Java endpoint defined in
 <<accessing-backend#how-to-create-vaadin-endpoint,CounterEndpoint.java>> would look like:

[source,typescript]
.CounterEndpoint.ts
----
/**
 * A Vaadin endpoint that counts numbers.
 *
 * This module has been generated from CounterEndpoint.java
 * @module CounterEndpoint
 */

import client from './connect-client.default';

/**
 * A method that adds one to the argument.
 *
 * @param number
 */
export function addOne(number: number): Promise<number> {
  return client.call('CounterEndpoint', 'addOne', {number}, {requireCredentials: true});
}
----

== Code-completion

As you see in `CounterEndpoint.ts`, the Javadoc of `@Endpoint` class
is preserved the generated TypeScript file, and the type definitions are
maintained. This helps code-completion work pretty well in *Visual Studio Code*
and *Intellij IDEA Ultimate Edition*.

.Code-completion in Visual Studio Code
image:codecompletion.gif[Code-completion]
