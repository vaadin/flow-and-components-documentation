---
title: Accessing Java Backend in TypeScript
order: 60
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Accessing Java Backend in TypeScript

An API endpoint is a backend method that is exposed for calling from client-side
TypeScript code.

Vaadin endpoint is a class that defines one or more API methods.

Vaadin bridges Java backend endpoints and a TypeScript frontend. It generates
TypeScript clients to call the Java backend in a type-checkable way.

[WARNING]
This feature is experimental and it *will change* before the next Long-Term-Supported Vaadin version.
If you have an idea how to make it more useful for you, please share it on link:https://github.com/vaadin/flow/issues/new/[GitHub^].

== How to create a Vaadin endpoint? [[how-to-create-vaadin-endpoint]]

Annotate any existing class with the `@Endpoint` annotation or create such
class from scratch:

[source,java]
----
import com.vaadin.flow.server.connect.Endpoint;

/**
 * A Vaadin endpoint that counts numbers.
 */
@Endpoint
public class CounterEndpoint {
    /**
     * A method that adds one to the argument.
     */
    public int addOne(int number) {
        return number + 1;
    }
}
----

After that, when the application starts, Vaadin analyzes such classes in order
to be able to process the requests made to such endpoints.

[IMPORTANT]
====
At the moment, all API endpoints are secured and only available for authenticated users. Pease refer to the <<configuring-security#, Security page>> for configuring access to each endpoint.'
====

Any public method in any Vaadin endpoint can be accessed with the following url:

`http://${base_url}/${prefix}/${endpoint_name}/${method_name}`

Where:

* `${base_url}` — the base url of the application, depends on the framework
used. For instance, for Spring framework, the default one if the application is
started locally, is `http://localhost:8080`.
* `${prefix}` — the url common part that every exposed endpoint has.
By default, `connect` is used, but this can be configured in the application properties.
* `${endpoint_name}` — if not specified explicitly, the corresponding Java
class name which exposes methods.
* `${method_name}` — the public method name from the Java class.

For the application started locally with the `CounterEndpoint` endpoint defined
above, the endpoint url will be the following:
`http://localhost:8080/connect/counterendpoint/addone`

[NOTE]
====
Endpoint name and the method name are not case sensitive for Vaadin, so
the url above is the same as
`http://localhost:8080/connect/CounterEndpoint/addOne` or
`http://localhost:8080/connect/COUNTERENDPOINT/ADDONE` or any other case
combination for the endpoint and method name.
====

== How to configure the API endpoint URL?

Vaadin allows to configure the following url parts:

* `${prefix}`
The default value is `connect`. To change it to some other value, provide
`application.properties` file in the project resources:
`src/main/resources/application.properties` and set the
`vaadin.connect.prefix` property to the new value.

* `${endpoint_name}`
By default, the Java class name is taken. It is possible to specify a value in
the `@Endpoint` annotation to override default one:
`@Endpoint("customName")`. In this case, the `customName` value will be
used as a `${endpoint_name}` to accept incoming requests, also case-insensitive.

== Import and use generated TypeScript modules

There is a generated TypeScript module for every Vaadin endpoint on the backend.
Each module exports all the methods.

You can either import the whole generated module as an endpoint, or import the
methods from the module separately. For instance, the
`CounterEndpoint.ts` could be used as in the following snippets:

.index.ts (import the whole module)
[[index.ts]]
[source,typescript]
----
// Other imports
import * as counterEndpoint from './generated/CounterEndpoint';

// Other code
counterEndpoint.addOne(1).then(result => console.log(result));
----

.index.ts (only import the needed method)
[source,typescript]
----
// Other imports
import {addOne} from './generated/CounterEndpoint';

// Other code
addOne(1).then(result => console.log(result));
----

== TypeScript generation details

The generation is done automatically when the application compiles, and when
the application is running in development mode.

By default, the generated files are located under `{project
directory}/frontend/generated`. You can change the folder by providing the path
for the generator in the `generatedFrontendDirectory` property for Vaadin Maven
plugin.

== Example generated TypeScript module contents

For example, the generated TypeScript module for the Java endpoint defined in
 <<accessing-backend#how-to-create-vaadin-endpoint,CounterEndpoint.java>> would look like:

[source,typescript]
.CounterEndpoint.ts
----
/**
 * A Vaadin endpoint that counts numbers.
 *
 * This module has been generated from CounterEndpoint.java
 * @module CounterEndpoint
 */

import client from './connect-client.default';

/**
 * A method that adds one to the argument.
 *
 * @param number
 */
export function addOne(number: number): Promise<number> {
  return client.call('CounterEndpoint', 'addOne', {number}, {requireCredentials: true});
}
----

== Code-completion

As you see in `CounterEndpoint.ts`, the Javadoc of `@Endpoint` class
is preserved the generated TypeScript file, and the type definitions are
maintained. This helps code-completion work pretty well in *Visual Studio Code*
and *Intellij IDEA Ultimate Edition*.

.Code-completion in Visual Studio Code
image:codecompletion.gif[Code-completion]
