---
title: "Appendix: TypeScript Services Generator"
order: 120
layout: page
---

= Appendix: TypeScript Services Generator

The TypeScript generator produces TypeScript files based on the information from an OpenApi document which is generated from Java files in `_src/main/java_` folder by default.

[NOTE]
====
Vaadin uses https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification] as a middle layer between Java services and TypeScript service wrappers. The current implementation is based on OpenAPI specification 3.0. For details, please refer to <<appendix, the appendix at the end of this page>>.
====

== Examples

A simple generated TypeScript files will look like the following snippet:

.UserService.ts [[UserService.ts]]
[source, typescript]
----
/**
 * User services.
 *
 * This module has been generated from UserServices.java
 * @module UserServices
 */
import client from './connect-client.default';

/**
 * Check if a user is admin or not.
 *
 * @param id User id to be checked
 * Return Return true if the given user is an admin, otherwise false.
 */
export function isAdmin(
  id: number
): Promise<boolean> {
  return client.call('UserServices', 'isAdmin', {id});
}

----

The `_import client from './connect-client.default'_` is a static part of any generated file.
`_connect-client.default.ts_` is another generated file which includes default configurations for the `_ConnectClient_` and exports its instance as `_client_`.

Each method in the generated modules is corresponding to a Java method in `@VaadinService` annotated classes. For example, the following Java code is corresponding to the generated <<UserServices.ts,UserServices.ts>>:

.UserService.ts [[UserService.ts]]
[source, java]
----
/**
 * User services.
 */
@VaadinService
public class UserServices {
    /**
     * Check if a user is admin or not.
     *
     * @param id
     *            User id to be checked
     * @return Return true if the given user is an admin, otherwise false.
     */
    public boolean isAdmin(long id) {
        return id == 0;
    }
}
----

By default, all Java types are mapped and generated to a non-nullable type in TypeScript. Therefore, returning a `null` value to TypeScript in a non-optional service method causes a validation exception in runtime.

NOTE: For more information about type mapping between Java and TypeScript, please refer to <<type-conversion#, type conversion page>>.

=== Optional values

If a parameter, a bean property or a method in Java method is annotated with `@Nullable` or has `Optional` type, the corresponding TypeScript code is declared as optional.

==== Optional parameter

.Optional parameter in Java service
[source, java]
----
public void setName(String firstName, String lastName, @Nullable String middleName) {
    // omitted code
}

public void setNameOptional(String firstName, String lastName, Optional<String> middleName) {
    // omitted code
}
----

.Generated optional parameter in TypeScript
[source, typescript]
----
export function setName(
  firstName: string,
  lastName: string,
  middleName?: string
): Promise<void> {
  return client.call('UserServices', 'setName', {firstName, lastName, middleName});
}

export function setNameOptional(
  firstName: string,
  lastName: string,
  middleName?: string
): Promise<void> {
  return client.call('UserServices', 'setNameOptional', {firstName, lastName, middleName});
}
----

In this case, if user calls `UserServices.setName('first', 'last')` in TypeScript, the middle name is omitted and set as `null` when receiving in Java `UserServices.setName` method. If the JavaType is `Optional`, the missing parameter is `Optional.empty()`;

==== Optional property

.Optional properties in Java
[source,java]
----
public class MyBean {
    private long id;
    private String value;
    @Nullable
    private String description;
    private Optional<String> optionalDescription;
}
----

.Generated optional properties in TypeScript
[source,typescript]
----
export default interface MyBean {
  id: number;
  value: string;
  description?: string;
  optionalDescription?: string;
}
----

==== Optional return type

.Optional return type in Java
[source,java]
----

@Nullable
public String getPhoneNumber() {
    // omitted code
}

public Optional<String> getPhoneNumberOptional() {
    // omitted code
}
----

.Generated optional return type in TypeScript
[source,typescript]
----

export function getPhoneNumber(): Promise<string | undefined> {
  return client.call('UserServices', 'getPhoneNumber');
}

export function getPhoneNumberOptional(): Promise<string | undefined> {
  return client.call('UserServices', 'getPhoneNumberOptional');
}
----

== Appendix: how the generator generate TypeScript from OpenAPI specification. [[appendix]]

=== Modules
The generator will collect all the `_tags_` field of all operations in the OpenAPI document. Each tag will generate a corresponding TypeScript file. The tag name is used for TypeScript module name as well as the file name. TsDoc of the class will be fetched from `_description_` field of the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#tagObject[tag object] which has the same name as the class.

=== Methods
Each exported method in a module is corresponding to a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject[POST operation] of a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#pathItemObject[path item] in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#pathsObject[paths object].

[NOTE]
====
Currently, the generator only supports `_POST_` operation. If a path item contains other operations than `_POST_`, the generator will stop processing.
====

The path *must* start with `/` as described in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#patterned-fields[Patterned Fields]. It is parsed as `_/<service name>/<method name>_` which are used as parameters to call to Java services in the backend. Method name from the path is also reused as the method name in the generated TypeScript file.

==== Method's Parameters
Parameters of the method are taken from the `_application/json_` content of https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#requestBodyObject[request body object]. To get the result as <<UserService.ts>>, the request body content should be:

.Request Body [[request-body]]
[source, json]
----
{
 "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User id to be checked"
          }
        }
      }
    }
  }
}
----

Type and description of each property are used for TsDoc that describes the parameter in more details.

[NOTE]
====
All the other content types of request body object are not ignored by the Vaadin Generator. It means that without the `application/json` content type, the method is considered as a no parameter one.
====

==== Method's Return Type

Return type and its description are taken from the `_200_` https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#responseObject[response object]. As same as request body object, the generator is only interested at `application/json` content type. The schema type indicates the return type and the description describes the result. Here is an example of a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#responsesObject[responses objects]:

.Responses Object [[response-object]]
[source, json]
----
{
  "200": {
    "description": "Return true if the given user is an admin, otherwise false.",
    "content": {
      "application/json": {
        "schema": {
          "type": "boolean"
        }
      }
    }
  }
}
----

[NOTE]
====
At this point, the generator only takes the advantage of `_200_` response objects. Other response objects are ignored.
====

==== Method's TsDoc

The TsDoc of the generated method is stored as `_description_` value of the `_POST_` operation in path item. A valid `_POST_` operation combined with <<request-body>> and <<response-object>> would look like:

.Post Operation
[source, json]
----
{
  "tags": ["UserService"], // <1>
  "description": "Check if a user is admin or not.",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User id to be checked"
            }
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Return true if the given user is an admin, otherwise false.",
      "content": {
        "application/json": {
          "schema": {
            "type": "boolean"
          }
        }
      }
    }
  }
}
----

<1> As mentioned in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject[operation object] specification, in Vaadin Generator, `_tags_` are used to classify operations into TypeScript files. It means each tag will have a corresponding generated TypeScript file. The operations, which contain more than one tag, will appear in all generated files. Empty tags operations will be placed in `_Default.ts_` file.

[NOTE]
====
Although multiple tags do not break the generator, it might be confusing in the development time when there are two exact same methods in different TypeScript files. It is recommended to have only one tag per operation.
====

Here is an example OpenAPI document which could generate the above <<UserService.ts>>.

.User service OpenApi document
[source, json]
----
{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "My example application",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://myhost.com/myendpoint",
    "description" : "Vaadin backend server"
  } ],
  "tags" : [ {
    "name" : "UserService",
    "description" : "User service class."
  } ],
  "paths" : {
    "/UserService/isAdmin" : {
      "post": {
        "tags": ["UserService"],
        "description": "Check if a user is admin or not.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [ "id" ]
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "User id to be checked"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return true if the given user is an admin, otherwise false.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  }
}
----
