---
title: "Appendix: Intro to TypeScript in Vaadin 15"
order: 100
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= Appendix: Intro to TypeScript in Vaadin 15

Vaadin 15+ supports link:https://www.typescriptlang.org/[TypeScript^] for writing client-side code, without needing any additional configuration. That includes live reloading at the development time, and optimized builds for production.

[WARNING]
This feature is experimental and it *will change* before the next Long-Term-Supported Vaadin version.
If you have an idea how to make it more useful for you, please share it on link:https://github.com/vaadin/flow/issues/new/[GitHub^].

In order to write the app bootstrapping code, or create views in TypeScript make sure that:

 - <<starting-the-app#,client-side bootstrapping>> is enabled.

 - and the `index.html` page template and the `index.ts` entry point do exist in the `frontend/` folder. If they don't, follow the <<../v15-migration/upgrading-from-vaadin14#step-2,instruction>> to create them.

After that any `.ts` file imported from `index.ts` (statically or dynamically) is going to be built as a part of the application.

= Starting the app in TypeScript

Vaadin 15 introduces a new bootstrapping mode where the bootstrap template (`index.html`) and application entry point are readily available for customization. The entry point to the application can be written in TypeScript: using an `index.ts` file is supported as well as using `index.js`. Below is a sample `index.ts` file that adds a button click listener to load the full Vaadin application lazily, only after the button is clicked.
See the <<starting-the-app#, Starting the app in TypeScript>> page for details on starting a Vaadin application from TypeScript code.

.frontend/index.ts
[source,typescript]
----
import {Router} from '@vaadin/router';
import {Flow} from '@vaadin/flow-frontend/Flow';

const {serverSideRoutes} = new Flow({
  imports: () => import('../target/frontend/generated-flow-imports')
});

const loadButton: HTMLElement | null = document.getElementById('loadButton');
if (loadButton) {
  loadButton.addEventListener('click', async() => {
    const router = new Router(document.querySelector('#outlet'));
    await router.setRoutes(serverSideRoutes);
  });
}
----

.frontend/index.html
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>

  <div id="#outlet">
    <h2>Hello, World!</h2>
    <button id="loadButton">Load Vaadin application</button>
  </div>
</body>
</html>
----

With the above snippets, the bootstrap page shows "Hello, World!" text with a button. The Vaadin client engine is not loaded until the button is clicked.

= Configuring TypeScript Compiler

TypeScript compiler requires a `tsconfig.json` file, `vaadin-maven-plugin` generates one in case there is no `tsconfig.json` in the project root. The default config looks similar to the following:

.Default `tsconfig.json`
[source,json]
----
{
  "compilerOptions": {
    "sourceMap": true,
    "inlineSources": true,
    "module": "esNext",
    "target": "es2017",
    "moduleResolution": "node",
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "experimentalDecorators": true
  },
  "include": [
    "frontend/**/*.ts", "frontend/index.js"
  ],
  "exclude": []
}
----

= Adding a TypeScript View [[add-typescript-view]]

Since version 15 Vaadin allows <<creating-routes#,creating routes in TypeScript>>, like in the following example:

.frontend/my-view.ts
[source,typescript]
----
import {LitElement, html, css, customElement, query} from 'lit-element';
import '@vaadin/vaadin-button/vaadin-button';
import '@vaadin/vaadin-notification/vaadin-notification';

@customElement("my-view")
export class MyView extends LitElement {
  @query('#notification')
  private notification: any;

  static get styles() {
    return css`
      :host {
        display: block;
      }
    `;
  }

  render() {
    return html`
      <vaadin-button theme="primary" @click=${this.clickHandler}>
        Click me
      </vaadin-button>
      <vaadin-notification id="notification" duration="2000">
        <template>
          Hello, World!
        </template>
      </vaadin-notification>
    `;
  }

  private clickHandler() {
    this.notification.open();
  }
}
----

In order to see the new client-side view in the browser, you would need to define a new client-side route for it. That requires the following changes in the `index.html` and `index.ts` files:

.frontend/index.html
[source,html]
----
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>TypeScript Support in Vaadin</title>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <script src="VAADIN/build/webcomponentsjs/webcomponents-loader.js"></script>
  <div id="outlet"></div>
</body>
</html>
----

.frontend/index.ts
[source,typescript]
----
import {Flow} from '@vaadin/flow-frontend/Flow';
import {Router} from '@vaadin/router';

import './my-view';

const {serverSideRoutes} = new Flow({
  // @ts-ignore
  imports: () => import('../target/frontend/generated-flow-imports')
});

const routes = [
    {path: '', component: 'my-view'},
    ...serverSideRoutes
];

export const router = new Router(document.querySelector('#outlet'));
router.setRoutes(routes);
----

Now `my-view` is accessible via the root path, i.e. `http://localhost:8080/`. All the other routes are handled by the server-side router. See the <<creating-routes#, Creating routes in TypeScript>> page for more information.

= Hot-reload in development mode

When running the application in development mode, all modifications in `frontend` folder are compiled automatically. Refreshing browser is enough to get the updates.

NOTE: There is an exceptional case when adding `index.ts` or `index.html` for the first time. The application server needs to be restarted to update the entry point and the bootstrap template.

= Accessing Backend Data in TypeScript Views

Vaadin 15 provides a type-safe and secured way to access data from backend in frontend views using the generated TypeScript code. During the development time, Vaadin scans the backend code and generates TypeScript code which can call corresponding Java methods. The generated code are processed through the same build chain as other TypeScript views. So that only necessary code are bundled for your application in production mode. See <<accessing-backend#, Accessing back-end from TypeScript>> for more information.

= Limitations

TypeScript support does not apply to <<../polymer-templates/tutorial-template-intro#, Polymer-based declarative HTML templates>>.
