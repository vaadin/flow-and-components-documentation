---
title: Setup Live Reload using Spring Boot
order: 2
layout: page
---

= Setup Live Reload using Spring Boot

Live Reload makes use of Spring Boot Developer tools to automatically restart whenever files on the classpath change.
More information about Spring Boot Automatic Restart and other developer tools is available at https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html.

== Step-by-step guide

. Verify if `spring-boot-devtools` is added as a dependency in your Vaadin application `pom.xml`. If not add it like so:
+
[source,xml]
----
<dependencies>
    ...
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
</dependencies>
----
. Run the application using `mvn spring-boot:run` or by running the `Application` class directly from your IDE
. Navigate to your Vaadin application on the browser, make some changes, recompile and the browser will reload automatically

== Additional configurations

* If after changing code and reloading the browser page, you cannot access a view in your application,
but instead get an error page with message like `Could not navigate to ...` or `Error creating bean with name ...`,
you need to adjust the dev tools configuration to ensure code changes get picked up. You can do this by
adding the following lines to your `application.properties` file:

----
spring.devtools.restart.poll-interval=2s
spring.devtools.restart.quiet-period=1s
----

== Which changes work?

Basically all Java code modifications are applied automatically:
- changes in the internal application logic
- routes modification (such as add a new view (route), update the route path, remove a view)
- changes made to custom components (`PolymerTemplate` subclasses): add/change/remove

During those changes the session is preserved.

=== Frontend resources modifications

As noted in the main section it's possible to add a new `PolymerTemplate` class
in your application with already existing or new template module `.js` file.
So the working scenarios are:
- add a new CSS import (as a frontend resource and use it in Java via `@CssImport` annotation)
- add a new frontend JS module file (and use it with a Java class)
- modify the existing frontend resource (JS module or imported CSS file)

In the latter case webpack dev server cares about changes made in the JS module only
(Spring Boot dev tools are not involved if there are no Java changes).

=== Changes that require application restart

All changes described above applied automatically only assuming you don't add
new dependencies to the project. The modifications which rely anyhow on updated
classpath dependencies require an application restart.
