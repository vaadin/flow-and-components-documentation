---
title: Live Reload in Spring Boot Applications
order: 3
layout: page
---

= Live Reload in Spring Boot Applications

== Spring Boot dev tools

Spring Boot provides a tool which allows to speed up application development via
automatic application restart on the fly if changes are applied.
The https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools[spring-boot-devtools] module can be added as a dependency to a project in the following way:

[source,xml]
----
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
</dependencies>
----

With this dependency enabled you may change your Java code, 
recompile, and the application will be reloaded automatically without need to restart it.

To be able to see the changes a browser tab still needs to be reloaded. That also
may be automated via https://github.com/twolfson/livereload-extensions[LiveReload extension].

=== In case of errors with dev tools

If after changing code and reloading the browser page, you cannot access a view in your application,
but instead get an error page with message like `Could not navigate to ...` or `Error creating bean with name ...`,
you need to adjust the dev tools configuration to ensure code changes get picked up. You can do this by 
adding the following lines to your `application.properties` file:

```json
spring.devtools.restart.poll-interval=2s
spring.devtools.restart.quiet-period=1s
```

The configuration above helps with slower computers to fix dev tools code reload issues.

== Live Reload extension

Once you install the extension for your browser you should enable it (e.g. via icon 
in the browser's toolbar).

During the application start (with Spring Boot Dev tools enabled) the log message
`o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729` should appear.
The port 35729 is used by the LiveReload extension to communicate using WebSockets protocol.

Now when changes in Java code are made the application will be reloaded and once
this is done the extension will reload the browser page automatically.

== Java modifications that are applied automatically

Basically all Java code modifications are applied automatically:
- changes in the internal application logic
- routes modification (such as add a new view (route), update the route path, remove a view)
- changes made to custom components (`PolymerTemplate` subclasses): add/change/remove

During those changes the session is preserved.

== Frontend resources modifications

As noted in the previous section it's possible to add a new `PolymerTemplate` class
in your application with already existing or new template module `.js` file.
So the working scenarios are:
- add a new CSS import (as a frontend resource and use it in Java via `@CssImport` annotation) 
- add a new frontend JS module file (and use it with a Java class)
- modify the existing frontend resource (JS module or imported CSS file) 

In the latter case webpack dev server cares about changes made in the JS module only
(Spring Boot dev tools are not involved if there are no Java changes). 

== Changes that requires application restart

All changes described above applied automatically only assuming you don't add
new dependencies to the project. The modifications which rely anyhow on updated
classpath dependencies requires the application restart.
