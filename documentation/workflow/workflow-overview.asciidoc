---
title: Overview
order: 1
layout: page
---

= Application Development Workflow

This guide explains how to set up a development workflow where your Java changes automatically trigger redeployment of the Vaadin application and even automatic refresh of the browser window.
It also explains how to run your Vaadin application on server in your IDE.

The recommended setup depends on which application framework (plain servlet, Spring Boot or CDI) you are using.
Each of these are treated in their own subtopic below.

== Subtopics
=== Setup Live Reload using supported Java Hotpatching and Server restart tools
** <<setup-live-reload-springboot#, Spring Boot Hotswapping>>
** <<setup-live-reload-jrebel#, JRebel>>
** <<setup-live-reload-hotswap-agent#, HotswapAgent class and resource redefinition>>

=== Live Reload specifics when using different it in Vaadin technology stacks
** <<tutorial-plain-servlet-live-reload#, Live Reload in Plain Servlet Applications>>
** <<tutorial-cdi-live-reload#,Live Reload in CDI Applications>>

=== Run on Server in IDE
** <<run-on-server-intellij#,Run on server in IntellJ IDEA>>

== Live Reload Limitations

There are general limitations as well as some tool- or application framework-specific limitations associated with live reload.
We cover the general limitations here; the specific limitations are covered in the subtopics.

- Code changes that significantly affect class loaders, such as renaming packages, adding libraries, and large structural changes generally cannot be live-reloaded reliably. Live-reloading should be seen as a productivity booster when making small, incremental changes to the codebase.

- Adding frontend resources that are connected to Java classes, such as template-based components, require a server restart as part of the live reloading.

- The  <<../advanced/tutorial-preserving-state-on-refresh#,`@PreserveOnRefresh`>> annotation on a view causes the component tree to be reused when the view is refreshed in the browser; hence, any code changes to the component constructors and initializers are not reflected. To see the update, either open the view in another browser window/tab or ensure that a new instance is created in some other way.
