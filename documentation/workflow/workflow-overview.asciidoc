---
title: Overview
order: 1
layout: page
---

= Application Development Workflow

This guide explains how to streamline your Vaadin application development workflow for productivity.
It covers setting up third-party Java hotpatching tools to redeploy Java changes without server restarts, and having Vaadin automatically reload the browser for immediate feedback.
It also explains how to run your Vaadin application on a server, such as Tomcat, directly from your IDE.

== Setting up Live Reload using supported Java Hotpatching and Server restart tools
Live Reload combines the power of established hotpatching and hotswapping technologies for Java with the ability for the browser to reload automatically, making it a perfect tool for development time.
Live Reload integrates with Spring Boot developer tools (for Spring Boot-based Vaadin application), JRebel (for any Vaadin application) or HotswapAgent (for any Vaadin application).
See the corresponding sections for setting up the desired technology:

** <<setup-live-reload-springboot#, Spring Boot Developer tools>>
** <<setup-live-reload-jrebel#, JRebel>>
** <<setup-live-reload-hotswap-agent#, HotswapAgent>>

[NOTE]
Each technology supported by Live Reload is meant to be run exclusively.
Simultaneous use of different hotpatching technologies might cause Live Reload to misbehave.

[NOTE]
Hotpatching is for Java changes.
Frontend resources are monitored by Webpack's development server and are live-reloaded independently.

[NOTE]
Hotpatching works best for small, incremental changes.
Changes affecting class loading, or annotations mapping frontend resources typically require a server restart to keep the front-end and back-end consistent.

[NOTE]
With  <<../advanced/tutorial-preserving-state-on-refresh#,`@PreserveOnRefresh`>>, view instances are reused when reloaded in the browser; hence, hotpatches to the view constructor will not be reflected until the view is opened in another browser window or tab.

=== Automatic server restart using Jetty and TomeEE Maven plugins
Alternatively, the Jetty and TomEE Maven plugins facilitate automatic server restart on Java changes.
These do not require installing third-party tools, but have the disadvantage that server restarts are slower and the browser will also not refresh automatically.

** <<tutorial-jetty-scaninterval#, Automatic Restart with Jetty Maven Plugin>>
** <<tutorial-cdi-reloadonupdate#, Automatic Restart with TomEE Maven Plugin>>

=== Run on server in IDE
Learn how to configure IntelliJ IDEA to run the `preparent-frontend` target automatically during "Run on server".

** <<run-on-server-intellij#,Run on server in IntellJ IDEA Ultimate Edition>>
