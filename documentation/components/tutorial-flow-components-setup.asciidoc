---
title: Using Vaadin Components
order: 1
layout: page
---

= Using Vaadin Components

The Vaadin Platform includes a set of https://vaadin.com/components/browse[components], with server-side Java APIs, that you can use to build your UI.   

The components are included, together with Flow, as dependencies in platform.

The _vaadin-core_ module includes all open source components, such as TextField, Button and Grid. The _vaadin_ module extends this set with all officially supported components in Vaadin platform, like Vaadin Charts.

== Vaadin Platform Dependency

The components are part of the Vaadin platform and are included as dependencies, together with Flow. Each component has a Java API. 

Using the platform dependency (com.vaadin:vaadin) ensures that all available components, both open source and commercial, are included automatically. You are guaranteed to get compatible versions of both Flow and the components.

*Example*: Declaring the `vaadin.platform` dependency. 

[source,xml]
----
    <dependencies>
    <!-- other dependencies -->
    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin</artifactId>
        <version>${vaadin.platform.version}</version>
    </dependency>
</dependencies>
----

[NOTE]
It is possible to include components individually by declaring a dependency for each component. See below for an example.

The platform also includes theming for the components that you can edit to ensure the styling suits your UI. See <<../theme/using-component-themes#,Using Component Themes>> for more.

You can find additional prebuilt Web Components (with Java APIs) contributed by the Vaadin community in the https://vaadin.com/directory/search[Vaadin Directory.]

== Individual Component Dependencies

As an alternative to using the platform dependency, you can declare single components as dependencies.

https://www.webjars.org/ generates the Maven artifacts with pom.xml that specifies version ranges for jar's dependencies
instead of some particular version. This means that build results may differ from time to time because of the new libraries' versions released.
Vaadin provides a BOM (Bill Of Materials) that fixes all vaadin-related dependencies to a tested combination, so that the individual components can be added safely.

You need to add the `bom` and the relevant Flow component package, for example `vaadin-button-flow`, to your project dependencies.

*Example*: Adding the Button component in your `pom.xml` using Maven.

[source,xml]
----
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>${vaadin.platform.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<dependencies>
    <!-- other dependencies -->

    <!-- component dependency -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
    </dependency>
</dependencies>
----

== Using WebJars

Individual component packages often consist of two parts

. Java API classes.
. Web Component files (HTML, JavaScript, CSS ..).

Both sections are provided in the same JAR by default, and both sections are used to display the components correctly in pages.

Web Component files are provided as https://github.com/webjars/webjars/[WebJars] (JAR files that contain Web Component files). WebJars contain the resources needed by the client-side and it also contain the dependency information as Maven pom.xml files, so there is no need to use Bower or similar for the client side dependency management. 


Using WebJars does not restrict you from also using external Web Component files, and this is enabled by default. If no suitable WebJar is found, request resolving falls back to the configured external Web Component location. You can turn off WebJar resolving by changing your configuration. 

[NOTE]
Current https://github.com/webjars/webjars/issues[WebJar limitations] require extra maven configurations: extra repository + `bom` file declaration.

=== Excluding WebJars

You can exclude WebJars by declaring an exclusion in Maven.

*Example*: Declaring a dependency to the `vaadin-button-flow` component and excluding the related WebJar. 
[source,xml]
----
<!-- No webjars == no bom needed and no extra repo needed, but you have to get webjars' files into the build yourself -->
<dependencies>
    <!-- other dependencies -->

    <!-- the dependency with webjars excluded -->
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-button-flow</artifactId>
        <version>1.0-SNAPSHOT</version>
        <exclusions>
            <exclusion>
                <groupId>org.webjars.bowergithub.vaadin</groupId>
                <artifactId>*</artifactId>
            </exclusion>
        </exclusions>
    </dependency>

    <!-- other dependencies -->
</dependencies>
----
