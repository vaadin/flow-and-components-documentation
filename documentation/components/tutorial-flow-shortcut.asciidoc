---
title: Shortcuts
order: 7
layout: page
---

= Shortcuts

Shortcut feature gives the developer an ability to create custom
keyboard shortcuts and react when those shortcuts are triggered.

== Using the Shortcut API
Shortcut's key combination consists of one _primary key_ and from 0 to 4 _key
modifiers_ (alt, ctrl, meta, shift).

=== Adding a "`click`" shortcut
Click shortcuts perform the _click_ action on a component which implements
the `ClickNotifier` interface, such as the `Button`.

[source, java]
----
Button button = new Button();
button.addClickListener(event -> {/* do the click */});
button.addClickShortcut(Key.ENTER);
----

Instead of clicking on the _button_, the user can hit _Enter_ on the keyboard
to perform the action tied to the _button_'s click.

=== Adding a "`focus`" shortcut
Focus shortcuts _focuses_ the `Focusable` component, such as an `Input` field.

[source, java]
----
TextField textField = new TextField("Label");
textField.addFocusShortcut(Key.KEY_F, KeyModifier.ALT);
----

Now the user can focus the _textField_ by pressing _ALT+F_ on their keyboard.

=== Adding a custom shortcut
In addition to _focus_ and _click_ shortcuts, it is possible to add shortcuts
that simply execute code as a response to a triggered shortcut.

Let's say there is a method for opening an input form for entering information
about a new customer, `public void openCustomerCreation()`.

[source, java]
----
UI.getCurrent().addShortcutListener(this::openCustomerCreation, Key.KEY_N,
        KeyModifier.CONTROL, KeyModifier.ALT);
----

Now, when the user presses _Ctrl+Alt+N_ the form will open and allow the user
to input the customer's details.

The shortcut can run any code that conforms to the functional interface
`Command`, which has a single zero arguments method called `execute`.

[source, java]
----
UI.getCurrent().addShortcutListener(
        () -> Notification.show("Shortcut triggered"), Key.SPACE);
----

=== Configuring shortcut's active scope
By default, every shortcut is registered to global scope. This means that
when the user presses the correct keys, it does not matter where the user's
cursor is and which element is focused on the screen; the shortcut will be
triggered regardless.

Sometimes it is useful that the shortcut is only available when the user has
focused an element on the screen, such as a input field. Using the fluent API
provided by the `ShortcutRegistration` returned by every method used to add a
shortcut.

[source, java]
----
public class Scope extends Div {
    public Scope() {
        TextField firstName = new TextField();
        TextField lastName = new TextField();

        add(firstName, lastName);

        Command command = () -> {
            firstName.setValue("");
            lastName.setValue("");
            firstName.focus();
        };
        // first parameter is the lifecycle owner of the shortcut and
        // will be discussed later.
        Shortcuts.addShortcutListener(this, command, Key.ESCAPE)
                // defines the component onto which the shortcuts listener
                // is attached:
                .listenOn(this);
    }
}
----

The shortcut in this example is tied to the parent component of the `Input`
components, `Scope`. If the user is typing something in one of the inputs and
presses _Escape_, both input fields will be cleared and focus returned to the
first field.

This is useful in situations where the application has multiple
instances of
the same component visible at the same time on the screen and each component has
the same shortcut.

The shortcut is created using the factory class `Shortcuts` which offers the
most generic method for creating shortcuts.

[NOTE]
See <<Shortcut lifecycle>> to learn more about `lifecycleOwner`.

=== Removing a shortcut
A registered  shortcut can be removed by calling `Registration.remove()`.
Each method which adds/registers a shortcut returns either a `Registration`
or `ShortcutRegistration` object.

[source, java]
----
TextField textField = new TextField("Label");
ShortcutRegistration registration = textField.addFocusShortcut(Key.KEY_F,
        KeyModifier.ALT);

// something happens here

registration.remove(); // shortcut removed!
----

[NOTE]
See <<Configuring shortcuts>> to learn more about `ShortcutRegistration`.

=== Shortcut lifecycle
In addition to `Keys`, `KeyModifiers`, `Action`, and _owner_, the shortcut also
has a lifecycle which is controlled by an associated `Component`. The
_component_ in called `lifecycleOwner`.

When the component acting as a `lifecycleOwner` is both *attached* and
*visible*, the shortcut is active. If the component is in violation of either of
those conditions, the shortcut cannot be triggered.

For _focus_ and _click_ shortcuts the lifecycle owner is the component itself.
It would not make sense for the _click_ shortcut to be active if the button
is not visible or if it is not on the layout at all.

For shortcuts registered through `UI`, the `lifecycle` owner is the `UI` -
this means that the shortcut will stop functioning only when the shortcut is
removed (see <<Removing shortcuts>>).

To create a shortcut which has its lifecycle bound to a specific component, we
can use `Shortcuts.addShortcutListener(...)`.

[source, java]
----
Paragraph paragraph = new Paragraph("When you see me, try ALT+G!");

Shortcuts.addShortcutListener(paragraph, () -> Notification.show("Well done!"),
        Key.KEY_G, KeyModifier.ALT);

add(paragraph);
----

The first parameter of `Shortcuts.addShortcutListener(Component, Command, Key,
KeyModifier...);` is the `lifecycleOwner`. The shortcut _ALT+G_ is now bound
the the lifecycle of _paragraph_ and is only valid when _paragraph_ is
attached and visible.

=== Listening for `ShortcutEvent`
In our previous examples, we have registered a `Command` to be executed when
shortcut usage is detected. In order to facilitate more complex use cases, each
`addShortcutListener` method has an overload which accepts
`ShortcutEventListener` instead of a `Command`.

When the shortcut is detected, the event listener receives a `ShortcutEvent`
which contains the `Key`, `KeyModifiers`, and both `listenOn` and
`lifecycleOwner` components.

[source, java]
----
// handles multiple shortcuts
ShortcutEventListener listener = event -> {
    if (event.matches(Key.KEY_G, KeyModifier.ALT)) {
        // do something G-related
    }
    else if (event.matches(Key.KEY_J, KeyModifier.ALT)) {
        // do something J-releated
    }
};

UI.getCurrent().addShortcutListener(listener, Key.KEY_G, KeyModifier.ALT);
UI.getCurrent().addShortcutListener(listener, Key.KEY_J, KeyModifier.ALT);
----

In the example, the `listener` is responsible for handling events received
from multiple shortcuts. Both _ALT+G_ and _ALT+J_ result into the invocation
of the `listener`.

The `ShortcutEvent` offers a method `.matches(Key, KeyModifier...)` for
comparing which shortcut might be in question. For further comparisons, use `
.getSource()` which returns the `listenOn` component, and `.getLifecycleOwner()`
which returns the `lifecycleOwner` component.

=== Configuring shortcuts
The previously used methods for adding shortcuts have all began with "`add--`"
and returned a `Registration`. If the user wants more freedom to configure
shortcuts, the shortcut API has a second class of methods which start with
"`register--`". These methods return an instance of `ShortcutRegistration`
which provides a fluent API for further configuring the shortcuts.

==== Modifiers
`ShortcutRegistration` offers shorthands for assigning key modifiers to a
shortcut:

[source, java]
----
Input input = new Input();
input.addFocusShortcut(Key.KEY_F).withAlt().withShift();
----

The focus shortcut is triggered with _Alt+Shift+F_.

`ShortcutRegistration` also has a method `.withModifiers(KeyModifiers...
modifiers)` which can be used to configure all modifiers simultaneously - or
to remove all modifiers. Calling `withModifiers(...);` without parameters
removes all modifiers from the shortcut.

==== Lifecycle owner
`ShortcutRegistration` offers a method for reconfiguring the `lifecycleOwner` of
the shortcut.

[source, java]
----
UI.getCurrent().addShortcutListener(() -> {/* do a thing*/}, Key.KEY_F)
        .bindLifecycleTo(anotherComponent);
----

The lifecycle of the global shortcut is now bond to _anotherComponent_.

==== Client-side event behavior
`ShortcutRegistration` provides methods for defining how the event should
behave on the client-side. DOM events provide the developer with the tools to
control if the event should propagate upwards in the DOM tree, and if the
event should allow browsers' default behavior to take place or not.

By default, the shortcuts created by Flow consume the event (it does not
propagate upwards in the DOM tree) and prevent default behavior (e.g. an
input field does type out the characters used in the shortcut).

To change this behavior, use the methods `allowEventPropagation()` and
`allowBrowserDefault()`.

[source, java]
----
Input input = new Input();
input.addFocusShortcut(Key.KEY_F)
        // other handlers can now catch this event
        .allowEventPropagation()
        // the character 'f' will be written out, if a text field is focused
        .allowBrowserDefault();
----

==== Inspection
`ShortcutRegistration` offers a variety of methods for checking the internal
state of the shortcut and all configurable values have corresponding _getter_
methods.

One extra method is `boolean isShortcutActive()` which can be used to check,
whether the shortcut is enabled on the client-side or not.
