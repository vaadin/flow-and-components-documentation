---
title: Disabled Components
order: 5
layout: page
---

= Disabled Components

It's possible to disable/enable a `Component` using its `setEnabled` method. This is
a basic feature described in <<tutorial-component-basic-features#,Component Basic Features>> tutorial.
This tutorial is about various aspects of using it.

== Disabled Container

Normally we want to disable every descendant component in the disabled container.
That what happens with the container by default.

== Override default disabled behavior

By default disabled components don't allow any user interaction from the client side.
Complicated (composite) components sometimes should stay partly functional even in disabled state.
In this case it should be possible to enable some RPC client side calls which
are blocked for disabled component.

In the following example the Polymer template component controls its visibility
by itself via the checkbox. E.g. it may be a registration form which becomes
enabled only when user accepts a license agreement. The checkbox should 
not be ever disabled and it should enable/disable the component.

[source, java]
----
@Tag("registration-form")
@HtmlImport("src/registration-form.html")
public class RegistrationForm extends PolymerTemplate<TemplateModel> {

    @Id
    private TextField name;

    @Id
    private TextField email;

    @Id
    private Button submit;

    @Id
    private Element enable;

    public RegistrationForm() {
        enable.synchronizeProperty("checked", "checked-changed",
                AllowUpdates.ALWAYS);
        enable.addPropertyChangeListener(this::handleEnabled);
    }

    @Override
    public void onEnabledStateChanged(boolean enabled) {
        name.setAttribute('disabled', !enabled);
        email.setAttribute('disabled', !enabled);
        submit.setAttribute('disabled', !enabled);
    }

    private void handleEnabled(PropertyChangeEvent event) {
        setEnabled((Boolean) event.getValue());
    }

    @EventHandler
    private void register() {
        String userName = name.getValue();
        String userEmail = name.getValue();
        System.out.println("Register user with name='" + name
                + "' and email='" + email + "'");
    }
}
----

Here is its template file: 

[source, html]
----
<dom-module id="registration-form">
    <template>
        <vaadin-text-field id='name'>{{name}}</vaadin-text-field>
        <vaadin-text-field id='email'>{{email}}</vaadin-text-field>
        <vaadin-button id='submit' on-click='register'>Register</vaadin-button>
        <vaadin-checkbox id='enable'>Accept License Agreement</vaadin-checkbox>
    </template>
    <script>
         class RegistrationForm extends Polymer.Element {
           static get is() {return 'registration-form'}
         }
         customElements.define(RegistrationForm.is, RegistrationForm);
    </script>
</dom-module>
----

In this example the checkbox is implicitly disabled if the template (which is its parent) 
is disabled. As a result no RPC will be allowed for the checkbox. The method 
`synchronizeProperty` with extra argument is used to synchronize `checked` 
property. The argument value is `AllowUpdates.ALWAYS`  enum value which 
instructs to allow updates for this property even if the element is disabled.

Here is the list of RPC communicataions which are blocked for the disabled element:
- Property changes
- DOM events
- Event handler methods (methods annotated with `@EventHandler`) 
- Client delegate methods (methods annotated with `@ClientDelegate`)

E.g. the `register()` method is an event handler method which is blocked when the component
is disabled.

=== Enable property changes

Similarly to the `synchronizeProperty` API method which allows to receive property updates
for disabled components if it's called with `AllowUpdates.ALWAYS` argument value you may
use declarative way to do the same via `@Synchronize` annotation for the property getter 
in your component:

[source, java]
----
@Synchronize(property = "prop", value = "prop-changed", allowUpdates = AllowUpdates.ALWAYS)
public String getProp(){
    return getElement().getProperty("prop");
}
----

=== Enable DOM events

You may use two ways to receive DOM events: `Element` API method `addEventListener` and 
`@DomEvent` annotation.

To unblock DOM event for a disabled element using API method you may use 
`addEventListener` overload which accepts extra parameter with value `AllowUpdates.ALWAYS`.

To unblock DOM event for a disabled component via `@DomEvent` annotation you may 
use the extra parameter value `AllowUpdates.ALWAYS` : 
`@DomEvent(value="input", allowUpdates = AllowUpdates.ALWAYS )`.

=== Enable server handler methods

If you have server handler methods annotation with `@ClientDelegate` or 
`@EventHandler` then you may unblock them for the disabled component specifying
 `AllowUpdates.ALWAYS` as a value: `@EventHandler(AllowUpdates.ALWAYS)`. 

