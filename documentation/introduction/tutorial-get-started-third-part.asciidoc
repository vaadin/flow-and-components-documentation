---
title: Part 3 - Creating live filtering for entities
order: 4
layout: page
subnav_auto_list_numbers: true
subnav:
  - title: Creating live filtering for entities
    href: '#flow.tutorial.filtering'
---
:sectnums:

[[flow.tutorial.filtering]]
== Creating live filtering for entities

A search functionality is expected in every modern application and it is also a nice Vaadin development exercise. Let’s add a filtering functionality to our Customer listing we created in the previous step.
// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]
We’ll start by introducing a [classname]#TextField# component as a field to our [classname]#MainView# class:

[source,java]
----
private TextField filterText = new TextField();
----

In the [classname]#MainView# constructor, configure the text field to contain a helpful input prompt and add a text change listener to the field. The exact place of these lines is not important, but add them, for example, at the beginning of the constructor.

[source,java]
----
filterText.setPlaceholder("Filter by name...");
filterText.setValueChangeMode(ValueChangeMode.EAGER);
filterText.addValueChangeListener(e -> updateList());
----

[TIP]
To keep your code more readable, you can use autoformat after you write or copy paste code snippets. The default keyboard shortcut in Eclipse is kbd:[Ctrl+Shift+F] or kbd:[Cmd+Shift+F]. This can also be configured for all save actions in Eclipse, that means this command does formatting whenever you need, but it can also be automated, if the user wants to.
By selecting the Format source code in “Preferences > Save Actions”, you can automate the formating action.

As its name implies, the value change listener allows you to react to changes in the value contained in the text field. When setting the mode as `EAGER`, it is configured so that the event is fired while the user is typing. This makes it perfect for this kind of automatic filtering. When the user is typing in the text, we’ll just update the listing, calling the `updateList` method as before.
To keep the `updateList` method functionality correct, it should take into consideration the possible value in the filterText field. Change the body of the method into this:	 

[source,java]
----
public void updateList() {
    /**
    * Note that filterText.getValue() might return null; in this case, the backend
    * takes care of it for us
    */
    grid.setItems(service.findAll(filterText.getValue()));
    }
----

Before adding the text field to the UI, let’s improve the usability a bit and make a short exercise to compose better components from lower level UI components. The search field can naturally be cleared with the keyboard, but let’s add a clear button next to the text field. Start by adding the following lines to the constructor, for example right after your `filterText` configuration:

[source,java]
----
Button clearFilterTextBtn = new Button(
        new Icon(VaadinIcon.CLOSE_CIRCLE));
clearFilterTextBtn.addClickListener(e -> filterText.clear());
----

Vaadin Flow includes a set of built in icons, from which we use the "X" icon, `VaadinIcon.CLOSE_CIRCLE` here, which most users will recognise as a functionality to clear a value. In the click listener, we simply clear the text from the field.
Vaadin Flow contains lots of different kinds of layouts. The simplest way to align the text field and the button next to each other is to use a [classname]#HorizontalLayout#. Add this line to the constructor right after you configured the `clearFilterTextBtn`:

[source,java]
----
HorizontalLayout filtering = new HorizontalLayout(filterText,
    clearFilterTextBtn);
----

Finally, *change* the line *add(grid)* in the constructor that currently adds only the grid, to add both the `filtering` layout and the grid to the main view.

[source,java]
----
add(filtering, grid);
----

Now the mainView looks like this:

[source,java]
----
	/**
 * The main view contains a button and a click listener.
 */
@Route("")
public class MainView extends VerticalLayout {

	private CustomerService service = CustomerService.getInstance();
	private Grid<Customer> grid = new Grid<>();
	private TextField filterText = new TextField();

	public MainView() {
		filterText.setPlaceholder("Filter by name...");
		filterText.setValueChangeMode(ValueChangeMode.EAGER);
		filterText.addValueChangeListener(e -> updateList());
		        Button clearFilterTextBtn = new Button(
                        new Icon(VaadinIcon.CLOSE_CIRCLE));
		clearFilterTextBtn.addClickListener(e -> filterText.clear());
		HorizontalLayout filtering = new HorizontalLayout(filterText,
                        clearFilterTextBtn);

		grid.setSizeFull();

		grid.addColumn(Customer::getFirstName).setHeader("First name");
		grid.addColumn(Customer::getLastName).setHeader("Last name");
		grid.addColumn(Customer::getStatus).setHeader("Status");

		add(filtering, grid);
		setHeight("100vh");
		updateList();
	}

	public void updateList() {
		/**
		 * Note that filterText.getValue() might return null; in this case, the backend
		 * takes care of it for us
		 */
		grid.setItems(service.findAll(filterText.getValue()));
	}

}
----

Now it is a good time to save your changes and try them out in your browser!

Good job! Let's move on, and continue by creating a form using plain Java in the next tutorial section.
