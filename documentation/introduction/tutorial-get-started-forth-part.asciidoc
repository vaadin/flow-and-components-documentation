---
title: Part 4 - Creating a form using plain Java
order: 5
layout: page
subnav_auto_list_numbers: true
subnav:
  - title: Creating a form using plain Java
    href: '#flow.tutorial.form'
    subnav:
      - title: Create a form and show the grids selected row in it
        href: '#flow.tutorial.form.showselectedrow'
      - title: How to Delete and Update the data
        href: '#flow.tutorial.form.deleteupdate'
      - title: How to Add the data
        href: '#flow.tutorial.form.add'
  
---
:sectnums:

[[flow.tutorial.form]]
== Creating a form using plain Java

In this section, we first of all explain how to create a form and show the grids selected row in it and secondly,
how to Add, Update, and Delete the customer data of the form.

[[flow.tutorial.form.showselectedrow]]
=== Create a form and show the grids selected row in it
// The following video shows how to create a form using plain Java:

// video::Alejandro[youtube, width="640", height="400"]
In this part we want to create a new form and connect it to the Grid. We start by creating a new Java class with the name CustomerForm.
In Eclipse, right click on the "com.vaadin.starter.skeleton" package and choose "New > Class". Type in the name `CustomerForm`,
define the superclass as `com.vaadin.flow.component.formlayout.FormLayout` and click `finish`.

We need a field for each property in the [classname]#Customer# class that we want to edit.
There are different kinds of fields in Vaadin for editing different kinds of properties. In this example,
we’ll use two [classname]#TextField# and a [classname]#ComboBox#.
Add the following field declarations as Java fields to [classname]#CustomerForm#:

[source,java]
----
private TextField firstName = new TextField("First name");
private TextField lastName = new TextField("Last name");
private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
----

Also, we will later need a reference to the currently edited [classname]#Customer# instance, [classname]#CustomerService# and the [classname]#MainView#.
Add these fields and a basic constructor that accepts [classname]#MainView# as a parameter to [classname]#CustomerForm#:

[source,java]
----
private CustomerService service = CustomerService.getInstance();
private Customer customer;
private MainView mainView;

public CustomerForm(MainView mainView) {
    this.mainView = mainView;

    add(firstName, lastName, status);
}
----

In the constructor we add the fields to the [classname]#CustomerForm# - side-by-side using a [classname]#HorizontalLayout#.
Although the form is not yet fully functional, you might want to see what it looks
like at this point. 

Next add the newly created form as a field to [classname]#MainView# class:
[source,java]
----
private CustomerForm form = new CustomerForm(this);
----

Now, let’s modify [classname]#MainView# to show the form. Let’s wrap both the [classname]#Grid#
and the [classname]#CustomerForm# in a horizontal layout. Replace the line *add(filtering, grid);* with the following:

[source,java]
----
HorizontalLayout main = new HorizontalLayout(grid, form);
main.setAlignItems(Alignment.START);
main.setSizeFull();

add(filtering, main);
----

The `main.setAlignItems(Alignment.START);` is there to make sure that the contents are aligned to the top of the layout.
Now when you save your changes and reload your application page in your browser, you should see your form next to the grid that lists your existing entities.
Let’s get back to [classname]#CustomerForm#. The first thing we’ll need to do is to populate the options for the [classname]#ComboBox#.
To add all enum values as valid selections, add the following line to the constructor:

[source,java]
----
status.setItems(CustomerStatus.values());
----

To finish our form, we need to create a public API because we should be able to send the selected row from the [classname]#MainView# to the [classname]#CustomerForm#.
We’ll start by adding a Binder as a field to our [classname]#CustomerForm#:

[source,java]
----
private Binder<Customer> binder = new Binder<>(Customer.class);
----

Binder is an object that  connects data to a form that is defined in the declarative format.
Vaadin Framework provides a Binder class that the developer can use to define how the values in a business object should be bound to the fields shown in the user interface.
Binder takes care of reading values from the business object and converting the user’s data between the format expected by the business object and the format expected by the field.

In the form constructor, add the following line to configure the binder:

[source,java]
----
binder.bindInstanceFields(this);
----

This configures the binder to use all the similarly named editor fields in this class to bind their values with their counterpart in the [classname]#Customer# class.
For example, the `CustomerForm.firstName` [classname]#TextField# will be bound to the `Customer.firstName` property.
Create a setter method for the customer field. Just type `setCus` in the body of the form class (outside any methods)
and hit autocomplete (kbd:[Ctrl+Space]), and Eclipse will create a method stub for you. Complete it with the following implementation:

[source,java]
----
public void setCustomer(Customer customer) {
    this.customer = customer;
    binder.setBean(customer);
   }
----

We are calling the `Binder.setBean` method. This will initialise all fields in the form and automatically update the
values in the domain objects as the corresponding field value changes in the user interface.

[TIP]
If the naming convention based data binding doesn’t fit your needs, you can use the https://vaadin.com/api/platform/11.0.0/com/vaadin/flow/data/binder/PropertyId.html[PropertyId] annotation on fields to explicitly declare the edited property.

For connecting the form to the application, add the following selection listener to the end of the MainView constructor:

[source,java]
----
grid.asSingleSelect().addValueChangeListener(event -> {
    form.setCustomer(event.getValue());
});
----

In the listener, we simply take the Customer object of the selected row and pass it to the [classname]#CustomerForm# for editing. Previously, we added a line in the `setCustomer` method that will bind the domain object to the corresponding fields.

Now your CustomerForm looks like this:

[source,java]
----
public class CustomerForm extends FormLayout {
    private TextField firstName = new TextField("First name");
    private TextField lastName = new TextField("Last name");
    private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
    private CustomerService service = CustomerService.getInstance();
    private Customer customer;
    private MainView mainView;
    private Binder<Customer> binder = new Binder<>(Customer.class);

    public CustomerForm(MainView mainView) {
        this.mainView = mainView;
        add(firstName, lastName, status);
        status.setItems(CustomerStatus.values());
        binder.bindInstanceFields(this);
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.setBean(customer);
    }
}
----

Run your project again, and you should see your form next to the grid that lists your existing entities. The form is now connected to the Grid and when you select a row, the data is copied into the fields.

[[flow.tutorial.form.deleteupdate]]
=== How to Delete and Update the data

In this part we want to edit, add and remove Customer objects. 
Let’s start by adding the following action buttons as Java fields to [classname]#CustomerForm#:

[source,java]
----
private Button save = new Button("Save");
private Button delete = new Button("Delete");
----

Add the following line to the constructor, above the line *add(firstName, lastName, status)*

[source,java]
----
HorizontalLayout buttons = new HorizontalLayout(save, delete);
----

Add the buttons object in the *add(firstName, lastName, status)* so that it looks like this:

[source,java]
----
add(firstName, lastName, status, buttons);
----

Let’s also improve the UX a bit. The most common thing your users will want to do with this kind of form is to save it. Let’s decorate the button with a style name that makes it more prominent in the UI:

[source,java]
----
save.getElement().setAttribute("theme", "primary");
----

Add the following code to the `setCustomer` method:

[source,java]
----
boolean enabled = customer != null;
save.setEnabled(enabled);
delete.setEnabled(enabled);
if (enabled) {
    firstName.focus();
}
----

Now the `setCustomer` method should look like this:

[source,java]
----
public void setCustomer(Customer customer) {
    this.customer = customer;
    binder.setBean(customer);
    boolean enabled = customer != null;
    save.setEnabled(enabled);
    delete.setEnabled(enabled);
    if (enabled) {
        firstName.focus();
    }
}
----

To finish off the `setCustomer` setter method, let's call `setCustomer(null)` at the end of the constructor to make sure that the save and delete buttons are disabled by default.

[source,java]
----
setCustomer(null);
----

We’ll disable the save and cancel buttons to prevent user interaction, if there is no customer selected. We could also disable the input fields if necessary, by calling the setEnabled() method on each of them. For improved user experience, we focus the `firstName` field.
The last thing we need to do is to handle `save` and `delete` button clicks. Add the following methods to the [classname]#CustomerForm# class:

[source,java]
----
private void delete() {
    service.delete(customer);
    mainView.updateList();
    setCustomer(null);
}

private void save() {
    service.save(customer);
    mainView.updateList();
    setCustomer(null);
}
----

Finally, we’ll add listeners to the buttons to call these methods. Adding these simple lambda expressions to the constructor will take care of that:

[source,java]
----
save.addClickListener(e -> this.save());
delete.addClickListener(e -> this.delete());
----

[TIP]
For a truly re-usable form component in a real life project, you’d want to introduce an interface to replace the MainView reference or, even better, use an event system like CDI events to completely decouple the components. We’ll leave that out of this tutorial for simplicity.

Now the [classname]#CustomerForm# looks like this:

[source,java]
----
public class CustomerForm extends FormLayout {
    private TextField firstName = new TextField("First name");
    private TextField lastName = new TextField("Last name");
    private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
    private CustomerService service = CustomerService.getInstance();
    private Customer customer;
    private MainView mainView;
    private Binder<Customer> binder = new Binder<>(Customer.class);
    private Button save = new Button("Save");
    private Button delete = new Button("Delete");

    public CustomerForm(MainView mainView) {
        this.mainView = mainView;
        add(firstName, lastName, status);
        status.setItems(CustomerStatus.values());
        binder.bindInstanceFields(this);
        HorizontalLayout buttons = new HorizontalLayout(save, delete);
        add(firstName, lastName, status, buttons);
        save.getElement().setAttribute("theme", "primary");
        setCustomer(null);
        save.addClickListener(e -> this.save());
        delete.addClickListener(e -> this.delete());
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.setBean(customer);
        boolean enabled = customer != null;
        save.setEnabled(enabled);
        delete.setEnabled(enabled);
        if (enabled) {
            firstName.focus();
        }
    }

    private void delete() {
        service.delete(customer);
        mainView.updateList();
        setCustomer(null);
    }

    private void save() {
        service.save(customer);
        mainView.updateList();
        setCustomer(null);
    }
}
----

[[flow.tutorial.form.add]]
=== How to Add the data

To allow users to also create new customer records, we’ll create a simple "Add customer button" to the top of the UI, right next to the `filtering` composition we have already built in a previous step. Introduce a new [classname]#Button# with a click listener, by adding the following lines to the constructor, right after where you introduced the `filtering` composition:

// The following video shows how to do this step of the tutorial:

// video::Alejandro[youtube, width="640", height="400"]

[source,java]
----
Button addCustomerBtn = new Button("Add new customer");
addCustomerBtn.addClickListener(e -> {
    grid.asSingleSelect().clear();
    form.setCustomer(new Customer());
});
----

In the click listener, we first clear a possible selection from the grid, and then instantiate a new customer object and pass that to the form for editing.
To add it beside our `filtering` composition, we can use a `HorizontalLayout` to create a toolbar where we place both components. First, introduce a toolbar like this after the previously created `addCustomerBtn`:

[source,java]
----
HorizontalLayout toolbar = new HorizontalLayout(filtering,
    addCustomerBtn);
----

And, again, *replace* the line *add(filtering, main)* that populates your main layout to add the toolbar instead of just the `filtering` composition, which we just moved to the `toolbar` layout.

[source,java]
----
add(toolbar, main);
----

Now the [classname]#MainView# should look like this:

[source,java]
----
/**
 * The main view contains a button and a click listener.
 */
@Route("")
public class MainView extends VerticalLayout {

	private CustomerService service = CustomerService.getInstance();
	private Grid<Customer> grid = new Grid<>();
	private TextField filterText = new TextField();
	private CustomerForm form = new CustomerForm(this);

	public MainView() {
		filterText.setPlaceholder("Filter by name...");
		filterText.setValueChangeMode(ValueChangeMode.EAGER);
		filterText.addValueChangeListener(e -> updateList());
		Button clearFilterTextBtn = new Button(
                new Icon(VaadinIcon.CLOSE_CIRCLE));
		clearFilterTextBtn.addClickListener(e -> filterText.clear());
		HorizontalLayout filtering = new HorizontalLayout(filterText,
		        clearFilterTextBtn);

		Button addCustomerBtn = new Button("Add new customer");
		addCustomerBtn.addClickListener(e -> {
			grid.asSingleSelect().clear();
			form.setCustomer(new Customer());
		});
		HorizontalLayout toolbar = new HorizontalLayout(filtering,
		        addCustomerBtn);

		grid.setSizeFull();

		grid.addColumn(Customer::getFirstName).setHeader("First name");
		grid.addColumn(Customer::getLastName).setHeader("Last name");
		grid.addColumn(Customer::getStatus).setHeader("Status");

		HorizontalLayout main = new HorizontalLayout(grid, form);
		main.setAlignItems(Alignment.START);
		main.setSizeFull();

		add(toolbar, main);
		setHeight("100vh");
		updateList();

		grid.asSingleSelect().addValueChangeListener(event -> {
			form.setCustomer(event.getValue());
		});

	}

	public void updateList() {
		/**
		 * Note that filterText.getValue() might return null; in this case, the backend
		 * takes care of it for us
		 */
		grid.setItems(service.findAll(filterText.getValue()));
	}
}

----

And the [classname]#CustomerForm# should look like this:

[source,java]
----
public class CustomerForm extends FormLayout {
	private TextField firstName = new TextField("First name");
	private TextField lastName = new TextField("Last name");
	private ComboBox<CustomerStatus> status = new ComboBox<>("Status");
	private CustomerService service = CustomerService.getInstance();
	private Customer customer;
	private MainView mainView;
	private Binder<Customer> binder = new Binder<>(Customer.class);
	private Button save = new Button("Save");
	private Button delete = new Button("Delete");

	public CustomerForm(MainView mainView) {
		this.mainView = mainView;
		add(firstName, lastName, status);
		status.setItems(CustomerStatus.values());
		binder.bindInstanceFields(this);
		HorizontalLayout buttons = new HorizontalLayout(save, delete);
		add(firstName, lastName, status, buttons);
		save.getElement().setAttribute("theme", "primary");
		setCustomer(null);
		save.addClickListener(e -> this.save());
		delete.addClickListener(e -> this.delete());
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
		binder.setBean(customer);
		boolean enabled = customer != null;
		save.setEnabled(enabled);
		delete.setEnabled(enabled);
		if (enabled) {
			firstName.focus();
		}
	}

	private void delete() {
		service.delete(customer);
		mainView.updateList();
		setCustomer(null);
	}

	private void save() {
		service.save(customer);
		mainView.updateList();
		setCustomer(null);
	}
}
----

All planned features are now done. You can save the changes and play around with
the application. You can also download
https://github.com/vaadin/flow-and-components-documentation/tree/master/tutorial-getting-started[the final application] from Github.


Congratulations! Users can now create, read, update and delete customer records stored in the demo backend, using the app you created with Vaadin Flow.

If you are an experienced Java developer, you are probably already full of ideas of how you can use your existing skills and create new UIs apps for your existing Java apps. If you want more ideas of how to create full stack applications, you might, for example, go through the http://spring.io/guides/gs/crud-with-vaadin/[Creating CRUD UI with Vaadin] guide and create a bit similar UI with a real database backend, implemented with Spring Data JPA. We have also collected a couple of other resources for an easy start in your Vaadin developer career.

 * https://vaadin.com/start#vaadin10[Vaadin 10 app starters]
 * http://vaadin.com/directory[Directory] - a vast source of awesome Vaadin add-ons
