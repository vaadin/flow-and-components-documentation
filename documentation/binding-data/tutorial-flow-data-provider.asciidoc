---
title: Showing a list of data with Data Providers
order: 5
layout: page
---

[[datamodel.dataproviders]]
= Showing a list of data with Data Providers

A common pattern in applications is that the user is first presented with a list of items, from which they select one or several items to continue working with.
These items could be inventory records to survey, messages to respond to or blog drafts to edit or publish.

A listing is a component that displays one or several properties from a list of items, allowing the user to inspect the data, mark items as selected and in some cases even edit the item directly through the component.
While each listing component has its own API for configuring exactly how the data is represented and how it can be manipulated, they all share the same mechanisms for receiving data to show.
Namely, all officially supported listing components use a `DataProvider` to fetch items needed for display.

The items are generally either loaded directly from memory or lazily loaded from some kind of backend.
Regardless of how the items are loaded, the component is configured with one or several callbacks that define how the item should be displayed.

In the following example, a `ComboBox` that lists status items is configured to use the `Status.getLabel()` method to represent each status.
There is also a `Grid`, which is configured with one column from the person’s name and another showing the year of birth.

[source, java]
----
ComboBox<Status> comboBox = new ComboBox<>();
comboBox.setItemLabelGenerator(Status::getLabel);

Grid<Person> grid = new Grid<>();
grid.addColumn(Person::getName).setHeader("Name");
grid.addColumn(person -> Integer.toString(person.getYearOfBirth()))
        .setHeader("Year of birth");
----

[NOTE]
In this example, it would not even be necessary to define any item caption provider for the combo box if `Status.toString()` would be implemented to return a suitable text.
`ComboBox` is by default configured to use `toString()` for finding a caption to show.

After we have told the component how the data should be shown, we only need to give it some data to actually show.
The easiest way of doing that is to directly pass the values to show to `setItems`.

[source, java]
----
// Sets items as a collection
comboBox.setItems(EnumSet.allOf(Status.class));

// Sets items using varargs
grid.setItems(
        new Person("George Washington", 1732),
        new Person("John Adams", 1735),
        new Person("Thomas Jefferson", 1743),
        new Person("James Madison", 1751)
);
----

==== Sorting in-memory data

Listing components that allow the user to control the display order of the items (such as Grid) are automatically able to sort data by any property as long as the property type implements `Comparable`.

We can also define a custom `Comparator` if we want to customize the way a specific column is sorted.
The comparator can either be based on the item instances or on the values of the property that is being shown.

[source, java]
----
grid.addColumn(Person::getName).setHeader("Name")
        // Override default natural sorting
        .setComparator(Comparator
                .comparing(person -> person.getName().toLowerCase()));
----

[NOTE]
This kind of sorting is only supported for in-memory data.
Sorting with data that is lazily loaded from a backend is described <<lazy-sorting,later in this chapter>>.

Instead of directly assigning the item collection as the items that a component should be using, we can create a `ListDataProvider` that contains the items.
One list data provider instance can be shared between different components to make them show the same data.
The instance can be further configured to filter out some of the items or to present them in a specific order.

For components like `Grid` that can be separately configured to sort data in a specific way, the sorting configured in the data provider is only used as a fallback.
The fallback is used if no sorting is defined through the component and to define the order between items that are considered to be the same according to the component’s sorting.
All components will automatically update themselves when the sorting of the data provider is changed.

[source, java]
----
ListDataProvider<Person> dataProvider =
        DataProvider.ofCollection(persons);

dataProvider.setSortOrder(Person::getName,
        SortDirection.ASCENDING);

Grid<Person> grid = new Grid<>(Person.class);
// The grid shows the persons sorted by name
grid.setDataProvider(dataProvider);

// Makes the combo box show persons in descending order
button.addClickListener(event -> {
    dataProvider.setSortOrder(Person::getName,
            SortDirection.DESCENDING);
});
----

==== Filtering in-memory data

You can configure the data provider to always apply some specific filter to limit which items are shown or to make it filter by data that is not included in the displayed item caption.

[source, java]
----
ListDataProvider<Person> dataProvider =
        DataProvider.ofCollection(persons);

ComboBox<Person> comboBox = new ComboBox<>();
comboBox.setDataProvider(dataProvider);

departmentSelect.addValueChangeListener(event -> {
    Department selectedDepartment = event.getValue();
    if (selectedDepartment != null) {
        dataProvider.setFilterByValue(
                Person::getDepartment,
                selectedDepartment);
    } else {
        dataProvider.clearFilters();
    }
});
----

In this example, the department selected in the `departmentSelect` component is used to dynamically change which persons are shown in the combo box.
In addition to `setFilterByValue`, it is also possible to set a filter based on a predicate that tests each item or the value of some specific property in the item.
Multiple filters can also be stacked by using `addFilter` methods instead of `setFilter`.

The listing component cannot automatically know about changes to the list of items or to any individual item.
We must notify the data provider when items are changed, added or removed so that components using the data will show the new values.
For this purpose, DataProvider has two methods, `refreshAll` and `refreshItems`; the following example shows their usage:

[source, java]
----
ListDataProvider<Person> dataProvider =
        new ListDataProvider<>(persons);

Button addPersonButton = new Button("Add person",
        clickEvent -> {
            persons.add(new Person("James Monroe", 1758));
            dataProvider.refreshAll();
        });

Button modifyPersonButton = new Button("Modify person",
        clickEvent -> {
            Person personToChange = persons.get(0);
            personToChange.setName("Changed person");
            dataProvider.refreshItem(personToChange);
        });
----

[[datamodel.dataproviders.lazy]]
== Lazy Loading Data to a Listing

All the previous examples have shown cases with a limited amount of data that can be loaded as item instances in memory.
There are also situations where it is more efficient to only load the items that will currently be displayed.
This includes situations where all available data would use lots of memory or when it would take a long time to load all the items.

[NOTE]
Regardless of how we make the items available to the listing component on the server, components like `Grid` will always take care of only sending the currently needed items to the browser.

For example, consider we have the following existing backend service that fetches items from a database or a REST service.

[source, java]
----
public interface PersonService {
    List<Person> fetchPersons(int offset, int limit);
    int getPersonCount();
}
----

To use this service with a listing component, we need to define one callback for loading specific items and one callback for finding how many items are currently available.
We should create a DataProvider from these two callbacks using fromCallbacks method. Information about which items to fetch including offset,
limit, and some additional details are made available in a Query object that is passed to both callbacks.

[source, java]
----
DataProvider<Person, Void> dataProvider = DataProvider.fromCallbacks(
        // First callback fetches items based on a query
        query -> {
            // The index of the first item to load
            int offset = query.getOffset();

            // The number of items to load
            int limit = query.getLimit();

            List<Person> persons = getPersonService()
                    .fetchPersons(offset, limit);

            return persons.stream();
        },
        // Second callback fetches the number of items for a query
        query -> getPersonService().getPersonCount());
);

Grid<Person> grid = new Grid<>();
grid.setDataProvider(dataProvider);

// Columns are configured in the same way as before
----

[NOTE]
The results of the first and second callbacks must be symmetric so that fetching all available items using the first callback returns the number of items indicated by the second callback.
Thus if you impose any restrictions on e.g. a database query in the first callback, you must also add the same restrictions for the second callback.

[NOTE]
The second type parameter of `DataProvider` defines how the provider can be filtered. In this case, the filter type is `Void`, meaning that it doesn’t support filtering. Backend filtering will be covered later in this chapter.


[[lazy-sorting]]
=== Sorting

It is not practical to order items based on a `Comparator` when the items are loaded on demand, since it would require all items to be loaded and inspected.

Each backend has its own way of defining how the fetched items should be ordered, but they are in general based on a list of property names and information on whether ordering should be ascending or descending.

As an example, there could be a service interface which looks like the following.

[source, java]
----
public interface PersonService {
    List<Person> fetchPersons(
    int offset,
    int limit,
    List<PersonSort> sortOrders);
    int getPersonCount();

    PersonSort createSort(
            String propertyName,
            boolean descending);
}
----

With the above service interface, our data source can be enhanced to convert the provided sorting options into a format expected by the service.
The sorting options set through the component will be available through `Query.getSortOrders()`.

[source, java]
----
DataProvider<Person, Void> dataProvider = DataProvider.fromCallbacks(
          query -> {
              List<PersonSort> sortOrders = new ArrayList<>();
              for(SortOrder<String> queryOrder : query.getSortOrders()) {
                  PersonSort sort = getPersonService().createSort(
                          // The name of the sorted property
                          queryOrder.getSorted(),
                          // The sort direction for this property
                                  queryOrder.getDirection() == SortDirection.DESCENDING);
                  sortOrders.add(sort);
              }

              return getPersonService().fetchPersons(
                      query.getOffset(),
                      query.getLimit(),
                      sortOrders
              );
          },

          // The number of persons is the same regardless of ordering
          query -> getPersonService().getPersonCount()
);
----

We also need to configure our grid so that it can know what property name should be included in the query when the user wants to sort by a specific column.
When a data source that does lazy loading is used, `Grid` and other similar components will only let the user sort by columns for which a sort property name is provided.

[source, java]
----
Grid<Person> grid = new Grid<>();

grid.setDataProvider(dataProvider);

// Will be sortable by the user
// When sorting by this column, the query will have a SortOrder
// where getSorted() returns "name"
grid.addColumn(Person::getName).setHeader("Name")
                .setSortProperty("name");

// Will not be sortable since no sorting info is given
grid.addColumn(Person::getYearOfBirth).setHeader("Year of birth");
----

There might also be cases where a single property name is not enough for sorting.
This might be the case if the backend needs to sort by multiple properties for one column in the user interface or if the backend sort order should be inverted compared to the sort order defined by the user.
In such cases, we can define a callback that generates suitable `SortOrder` values for the given column.

[source, java]
----
grid.addColumn(person -> person.getName() + " " + person.getLastName())
        .setHeader("Name").setSortOrderProvider(
                // Sort according to last name, then first name
                direction -> Stream.of(
                        new QuerySortOrder("lastName", direction),
                        new QuerySortOrder("firstName", direction)));
----

[[lazy-filtering]]
=== Filtering

Different types of backends support filtering in different ways.
Some backends support no filtering at all, some support filtering by a single value of some specific type and some have a complex structure of supported filtering options.

We explain the usage of data providers in filtering with some examples.

==== Filtering in ComboBox

===== Case 1

A `DataProvider<Person, String>` accepts one string to filter by through the query.
It’s up to the data provider implementation to decide what it does with that filter value.
It might, for instance, look for all persons with a name beginning with the provided string.

A listing component that lets the user control how the displayed data is filtered has some specific filter type that it uses.
For `ComboBox`, the filter is the string that the user has typed into the search field.
This means that `ComboBox` can only be used with a data provider whose filtering type is `String`.
Consider that we have the following service:

[source, java]
----
public interface DepartmentService {
    List<Department> fetch(int offset, int limit, String filterText);
    int getCount(String filterText);
}
----

We need to create a DataProvider to use these service methods to fill a ComboBox with data. The following example shows how to do it:

[source, java]
----
DataProvider<Department, String> createDepartmentDataProvider(DepartmentService service) {
        return DataProvider.fromFilteringCallbacks(query -> {
            // getFilter returns Optional<String>
            String filter = query.getFilter().orElse(null);
            return service.fetch(query.getOffset(), query.getLimit(), filter).stream();
        }, query -> {
            String filter = query.getFilter().orElse(null);
            return service.getCount(filter);
        });
    }
----

Now, we can use the `DataProvider`:

[source, java]
----
DataProvider<Department, String> dataProvider =createDepartmentDataProvider(service);
ComboBox<Department> departmentComboBox = new ComboBox<>();
departmentComboBox.setDataProvider(dataProvider);
----

===== Case 2

Another common scenario is when we need to filter ComboBox items based on the value of another component. Consider we have a ComboBox for selecting an employee that is filtered by the value of the department ComboBox.
Of course, the employee ComboBox can also be filtered by the text that is typed in its input. In such a case, our service could be like this:

[source, java]
----
public interface EmployeeService {
    List<Employee> fetch(int offset, int limit, EmployeeFilter filter);
    int getCount(EmployeeFilter filter);
}
public class EmployeeFilter {
    private String filterText;
    private Department department;

    public EmployeeFilter(String filterText, Department department) {
        this.filterText = filterText;
        this.department = department;
    }

    public String getFilterText() {
        return filterText;
    }

    public void setFilterText(String filterText) {
        this.filterText = filterText;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }
}
----

As we have two different types of filters, one for the input text and one for the selected department, we can no longer use `DataProvider<Employee, String> directly`.
However, it is possible to create a data provider wrapper that allows programmatically setting the filter value to include in the query.
In order to create that wrapper, we should use the `withConfigurableFilter` method to create a `ConfigurableFilterDataProvider<Employee, String, Department>`, like this:

[source, java]
----
    ConfigurableFilterDataProvider<Employee, String, Department>
    getDataProvider(EmployeeService service) {
        DataProvider<Employee, EmployeeFilter> dataProvider = DataProvider.fromFilteringCallbacks(query -> {
            // getFilter returns Optional<String>
            EmployeeFilter filter = query.getFilter().orElse(null);
            return service.fetch(query.getOffset(), query.getLimit(), filter).stream();
        }, query -> {
            EmployeeFilter filter = query.getFilter().orElse(null);
            return service.getCount(filter);
        });

        ConfigurableFilterDataProvider<Employee, String, Department> configurableFilterDataProvider = dataProvider
                .withConfigurableFilter(
                        (String filterText, Department department) -> new EmployeeFilter(filterText, department));

        return configurableFilterDataProvider;
    }
----

Now, we can use the DataProvider:

[source, java]
----
        ConfigurableFilterDataProvider<Employee, String, Department
> employeeDataProvider = getDataProvider(service);
        ComboBox<Employee> employeeComboBox = new ComboBox<>();
        employeeComboBox.setDataProvider(employeeDataProvider);
----

And we should manually set the department when it’s changed by calling the setFilter method of ConfigurableFilterDataProvider like this:

[source, java]
----
        departmentComboBox.addValueChangeListener(event -> {
            employeeDataProvider.setFilter(event.getValue());
            employeeDataProvider.refreshAll();
        });
----

===== Case 3

We may use a Predicate parameter in our service methods to have a flexible filtering. E.g.

[source, java]
----
public interface PersonService {
    List<Person> fetch(int offset, int limit, Optional<Predicate<Person>> predicate);
    int getCount(Optional<Predicate<Person>> predicate);
}
----

In such a case we can still use the `fromFilteringCallbacks method` to create a `DataProvider<Person, String>` directly.
However, a cleaner solution is to create a `DataProvider<Person, Predicate<Employee>>` and then convert it to `DataProvider<Person, String>` using the `withConvertedFilter` method like this:

[source, java]
----
DataProvider<Person, String> getDataProvider(PersonService service) {
    DataProvider<Person, Predicate<Person>> predicateDataProvider = DataProvider.fromFilteringCallbacks(
            query -> service.fetch(query.getOffset(), query.getLimit(), query.getFilter()).stream(),
            query -> service.getCount(query.getFilter()));

    DataProvider<Person, String> dataProvider = predicateDataProvider
            .withConvertedFilter(text -> (person -> person.getName().startsWith(text)));

    return dataProvider;
}
----

To use a data provider that filters by some other type, you need to use the `withConvertedFilter`. In this example, we filter a series of people by name. Users type some text into a filter input line,
but we can not directly use the text to select data items from the existing objects. Here we use a lambda which produces a predicate (another lambda) which filters the people by name.

Now, we can use the DataProvider:

[source, java]
----
DataProvider<Person, String> dataProvider = getDataProvider(service);
ComboBox<Person> comboBox = new ComboBox<>();
comboBox.setDataProvider(dataProvider);
----

==== Filtering with Grid

You can use the `withConfigurableFilter` method on a data provider to create a data provider wrapper
that allows configuring the filter that is passed through the query.
All components that use a data provider will refresh their data when a new filter is set.

[source, java]
----
DataProvider<Employee, String> employeeProvider = getEmployeeProvider();

ConfigurableFilterDataProvider<Employee, Void, String> wrapper =
        employeeProvider.withConfigurableFilter();

Grid<Employee> grid = new Grid<>();
grid.setDataProvider(employeeProvider);
grid.addColumn(Employee::getName).setHeader("Name");

searchField.addValueChangeListener(event -> {
    String filter = event.getValue();
    if (filter.trim().isEmpty()) {
        // null disables filtering
        filter = null;
    }

    wrapper.setFilter(filter);
});
----

Note that the filter type of the `wrapper` instance is `Void`, which means that the data provider doesn’t support any further filtering through the query.
It’s therefore not possible to use the data provider with a combo box.

[[lazy-refresh]]
=== Refreshing

When your application makes changes to the data that is in your backend, you might need to make sure all parts of the application are aware of these changes.
All data providers have the `refreshAll` and `refreshItem` methods.
These methods can be used when data in the backend has been updated.

For example Spring Data gives you new instances with every request, and making changes to the repository will make old instances of the same object "stale".
In these cases you should inform any interested component by calling `dataProvider.refreshItem(newInstance)`.
This can work out of the box, if your beans have equals and hashCode implementations that check if the objects represent the same data.
Since that is not always the case, the user of a `CallbackDataProvider` can give it a `ValueProvider` that will provide a stable ID for the data objects.
This is usually a method reference, eg. Person::getId.

As an example, our service interface has an update method that returns a new instance of the item.
Other functionality has been omitted to keep focus on the updating.

[source, java]
----
public interface PersonService {
    Person save(Person person);
}
----

Part of the application code wants to update a persons name and save it to the backend.

[source, java]
----
DataProvider<Person, String> allPersonsWithId = new CallbackDataProvider<>(
        fetchCallback, sizeCallback, Person::getId);

Grid<Person> persons = new Grid<>();
persons.setDataProvider(allPersonsWithId);
persons.addColumn(Person::getName).setHeader("Name");

Button modifyPersonButton = new Button("", event -> {
    Person personToChange = service.fetchById(128);
    personToChange.setName("Changed person");
    Person newInstance = service.save(personToChange);
    allPersonsWithId.refreshItem(newInstance);
});
----
