---
title: Remote Procedure Calls
order: 3
layout: page
---

= Remote Procedure Calls

Remote Procedure Calls (RPCs) are a way to execute procedures or subroutines in a different address space, typically on another machine.

Vaadin Flow handles server-client communication by allowing RPC calls from the server to the client, and _vice versa_. 

== Calling Client-side Methods from the Server

You can execute client-side methods from the server by accessing the `Element` API.

=== callFunction Method

The `callFunction` method allows you to execute a client-side component function from the server side. The method accepts two parameters: the name of the function to call, and the arguments to pass to the function. 

The arguments passed to the function must be of a type supported by the communication mechanism. The supported types are `String`, `Boolean`, `Integer`, `Double`, `JsonValue`, `Element`, and `Component`.

*Example*: Using the `callFunction` method to execute the `clearSelection` function.

[source, java]
----
public void clearSelection() {
    getElement().callFunction("clearSelection");
}

public void setExpanded(Component component) {
    getElement().callFunction("expand", component.getElement());
}
----

=== executeJavaScript Method

You can also use the `executeJavaScript` method to execute JavaScript asynchronously from the server side. You can use this method in addition to the `callFunction` method.

The `executeJavaScript` method accepts two parameters: the JavaScript expression to invoke, and the parameters to pass to the expression. Note that the given parameters are available as variables named `$0`, `$1`, and so on.

The arguments passed to the expression must be of a type supported by the communication mechanism. The supported types are `String`, `Integer`, `Double`, `Boolean` and `Element`.

*Example*: Using the `executeJavaScript` method.

[source, java]
----
public void complete() {
    getElement().executeJavaScript("$0.complete()", this);
}
----

It is also possible to call the `executeJavaScript` method to access methods and fields of a Web Component.


== Calling Server-side Methods from the Client

You can call a server-side method from the client side using either the `@EventHandler` or `@ClientCallable` annotation.

=== @EventHandler Annotation

The `@EventHandler` annotation allows you to register a server-side method as an event handler. It publishes the annotated method and allows it to be invoked from the client side as a template event handler. See <<../polymer-templates/tutorial-template-event-handlers#,Handling User Events in a PolymerTemplate>> for more.

=== @ClientCallable annotation

The `@ClientCallable` annotation allows you to invoke a server-side method from the client side. It marks a template method as a method that can be called from the client side using the `this.$server.serverMethodName(args)` notation.

You can use it anywhere in your client-side Polymer class implementation, and can pass your own arguments in the method. Note that the types should match the method declaration on the server side. 

*Example*: Using `this.$server.clickHandler()` to mark a template method.

[source, xml]
----
this.$server.clickHandler()
----

*Example*: Using the `@ClientCallable` annotation on the server side.
[source, java]
----
    @ClientCallable
    public void clickHandler() {
        // do your server side action here
    }
----

[IMPORTANT]
Property changes, DOM events, event-handler methods (methods annotated with `@EventHandler`) and client-delegate methods (methods annotated with `@ClientCallable`) are blocked for disabled components.
