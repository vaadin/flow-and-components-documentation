---
title: Remote Procedure Calls
order: 3
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Remote Procedure Calls

RPC (Remote Procedure Calls) is a way of executing a procedure or subroutine in a different address space, typically on another machine.

Flow handles server-client communication allowing to invoke RPC from the server to client side and from the client to the server side.

== Call a client-side method from the server side

It is possible to execute a client-side method from the server side by accessing the Element API.

The Element API `callFunction` allows executing a client-side component function taking as arguments the name of the function to call and the arguments to pass to the function.

[NOTE]
The arguments to pass to the function must be of a type supported by the communication mechanism.
The supported types are `String`, `Boolean`, `Integer`, `Double`, `JsonValue`, `Element` and `Component`.

[source, java]
----
public void clearSelection() {
    getElement().callFunction("clearSelection");
}

public void setExpanded(Component component) {
    getElement().callFunction("expand", component.getElement());
}
----

In addition to this, `executeJavaScript` can be used to execute JavaScript asynchronously from the server side.
`executeJavaScript` has 2 parameters, the JavaScript expression to invoke and the parameters to pass to the expression.
Notice that the given parameters will be available as variables named `$0`, `$1`, and so on.

[NOTE]
The arguments to pass to the function must be of a type supported by the communication mechanism.
The supported types are `String`, `Integer`, `Double`, `Boolean` and `Element`.

It is also possible to call `executeJavaScript` method to access methods and fields of a web component:

[source, java]
----
public void complete() {
    getElement().executeJavaScript("$0.complete()", this);
}
----

Notice that `Element.executeJavaScript` method was introduced in Vaadin 12. For previous Vaadin Platform versions it is necessary to access the `Page`.

[source, java]
----
public void complete() {
    Page page = UI.getCurrent().getPage();
    page.executeJavaScript("$0.complete()", this);
}
----

[NOTE]
Please consult and <<../creating-components/tutorial-component-basic#, Creating a Simple Component Using the Element API>> for creating a new component using element API.

== Call a server-side method from the client side

A method defined in the server side can be called from the client side in 2 different ways:

. Using the `@EventHandler` annotation to register a server-side method as an event handler.
. Using the `@ClientCallable` annotation to invoke a server-side method from the client side.

=== Event handler method

The `@EventHandler` annotation publishes the annotated method so it can be invoked from the client side as template event handlers.
For more information about `@EventHandler`, please consult <<../polymer-templates/tutorial-template-event-handlers",Handling User Events in a PolymerTemplate>>.

=== Client delegate method

Another way to call a server side method is `@ClientCallable` annotation which marks a template method as the
method which should be called from the client side code using notation `this.$server.serverMethodName(args)`.

It can be used anywhere in your client-side Polymer class implementation. You can pass your own arguments in this method.
Just make sure that their types match to method declaration on the server side.

[source, xml]
----
this.$server.clickHandler()
----

[IMPORTANT]
Property changes, DOM events, Event handler methods (methods annotated with `@EventHandler`) and Client delegate methods (methods annotated with `@ClientCallable`) are blocked for disabled components.

