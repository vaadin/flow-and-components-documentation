---
title: Basic Integration of a Polymer Web Component
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Basic Integration of a Polymer Web Component

This tutorial covers setting up a basic web component and importing needed resources. For related tutorials, see

* <<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>
* <<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>

A web component is a reusable client-side component that you can use in the same way as regular HTML elements.
It has a custom HTML tag name and it's mainly configured by setting HTML attributes or properties.
The contents of the web component is defined by adding text or other DOM elements as children inside the component's own DOM element.

The Java class for integrating  https://elements.polymer-project.org/elements/paper-slider[`<paper-slider>`] can start out as follows:

[source,java]
----
@Tag("paper-slider")
@HtmlImport("frontend://bower_components/paper-slider/paper-slider.html")
public class PaperSlider extends Component {
    public PaperSlider() {
    }
}
----

You specify the tag name of the element using the `@Tag` annotation, just like you would with any built in element such as `<div>`. The actual implementation of the `<paper-slider>` element is in the `paper-slider.html` file, which you can  import using `@HtmlImport`.

== Configuring the Project

[NOTE]
If you are using some project base or a demo such as https://github.com/vaadin/beverage-starter-flow[`Beverage Buddy`] as a starting point, you probably have everything already configured. In this case, you can skip to <<tutorial-webcomponents-bower#,Installing the Web Component>>.

The imported file `paper-slider.html` contains client side code which needs to be available as a web resource. 
The recommended way to do it is to use webjars. To add a webjar to the project you only need to specify it as a project dependency.
Maven example:

[source,xml]
----
<dependency>
    <groupId>org.webjars.bowergithub.polymerelements</groupId>
    <artifactId>paper-slider</artifactId>
    <version>2.0.2</version>
</dependency>
----

[NOTE]
Please see <<tutorial-flow-webjars#,Webjars in Flow>> tutorial explaining all details about webjars.

[NOTE]
Another (outdated) way to make the web component files available as a web resource is described in <<tutorial-webcomponents-bower#,Using bower to make available a web component as a web resource>>

With this basic integration, you can use add the `PaperSlider` class to a view to see that it works:
[source,java]
----
public class PaperSliderView extends Div {
    public PaperSliderView() {
        add(new PaperSlider());
    }
}
----

For creating an API for attributes and properties, see
<<tutorial-webcomponent-attributes-and-properties#,Using Attributes and Properties with a Polymer Web Component>>.
For listening to events from a web component, see
<<tutorial-webcomponent-events#,Using Events with a Polymer Web Component>>.

[NOTE]
Web components implemented using Polymer should be used with Polymer's own https://www.polymer-project.org/1.0/docs/devguide/local-dom[DOM API]. Flow will automatically use the Polymer DOM API when appropriate.

== Preparing downloaded dependencies for production release

This topic is covered in <<tutorial-webcomponents-es5#,Serving ES5 Web Components to older browsers with Polymer 2>>
