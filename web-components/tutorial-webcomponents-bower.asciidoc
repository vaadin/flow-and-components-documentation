---
title: Using bower to make available a web component as a web resource
order: 7
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Using bower to make available a web component as a web resource

This is an old and deprecated way to make available a web component as a web resource.
It's highly recommended to use webjars instead. See <<tutorial-webcomponent-basic#,Basic Integration of a Polymer Web Component>>
and <<tutorial-flow-webjars#,Webjars in Flow>> tutorials about using webjars.

If you for some reasons don't want to use webjars then it's possible to make
available a web resource installing web component files locally (via `bower`) and package
them along with your application. 
You may want to do this e.g. if you want to be able to change web component source files
(which is impossible if you are using webjar where they are packaged in binary archive).

To be able to get the web component files locally they need to be fetched and
and saved in some directory which is served by your server.
If you use maven then just add the following snippet in your `pom.xml` file inside your `plugins` section:

[source,xml]
----
    <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${frontend.maven.plugin.version}</version>
        <configuration>
            <nodeVersion>${node.version}</nodeVersion>
            <npmVersion>${npm.version}</npmVersion>
        </configuration>
        <executions>
            <execution>
                <id>install-node-and-npm</id>
                <goals>
                    <goal>install-node-and-npm</goal>
                    <goal>npm</goal> <!-- runs 'install' by default -->
                    <goal>bower</goal> <!-- runs 'install' by default -->
                </goals>
                <configuration>
                    <workingDirectory>${frontend.working.directory}</workingDirectory>
                </configuration>
            </execution>
        </executions>
    </plugin>
----

This plugin will install for you tools for webcomponents management (`npm` and `bower`) assuming you are using
`${frontend.working.directory}` directory as a web resource directory in your project.

[NOTE]
The default for `${frontend.working.directory}` is `src/main/webapp/frontend`, but you can pick any directory you want.

This directory should have files `bower.json` and `package.json`.

The `bower.json` content is a file where you list all the dependencies you need from the frontend part of the application:

[source,json]
----
{
  "name": "your project name",
  "homepage": "",
  "authors": [],
  "description": "",
  "main": "",
  "license": "Apache2",
  "private": true,
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "polymer": "~2.0.2",
    "paper-slider": "~2.0.0"
  }
}
----

[NOTE]
This file is processed with `bower` utility to download web components. If you have it preinstalled, you may want to skip the next step.
For further info on the file contents, please refer to https://github.com/bower/spec/blob/master/json.md[bower.json file specification]

To download `bower`, another file is used: `package.json`
The file contents looks the following way:

[source,json]
----
{
  "name": "your project name",
  "version": "1.0.0",
  "main": "",
  "dependencies": {
    "bower": "~1.8.2"
  },
  "scripts": {
  },
  "author": "",
  "license": "Apache-2.0"
}
----

[NOTE]
Current situation (using different files for downloading dependencies) will be different in future, when https://www.polymer-project.org/blog/2017-08-23-hands-on-30-preview[Polymer 3.0] will be released.
For further info on the file contents, please refer to https://docs.npmjs.com/files/package.json[package.json file specification]

[NOTE] Workflows not using Maven are not supported at the moment. If your project doesn't use Maven, you will need to install and run `bower` directly, which is described bellow.

In this example it is assumed that you are using bower and have a `bower_components` directory in the root of you `WAR` file.

You can set up the `bower_components` and `bower.json` manually by running

[source,sh]
----
bower init
----

[NOTE]
To install `bower`, you first need to install _Node.js_ through a https://nodejs.org/en/download/package-manager/[package manager] or by https://nodejs.org/en/download/[downloading the installer].
You can then install `bower` by running `npm install -g bower`.

`bower init` will ask a you couple of questions and it creates the `bower.json` file.
The default answers for all the questions are suitable for this kind of integration, so you can simply proceed by pressing `enter` to accept each default answer.

== Installing the Web Component

Running the following command in `${frontend.working.directory}` will install the `paper-slider` component.

[source,sh]
----
bower install paper-slider --save
----

[NOTE]
You can also install web components by manually adding dependencies to the `bower.json` file and running `bower install`, which will download all the dependencies declared in the file.
