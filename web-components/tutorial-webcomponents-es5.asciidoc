---
title: Serving ECMAScript 5 webcomponents with Polymer 2
order: 8
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Serving ECMAScript 5 webcomponents with Polymer 2

As mentioned in the <<tutorial-flow-maven-plugin#,Taking your app into production>>
tutorial transpilation to ECMAScript 5 is required to use an application with browsers that don’t support ES6.  
Luckily there's a library that can transpile and optimize the ES6 files to ES5, which is provided by the Polymer project:
`polymer-build`.

[TIP]
The same library can also be used to optimize ES6 scripts, by using minification.

== Project structure

You will need `bower.json`, `package.json` files and `bower_components` folder with all web components and their dependencies in `${frontend.working.directory}` folder.
<<tutorial-webcomponents-bower#,Using bower to make available a web component as a web resource>> tutorial
explains the content of those files and the way how to fetch web components into
`bower_components` via `bower`.
In this example `src/main/resources/META-INF/resources/` directory will be used for web resources instead of `src/main/webapp`
to make possible package the project also as JAR (in case of WAR this folder will be set as a web resource). 
You can also have a separate folder for your static files with other html/css/js files, usually that one is located in 
web resources folder of the application (which is `src/main/resources/META-INF/resources/` in our case).
We will consider this folder further, since the code from there would like to use dependencies from `${frontend.working.directory}/bower_components` folder.

If we consider `${frontend.working.directory}` to be located at `src/main/resources/META-INF/resources/frontend`, we get the following structure:

* project-root/
** src/main/
*** java/ - Your Java code
*** resources/ - Resources root of your Java application
**** META-INF/ - META-INF folder
***** resources/ - Resources folder, static files not associated to webcomponents (such as images, favicon, files for download and so on)
****** static_file.js – should be able to reference files from `bower_components`
****** frontend/ - Root path of your webcomponents
******* bower_components/ - `bower` output directory containing all web components declared in `bower.json`
******* bower.json - a file with dependencies' declaration
******* package.json - a file for automatic `bower` downloading
** src/test/java/ - Your tests
** target/ - Your output directory
** pom.xml - Your project definition Maven file

=== Next steps
So, we have the static files and the dependencies, what's next?
We may want to post-process all the web files to
In your `${frontend.working.directory}` directory, you have to update `package.json` file:

==== package.json

Initial file state is described in <<tutorial-webcomponents-bower#,Using bower to make available a web component as a web resource>>
We have added and `polymer-cli` dependencies that will process our web files and have added two tasks: `prodMode` and `devMode`
Both tasks run `bower install` to install dependencies from `bower.json` and `prodMode` also runs `polymer build` that
uses installed `polymer-cli` tool to transpile the sources to ES5:.

[source,json]
----
{
  "name": "polymer-build",
  "version": "1.0.0",
  "main": "",
  "dependencies": {
    "bower": "~1.8.2",
    "polymer-cli": "~1.5.2"
  },
  "scripts": {
    "prodMode": "bower install && polymer build",
    "devMode": "bower install"
  }
}
----

and create two more files:

==== polymer.json

This file defines how the project will be built, used by `polymer-cli`. Here is where you set the
transpilation parameters. The entire structure of the file is described
https://www.polymer-project.org/2.0/docs/tools/polymer-json[here].

[source,json]
----
{
  "entrypoint": "index.html",
  "sources": [
   "bower.json"
  ],
  "extraDependencies": [
    "bower_components/webcomponentsjs/webcomponents-lite.js"
  ],
  "builds": [{
    "name": "frontend-es5",
    "js": {"compile": true, "minify": true},
    "css": {"minify": true},
    "html": {"minify": true}
  },
  {
    "name": "frontend-es6",
    "js": {"minify": true},
    "css": {"minify": true},
    "html": {"minify": true}
  }]
}
----

Here, we have added two configurations: `frontend-es5` and `frontend-es6`.
Both configuration will minify all html, css and js files and, additionally, `frontend-es5` will transpile js files.
Which files are subject to transpilation is determined in `index.html`: all urls are recursively analyzed and processed,
this file is considered in the next session.

[NOTE]
Change the `minify` property to `false` if you want to skip minification of your
files.

==== index.html

For pure Polymer applications without Flow, this file would be the entry point of
the application. It is sent to the browser before any other content. Polymer CLI
makes use of this fact and adds extra Javascript code into the entry point assuming
that it will be available for any script running at any other page of the application.

In Flow applications there is no `index.html` because Flow generates HTTP responses
dynamically. However, for ES5 support it is still necessary to add the same global
Javascript code before any other transpiled ES5 code.

If your application has a single root view (which is used as a super-parent in all
your views) then set its HTML file as the `entrypoint` here.

Otherwise create some HTML file (it can be `index.html`) and add an `@HtmlImport`
annotation with the reference to this file to your UI class. In this case this
file will be available on every page of your application since a UI component is the topmost.

[NOTE]
Normally you don't need to use your own custom `UI` class. But as described above you
may want to use it to have the `@HtmlImport` annotation with the `entrypoint` HTML file.
In this case here is an example of how you can enable your own `UI` in the application:

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "UIServlet", asyncSupported = true)
@VaadinServletConfiguration(ui = MyUI.class, productionMode = false)
public class Servlet extends VaadinServlet {

}

@HtmlImport("index.html")
public class MyUI extends UI{

}
----

In the `index.html` file you only add your own dependencies, using HTML imports:

[source,xml]
----
<!-- Assuming your files are located at ${frontend.working.directory}/components -->
<link rel="import" href="components/my-component1.html">
<link rel="import" href="components/my-component2.html">
----

[WARNING]
When creating a new component, don't forget to declare its dependencies in the
`bower.json` file and the component location in the `index.html` file.

After all changes and package being run, the project structure would be the following:

* project-root/
** src/main/
*** java/ - Your Java code
*** resources/ - Resources root of your Java application
**** META-INF/ - META-INF folder
***** resources/ - Resources folder, static files not associated to webcomponents (such as images, favicon, files for download and so on)
****** static_file.js – should be able to reference files from `bower_components`
****** frontend/ - Root path of your webcomponents
******* bower_components/ - `bower` output directory containing all web components declared in `bower.json`
******* bower.json - a file with dependencies' declaration
******* package.json - a file for automatic `bower` downloading
******* build/frontend-es5/ - transpiled and minified files for older browsers
******* build/frontend-es6/ - minified files for newer browsers
** src/test/java/ - Your tests
** target/ - Your output directory
** pom.xml - Your project definition Maven file

== Using Maven plugins to compile your project

Once properly structured, the project can be compiled using regular Maven
commands.

To do so, you need to add specific configuration to your `pom.xml` file. This
configuration is a one-time setup. You can copy-paste the example below it
directly to your `pom.xml`.

[TIP]
This configuration also prepares your project to properly run with the Maven
Jetty Plugin by using the `mvn jetty:run` command.

[source,xml]
----
<properties>
  <frontend.working.directory>${project.basedir}/src/main/resources/META-INF/resources/frontend</frontend.working.directory>

  <jetty.extra.resource.base>${project.basedir}/src/main/resources/META-INF/resources</jetty.extra.resource.base>
  <npm.build.goal>run devMode</npm.build.goal>
  <war.excludes>**/node_modules/,**/node/,**/build/,**/etc/,**/package.json,**/bower.json,**/polymer.json</war.excludes>
</properties>

<build>
  <plugins>
      <!-- Configures the cleanup process for JS dependencies and build -->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven.clean.plugin.version}</version>
          <configuration>
              <filesets>
                  <fileset>
                      <directory>${frontend.working.directory}/bower_components</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/build</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/node</directory>
                  </fileset>
                  <fileset>
                      <directory>${frontend.working.directory}/node_modules</directory>
                  </fileset>
              </filesets>
          </configuration>
      </plugin>

      <!-- Configures the frontend plugin to transpile the web components source -->
      <plugin>
          <groupId>com.github.eirslett</groupId>
          <artifactId>frontend-maven-plugin</artifactId>
          <version>${frontend.maven.plugin.version}</version>
          <configuration>
              <nodeVersion>${node.version}</nodeVersion>
              <npmVersion>${npm.version}</npmVersion>
          </configuration>
          <executions>
              <execution>
                  <id>install-node-and-npm</id>
                  <goals>
                      <goal>install-node-and-npm</goal>
                      <goal>npm</goal> <!-- runs 'install' by default -->
                  </goals>
                  <configuration>
                      <workingDirectory>${frontend.working.directory}</workingDirectory>
                  </configuration>
              </execution>
              <execution>
                  <id>npm run</id>
                  <goals>
                      <goal>npm</goal>
                  </goals>
                  <configuration>
                      <arguments>${npm.build.goal}</arguments>
                  </configuration>
              </execution>
          </executions>
      </plugin>

      <!-- Configures the Jetty plugin to use the right resource path, that is different depending on the approach -->
      <plugin>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-maven-plugin</artifactId>
          <version>${jetty.version}</version>
          <configuration>
              <webAppConfig>
                  <webInfIncludeJarPattern>.*/flow-.*.jar$|.*/test-resources-.*.jar$</webInfIncludeJarPattern>
                  <containerIncludeJarPattern>^$</containerIncludeJarPattern>
                  <resourceBases>
                      <resourceBase>${jetty.extra.resource.base}</resourceBase>
                      <resourceBase>${project.basedir}/src/main/resources/META-INF/resources</resourceBase>
                  </resourceBases>
              </webAppConfig>
          </configuration>
      </plugin>

      <!-- Package the war with web components -->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven.war.plugin.version}</version>
          <configuration>
              <archive>
                  <manifestEntries>
                      <Implementation-Title>${project.name}</Implementation-Title>
                      <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
              </archive>
              <webResources>
                  <resource>
                      <directory>${jetty.extra.resource.base}</directory>
                      <excludes>
                          <exclude>**/node/</exclude>
                          <exclude>**/node_modules/</exclude>
                          <exclude>**/etc/</exclude>
                          <exclude>**/package.json</exclude>
                          <exclude>**/bower.json</exclude>
                          <exclude>**/polymer.json</exclude>
                      </excludes>
                  </resource>
              </webResources>
              <warSourceExcludes>${war.excludes}</warSourceExcludes>
              <packagingExcludes>${war.excludes}</packagingExcludes>
          </configuration>
      </plugin>
  </plugins>
</build>

<profiles>
  <profile>
    <id>productionMode</id>
    <activation>
        <property>
            <name>vaadin.productionMode</name>
        </property>
    </activation>

    <properties>
        <!-- Overrides properties that are different for produciton mode -->
        <npm.build.goal>run prodMode</npm.build.goal>
        <jetty.extra.resource.base>${frontend.working.directory}/build</jetty.extra.resource.base>
        <war.excludes>**/frontend/bower_components/,**/node_modules/,**/node/,**/build/,**/etc/,**/package.json,**/bower.json,**/polymer.json</war.excludes>
    </properties>

    <!-- Makes the package run in production mode when deployed, without the need of setting extra properties on the server -->
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-server-production-mode</artifactId>
            <version>${flow.version}</version>
        </dependency>
    </dependencies>
  </profile>
</profiles>
----

The important things in this configuration are:

* Folder `src/main/resources/META-INF/resources` (which is the value of `jetty.extra.resource.base` property) 
is set as a web resource for Jetty plugin and maven WAR plugin in the default profile
(so this folder will be used instead of `src/main/webapp`).
* `jetty.extra.resource.base` property gets value `${frontend.working.directory}/build` in `productionMode` profile.

When application is executed in production mode `frontend-es6` and `frontend-es5` folders 
in web resources folder (which is `${frontend.working.directory}/build` in this case) 
will be used to resolve HMTL import URLs. You can find details below.  

[TIP]
There is <<tutorial-flow-maven-plugin#,Taking your app into production>> tutorial available which shows how 
to use only one `flow-maven-plugin` to achieve the same result. 

=== Production mode

By default, Flow applications run are packaged debug mode (or development mode),
which should be used during development. When packaging in debug mode, the
webcomponents are *not* complied, which allows the developer to change the
sources and see the changes right away upon refreshing the browser.

For example, when running the Jetty server from Maven, by using the
`mvn jetty:run` command, you can modify any webcomponent source file and just
refresh the browser to see the changes. No transpilation is required.

[WARNING]
You can only develop in that way when using an ES6 compatible browser. Older
browsers such as Safari 9 and Internet Explorer 11 require transpilation to work
properly with webcomponents.

To effectively transpile and minify your resources for production deployment, you
must run the packaging using the `-Dvaadin.productionMode` flag. For example:

[source,bash]
----
mvn package -Dvaadin.productionMode
----

You can test your application in production mode with the Jetty plugin as well:

[source,bash]
----
mvn jetty:run -Dvaadin.productionMode
----

=== Directories created by the process

When resolving dependencies and transpiling your components, several directories
and files are created inside your `${frontend.working.directory}`. Those files can be
safely ignored in you SCM, since they are generated from the build.

The ignorable files and directories are:

* bower_components/ – the folder where web components and their dependencies from `bower.json` are downloaded to, result of `bower install` command
* build/ – the folder where transpiled and minified files are added to, based on rules from `polymer.json`, result of `polymer build` operation
* etc/ – this and the next two folders are `node` and `npm` output folders that are downloading dependencies from `package.json` (`bower`, `polymer-cli`)
* node/
* node_modules/

== Manual transpilation

If you don't want to use Maven to transpile your components for you, you can use
the Polymer CLI directly (which uses polymer-build internally).

First step is to install the Polymer CLI tool. To do that, please
follow the steps mentioned at the https://www.polymer-project.org/2.0/docs/tools/polymer-cli[Polymer project]
page.

Using the same project structure and configuration files, you can run this
command from the `${frontend.working.directory}` directory:

[source,bash]
----
polymer build
----

This will generate the `build` directory, which contains the transpiled files.

== Linking both ES6 and ES5 files in your application

By using the `polymer.json` build configuration described above, two directories
are created: `build/frontend-es6` and `build/frontend-es5`. Those directories contain the ES6
optimized files and the ES5 optimized files respectively. You can serve both
build in your project, depending on the capabilities of the target browser.

Relative paths in your `@HtmlImport`, `@JavaScript` and `@StyleSheet` annotations are automatically resolved relative to the right frontend directory.

[source,java]
----
@Tag("my-component")
@HtmlImport("components/my-component.html")
public class MyComponent extends PolymerTemplate<MyModel> {
----

You can also explicitly use the `frontend://` protocol for dependencies, e.g. `@HtmlImport("frontend://components/my-component.html")`.

In production, the Flow application will determine whether the browser supports ES6 or
not. When the browser supports ES6, the linked file will be served from
`(context)/frontend-es6/components/my-component.html`. When it
doesn`t, the served file will be
`(context)/frontend-es5/components/my-component.html`.

That way you can support ES5 browsers without compromising ES6 capable browsers.

[NOTE]
The differentiation between ES5 and ES6 paths only occur when `productionMode` is
`true`. When running in debug (or development) mode, the `frontend://` protocol
behaves like the `context://frontend/` protocol (so it resolves URLs to `frontend` 
folder of the `(context)` location), and the files are served directly
from `${frontend.working.directory}`.

=== Changing the location of frontend files

If you want to serve your files from other directory, or even from other servers
(like a CDN), you can change a couple of system properties without changing your
code. You just need to set:

* `vaadin.frontend.url.es6` for the ES6 files URL
* `vaadin.frontend.url.es5` for the ES5 files URL

More details on parameters can be found in <<../advanced/tutorial-flow-runtime-configuration#,Flow runtime configuration>>

When you set, for example, your `frontend.url.es6` property to
`http://mydomain.com/es6/`, the resulting URL for a component annotated with
`@HTMLImport("components/my-component.html")` or
`@HTMLImport("frontend://components/my-component.html")` will be 
`http://mydomain.com/es6/components/my-component.html`.

In the example above we have used a different value for `jetty.extra.resource.base` property in production mode.
Another option would be to keep it's value as is but define properties to run the application
in production mode (this way may be useful in case when you can't redefine web resources e.g. in Spring Boot application):

 [source,bash]
----
mvn jetty:run -Dvaadin.productionMode -Dvaadin.frontend.url.es5=context://frontend/build/frontend-es5/ -Dvaadin.frontend.url.es6=context://frontend/build/frontend-es6/
----

[WARNING]
The base path defined by `frontend.url.es6` and `frontend.url.es5` properties
must end with a `/`.

[TIP]
You can also use the `context://` protocol in your `frontend.url.es6` and
`frontend.url.es5` properties. When doing so, the resulting URL will be relative
to the current context on the server.

[TIP]
Those properties are also used in debug mode (in other words, when
`productionMode = false`).
