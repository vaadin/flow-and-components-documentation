---
title: CSS Custom Properties
order: 100
layout: page
---

= CSS Custom Properties and Variables
ifdef::web[]
:toc: macro
:toc-title: Contents
:toclevels: 1
endif::web[]

CSS custom properties and variables allow you to define arbitrarily named properties and their values, which you can then later reference in other style sheets.
They reduce copy-paste, ensure consistency and make it easier to read and understand style sheets.

The built-in themes in Vaadin and their customizability are based on custom properties.

[CAUTION]
CSS custom properties are not natively supported in Internet Explorer 11.
A polyfill is automatically loaded which makes it possible to use them, but with some https://github.com/webcomponents/polyfills/tree/master/packages/shadycss#limitations[limitations].

ifdef::web[]
toc::[]
endif::web[]


== Defining Custom Properties

Custom properties can be defined inside any CSS selector, scoping them to that particular selector.
The most common place to define custom properties is at the document root, the `<html>` element.

Custom properties need to start with a double-dash, to distinguish them from standard properties and avoid naming collisions with future standards.

[source,css]
----
html {
  --theme-color: orange;
}
----

You can override the value of a custom property with higher priority selector.

[source,css]
----
.purple-theme {
  --theme-color: purple;
}
----

The value of a custom property can be any string.
They are not limited to existing CSS property values.
These values are mainly useful together with JavaScript.

[source,css]
----
html {
  --modes: fullscreen, compact, split-50-50;
}
----

== Using Custom Properties

Use the `var()` function to use a custom property value.

[source,css]
----
.link {
  color: var(--theme-color);
}
----

You can also define a fallback value for cases when the custom property is not defined.

[source,css]
----
.link {
  color: var(--theme-color, blue);
}
----

== Custom properties and Shadow DOM

Custom properties inherit by default, allowing them to “pierce” shadow DOM boundaries.
This makes it possible to theme/style components from outside their local style scope (see <<style-scopes#,Style Scopes>>), assuming a component is using a custom property in its local styles (with `var()`).


== Using with JavaScript

In addition to CSS, custom properties are also available to be used from JavaScript using the standard `getComputedStyle` method.

For example:

[source, javascript]
----
// Returns '1rem' when the Lumo theme is used
window.getComputedStyle(document.querySelector('html'))
  .getPropertyValue('--lumo-font-size-m');
----

You can also assign the value of a custom property using JavaScript.

For example:

[source, javascript]
----
// Reduce the default font size in the Lumo theme
document.querySelector('html').style.setProperty('--lumo-font-size-m', '0.875rem');
----


== Difference to Pre-Processor Variables

Custom properties are different from traditional CSS-preprocessor (Sass, Less, Stylus, etc.) variables. They do not need to be compiled before sending them to the browser and they are capable of changing their value at runtime, even based on the DOM hierarchy.

ifdef::web[]
== Related Tutorials

- https://vaadin.com/tutorials/css-variables[Styling Web Components with CSS variables]
endif::web[]
