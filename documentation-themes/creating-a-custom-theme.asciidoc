---
title: Creating a Custom Theme
order: 80
layout: page
---

= Creating a Custom Theme
ifdef::web[]
:toc: macro
:toc-title: Contents
:toclevels: 1
endif::web[]

If customizing built-in themes is not enough and you want complete control, you can create a completely custom theme from scratch.
This means that you explicitly define the style sheets for all the components that are used in your application.

ifdef::web[]
toc::[]
endif::web[]

== Prerequisites

This documentation applies only to *server-side (Java) applications*.

This approach is *recommended when you want to have full control over the CSS that gets sent to the browser*, if you want to avoid sending unnecessary CSS to the client.

Before creating a custom theme, you should consider customizing one of the built-in themes instead and see if that satisfies your requirements.
See the other articles in this section for instructions how to do that.

== Create Theme Class

You can integrate a custom component theme to be used with the built-in Vaadin components.
To do this, you need to create a https://vaadin.com/api/platform/com/vaadin/flow/theme/Theme.html[Theme] class that tells Vaadin how to translate the base un-themed component imports into your themed version.

The most important methods are:

* `getBaseUrl`: This should return the part of the import that is used to determine if it is an import that can be changed into a theme import.
For Vaadin components this is `/src/`.

* `getThemeUrl`: This should return what the base URL part should be changed into to get the correct theme import.
For Vaadin components this is `/theme/[_themeName_]`.

*Example*: Overriding the `getBaseUrl` and `getThemeUrl` methods in the `MyTheme` class.

.MyTheme.java
[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/IntegratingComponentTheme.java[tags=getUrls, indent=0]
}
----

If you need more control, you can use the `getHeaderInlineContents()` method that returns a collection of HTML that will be inlined to the `BootstrapPage` body.

*Example*: Using the `getHeaderInlineContents()` method to add a custom style that includes the correct typography styles.

.MyTheme.java
[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/IntegratingComponentTheme.java[tags=getHeaderInlineContents, indent=0]
----

Your can also support theme variants.
The Lumo theme, for example, supports both light and dark variants.

Override the `getHtmlAttributes` method in your custom theme class to add support for variants.

*Example*: Overriding the `getHtmlAttributes` method.

.MyTheme.java
[source, java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/IntegratingComponentTheme.java[tags=getHtmlAttributes, indent=0]
----

== Create Style Sheets

Create style sheets as JavaScript modules (`.js` files) for all the Vaadin elements in the `/frontend/theme/myTheme/` folder.

*Example*: Modifying  the `vaadin-button` component by adding custom rules to the original Lumo rules in `frontend/theme/myTheme/vaadin-button.js`.

[source,js]
----
// Import the non-themed component
import '@vaadin/vaadin-button/src/vaadin-button.js';
// Optional: reuse Lumo styles for button
import '@vaadin/vaadin-button/theme/lumo/vaadin-button-styles.js';

import { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';

// Register your custom CSS rules for vaadin-button
registerStyles('vaadin-button', css`
    :host {
      border-radius: 0;
    }
`);
----

You need to provide theme files for all components used in your application.
Omitted component display without any styles.
This is because all Vaadin components are imported using the `/src/` path, and it is the responsibility of the theme class to replace the `getBaseUrl()` pattern with an appropriate path to the themed elements (as returned in the `getThemeUrl()`).
